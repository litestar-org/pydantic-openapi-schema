{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pydantic OpenAPI Schema \u00b6 This library is a fork of openapi-schema-pydantic . Its used and is bundled by Starlite . You can see this issue in the upstream repository regarding it. In comparison to the original library this library has: updated docstrings with fixed links no typing issues updated types updated utilities updated export paths continuous maintenance dropped support for v3.0.3 Use is mostly identical to upstream package. Installation \u00b6 pip install pydantic-openapi-schema Contributing \u00b6 Starlite and all its official libraries are open to contributions big and small. You can always join our discord server or join our Matrix space to discuss contributions and project maintenance. For guidelines on how to contribute to this library, please see CONTRIBUTING.md in the repository's root.","title":"Pydantic OpenAPI Schema"},{"location":"#pydantic-openapi-schema","text":"This library is a fork of openapi-schema-pydantic . Its used and is bundled by Starlite . You can see this issue in the upstream repository regarding it. In comparison to the original library this library has: updated docstrings with fixed links no typing issues updated types updated utilities updated export paths continuous maintenance dropped support for v3.0.3 Use is mostly identical to upstream package.","title":"Pydantic OpenAPI Schema"},{"location":"#installation","text":"pip install pydantic-openapi-schema","title":"Installation"},{"location":"#contributing","text":"Starlite and all its official libraries are open to contributions big and small. You can always join our discord server or join our Matrix space to discuss contributions and project maintenance. For guidelines on how to contribute to this library, please see CONTRIBUTING.md in the repository's root.","title":"Contributing"},{"location":"reference/SUMMARY/","text":"pydantic_openapi_schema utils utils v3_1_0 callback components contact discriminator encoding example external_documentation header info license link media_type oauth_flow oauth_flows open_api operation parameter path_item paths reference request_body response responses schema security_requirement security_scheme server server_variable tag xml","title":"SUMMARY"},{"location":"reference/pydantic_openapi_schema/","text":"construct_open_api_with_schema_class \u00b6 construct_open_api_with_schema_class ( open_api_schema , by_alias = True ) Construct a new OpenAPI object, with the use of pydantic classes to produce JSON schemas. Parameters: Name Type Description Default open_api_schema T An instance of the OpenAPI model. required by_alias bool Construct schema by alias. True Returns: Type Description T new OpenAPI object with \"#/components/schemas\" values updated. If there is no update in \"#/components/schemas\" values, the original open_api will be returned.","title":"pydantic_openapi_schema"},{"location":"reference/pydantic_openapi_schema/#pydantic_openapi_schema.construct_open_api_with_schema_class","text":"construct_open_api_with_schema_class ( open_api_schema , by_alias = True ) Construct a new OpenAPI object, with the use of pydantic classes to produce JSON schemas. Parameters: Name Type Description Default open_api_schema T An instance of the OpenAPI model. required by_alias bool Construct schema by alias. True Returns: Type Description T new OpenAPI object with \"#/components/schemas\" values updated. If there is no update in \"#/components/schemas\" values, the original open_api will be returned.","title":"construct_open_api_with_schema_class()"},{"location":"reference/pydantic_openapi_schema/utils/","text":"construct_open_api_with_schema_class \u00b6 construct_open_api_with_schema_class ( open_api_schema , by_alias = True ) Construct a new OpenAPI object, with the use of pydantic classes to produce JSON schemas. Parameters: Name Type Description Default open_api_schema T An instance of the OpenAPI model. required by_alias bool Construct schema by alias. True Returns: Type Description T new OpenAPI object with \"#/components/schemas\" values updated. If there is no update in \"#/components/schemas\" values, the original open_api will be returned.","title":"utils"},{"location":"reference/pydantic_openapi_schema/utils/#pydantic_openapi_schema.utils.construct_open_api_with_schema_class","text":"construct_open_api_with_schema_class ( open_api_schema , by_alias = True ) Construct a new OpenAPI object, with the use of pydantic classes to produce JSON schemas. Parameters: Name Type Description Default open_api_schema T An instance of the OpenAPI model. required by_alias bool Construct schema by alias. True Returns: Type Description T new OpenAPI object with \"#/components/schemas\" values updated. If there is no update in \"#/components/schemas\" values, the original open_api will be returned.","title":"construct_open_api_with_schema_class()"},{"location":"reference/pydantic_openapi_schema/utils/utils/","text":"OpenAPI310PydanticSchema \u00b6 Bases: v3_1_0 . Schema Special Schema class to indicate a reference from pydantic class. schema_class class-attribute \u00b6 schema_class : Union [ Type [ BaseModel ], Type [ GenericModel ]] The class that is used for generate the schema. construct_open_api_with_schema_class \u00b6 construct_open_api_with_schema_class ( open_api_schema , by_alias = True ) Construct a new OpenAPI object, with the use of pydantic classes to produce JSON schemas. Parameters: Name Type Description Default open_api_schema T An instance of the OpenAPI model. required by_alias bool Construct schema by alias. True Returns: Type Description T new OpenAPI object with \"#/components/schemas\" values updated. If there is no update in \"#/components/schemas\" values, the original open_api will be returned. create_ref_prefix \u00b6 create_ref_prefix ( model ) Create a ref prefix for the given model. Parameters: Name Type Description Default model Union [ Type [ BaseModel ], Type [ GenericModel ]] Pydantic model instance. required Returns: Type Description str A prefixed name. extract_pydantic_types_to_openapi_components \u00b6 extract_pydantic_types_to_openapi_components ( obj , ref_class ) Recursively traverses the OpenAPI document, replacing any found Pydantic Models with $references to the schema's components section and returning the pydantic models themselves. Parameters: Name Type Description Default obj Any required ref_class Type [ v3_1_0 . Reference ] required Returns: Type Description Set [ Union [ Type [ BaseModel ], Type [ GenericModel ]]] set of pydantic schema classes","title":"utils"},{"location":"reference/pydantic_openapi_schema/utils/utils/#pydantic_openapi_schema.utils.utils.OpenAPI310PydanticSchema","text":"Bases: v3_1_0 . Schema Special Schema class to indicate a reference from pydantic class.","title":"OpenAPI310PydanticSchema"},{"location":"reference/pydantic_openapi_schema/utils/utils/#pydantic_openapi_schema.utils.utils.OpenAPI310PydanticSchema.schema_class","text":"schema_class : Union [ Type [ BaseModel ], Type [ GenericModel ]] The class that is used for generate the schema.","title":"schema_class"},{"location":"reference/pydantic_openapi_schema/utils/utils/#pydantic_openapi_schema.utils.utils.construct_open_api_with_schema_class","text":"construct_open_api_with_schema_class ( open_api_schema , by_alias = True ) Construct a new OpenAPI object, with the use of pydantic classes to produce JSON schemas. Parameters: Name Type Description Default open_api_schema T An instance of the OpenAPI model. required by_alias bool Construct schema by alias. True Returns: Type Description T new OpenAPI object with \"#/components/schemas\" values updated. If there is no update in \"#/components/schemas\" values, the original open_api will be returned.","title":"construct_open_api_with_schema_class()"},{"location":"reference/pydantic_openapi_schema/utils/utils/#pydantic_openapi_schema.utils.utils.create_ref_prefix","text":"create_ref_prefix ( model ) Create a ref prefix for the given model. Parameters: Name Type Description Default model Union [ Type [ BaseModel ], Type [ GenericModel ]] Pydantic model instance. required Returns: Type Description str A prefixed name.","title":"create_ref_prefix()"},{"location":"reference/pydantic_openapi_schema/utils/utils/#pydantic_openapi_schema.utils.utils.extract_pydantic_types_to_openapi_components","text":"extract_pydantic_types_to_openapi_components ( obj , ref_class ) Recursively traverses the OpenAPI document, replacing any found Pydantic Models with $references to the schema's components section and returning the pydantic models themselves. Parameters: Name Type Description Default obj Any required ref_class Type [ v3_1_0 . Reference ] required Returns: Type Description Set [ Union [ Type [ BaseModel ], Type [ GenericModel ]]] set of pydantic schema classes","title":"extract_pydantic_types_to_openapi_components()"},{"location":"reference/pydantic_openapi_schema/v3_1_0/","text":"OpenAPI v3.1.0 schema types, created according to the specification: https://github.com/OAI/OpenAPI- Specification/blob/master/versions/3.1.0.md. The type orders are according to the contents of the specification: https://github.com/OAI/OpenAPI- Specification/blob/master/versions/3.1.0.md#table-of-contents Callback module-attribute \u00b6 Callback = Dict [ str , Union [ 'PathItem' , 'Reference' ]] A map of possible out-of band callbacks related to the parent operation. Each value in the map is a Path Item Object that describes a set of requests that may be initiated by the API provider and the expected responses. The key value used to identify the path item object is an expression, evaluated at runtime, that identifies a URL to use for the callback operation. Patterned Fields {expression}: 'PathItem' = ... A Path Item Object used to define a callback request and expected responses. A complete example is available. Paths module-attribute \u00b6 Paths = Dict [ str , PathItem ] Holds the relative paths to the individual endpoints and their operations. The path is appended to the URL from the. Server Object in order to construct the full URL. The Paths MAY be empty, due to Access Control List (ACL) constraints . Patterned Fields /{path}: PathItem A relative path to an individual endpoint. The field name MUST begin with a forward slash ( / ). The path is appended (no relative URL resolution) to the expanded URL from the Server Object 's url field in order to construct the full URL. Path templating is allowed. When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts. Templated paths with the same hierarchy but different templated names MUST NOT exist as they are identical. In case of ambiguous matching, it's up to the tooling to decide which one to use. Responses module-attribute \u00b6 Responses = Dict [ str , Union [ Response , Reference ]] A container for the expected responses of an operation. The container maps a HTTP response code to the expected response. The documentation is not necessarily expected to cover all possible HTTP response codes because they may not be known in advance. However, documentation is expected to cover a successful operation response and any known errors. The default MAY be used as a default response object for all HTTP codes that are not covered individually by the specification. The Responses Object MUST contain at least one response code, and it SHOULD be the response for a successful operation call. Fixed Fields default: Optional[Union[Response, Reference]] The documentation of responses other than the ones declared for specific HTTP response codes. Use this field to cover undeclared responses. A Reference Object can link to a response that the OpenAPI Object's components/responses section defines. Patterned Fields {httpStatusCode}: Optional[Union[Response, Reference]] Any HTTP status code can be used as the property name, but only one property per code, to describe the expected response for that HTTP status code. A Reference Object can link to a response that is defined in the OpenAPI Object's components/responses section. This field MUST be enclosed in quotation marks (for example, \"200\") for compatibility between JSON and YAML. To define a range of response codes, this field MAY contain the uppercase wildcard character X . For example, 2XX represents all response codes between [200-299] . Only the following range definitions are allowed: 1XX , 2XX , 3XX , 4XX , and 5XX . If a response is defined using an explicit code, the explicit code definition takes precedence over the range definition for that code. SecurityRequirement module-attribute \u00b6 SecurityRequirement = Dict [ str , List [ str ]] Lists the required security schemes to execute this operation. The name used for each property MUST correspond to a security scheme declared in the. Security Schemes under the Components Object . Security Requirement Objects that contain multiple schemes require that all schemes MUST be satisfied for a request to be authorized. This enables support for scenarios where multiple query parameters or HTTP headers are required to convey security information. When a list of Security Requirement Objects is defined on the OpenAPI Object or Operation Object , only one of the Security Requirement Objects in the list needs to be satisfied to authorize the request. Patterned Fields {name}: List[str] Each name MUST correspond to a security scheme which is declared in the Security Schemes under the Components Object . If the security scheme is of type \"oauth2\" or \"openIdConnect\" , then the value is a list of scope names required for the execution, and the list MAY be empty if authorization does not require a specified scope. For other security scheme types, the array MAY contain a list of role names which are required for the execution, but are not otherwise defined or exchanged in-band. Components \u00b6 Bases: BaseModel Holds a set of reusable objects for different aspects of the OAS. All objects defined within the components object will have no effect on the API unless they are explicitly referenced from properties outside the components object. callbacks class-attribute \u00b6 callbacks : Optional [ Dict [ str , Union [ Callback , Reference ]]] = None An object to hold reusable Callback Objects . examples class-attribute \u00b6 examples : Optional [ Dict [ str , Union [ Example , Reference ]]] = None An object to hold reusable Example Objects . headers class-attribute \u00b6 headers : Optional [ Dict [ str , Union [ Header , Reference ]]] = None An object to hold reusable Header Objects . links class-attribute \u00b6 links : Optional [ Dict [ str , Union [ Link , Reference ]]] = None An object to hold reusable Link Objects . parameters class-attribute \u00b6 parameters : Optional [ Dict [ str , Union [ Parameter , Reference ]]] = None An object to hold reusable Parameter Objects . pathItems class-attribute \u00b6 pathItems : Optional [ Dict [ str , Union [ PathItem , Reference ]]] = None An object to hold reusable Path Item Object . requestBodies class-attribute \u00b6 requestBodies : Optional [ Dict [ str , Union [ RequestBody , Reference ]]] = None An object to hold reusable Request Body Objects . responses class-attribute \u00b6 responses : Optional [ Dict [ str , Union [ Response , Reference ]]] = None An object to hold reusable Response Objects . schemas class-attribute \u00b6 schemas : Optional [ Dict [ str , Schema ]] = None An object to hold reusable Schema Objects . securitySchemes class-attribute \u00b6 securitySchemes : Optional [ Dict [ str , Union [ SecurityScheme , Reference ]]] = None An object to hold reusable Security Scheme Objects . Contact \u00b6 Bases: BaseModel Contact information for the exposed API. email class-attribute \u00b6 email : Optional [ Union [ EmailStr , str ]] = None The email address of the contact person/organization. MUST be in the form of an email address. name class-attribute \u00b6 name : Optional [ str ] = None The identifying name of the contact person/organization. url class-attribute \u00b6 url : Optional [ AnyUrl ] = None The URL pointing to the contact information. MUST be in the form of a URL. validate_email \u00b6 validate_email ( v ) Validate email address. Parameters: Name Type Description Default v Union [ EmailStr , str ] Holds the email string to be validated required Raises: Type Description ValueError Value is not a valid email address Returns: Type Description EmailStr Validated email string. Discriminator \u00b6 Bases: BaseModel When request bodies or response payloads may be one of a number of different schemas, a discriminator object can be used to aid in serialization, deserialization, and validation. The discriminator is a specific object in a schema which is used to inform the consumer of the specification of an alternative schema based on the value associated with it. When using the discriminator, inline schemas will not be considered. mapping class-attribute \u00b6 mapping : Optional [ Dict [ str , str ]] = None An object to hold mappings between payload values and schema names or references. propertyName class-attribute \u00b6 propertyName : str REQUIRED . The name of the property in the payload that will hold the discriminator value. Encoding \u00b6 Bases: BaseModel A single encoding definition applied to a single schema property. allowReserved class-attribute \u00b6 allowReserved : bool = False Determines whether the parameter value SHOULD allow reserved characters, as defined by. RFC3986 :/?#[]@!$&'()*+,;= to be included without percent- encoding. The default value is false . This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data . If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored. contentType class-attribute \u00b6 contentType : Optional [ str ] = None The Content-Type for encoding a specific property. Default value depends on the property type: for object - application/json ; for array \u2013 the default is defined based on the inner type; for all other cases the default is application/octet-stream . The value can be a specific media type (e.g. application/json ), a wildcard media type (e.g. image/* ), or a comma-separated list of the two types. explode class-attribute \u00b6 explode : bool = False When this is true, property values of type array or object generate separate parameters for each value of the array, or key-value-pair of the map. For other types of properties this property has no effect. When style is form , the default value is true . For all other styles, the default value is false . This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data . If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored. headers class-attribute \u00b6 headers : Optional [ Dict [ str , Union [ Header , Reference ]]] = None A map allowing additional information to be provided as headers, for example Content-Disposition . Content-Type is described separately and SHALL be ignored in this section. This property SHALL be ignored if the request body media type is not a multipart . style class-attribute \u00b6 style : Optional [ str ] = None Describes how a specific property value will be serialized depending on its type. See Parameter Object for details on the style property. The behavior follows the same values as query parameters, including default values. This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data . If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored. Example \u00b6 Bases: BaseModel description class-attribute \u00b6 description : Optional [ str ] = None Long description for the example. CommonMark syntax MAY be used for rich text representation. externalValue class-attribute \u00b6 externalValue : Optional [ str ] = None A URL that points to the literal example. This provides the capability to reference examples that cannot easily be included in JSON or YAML documents. The value field and externalValue field are mutually exclusive. See the rules for resolving Relative References . summary class-attribute \u00b6 summary : Optional [ str ] = None Short description for the example. value class-attribute \u00b6 value : Optional [ Any ] = None Embedded literal example. The value field and externalValue field are mutually exclusive. To represent examples of media types that cannot naturally represented in JSON or YAML, use a string value to contain the example, escaping where necessary. ExternalDocumentation \u00b6 Bases: BaseModel Allows referencing an external resource for extended documentation. description class-attribute \u00b6 description : Optional [ str ] = None A short description of the target documentation. CommonMark syntax MAY be used for rich text representation. url class-attribute \u00b6 url : AnyUrl REQUIRED . The URL for the target documentation. Value MUST be in the form of a URL. Header \u00b6 Bases: Parameter The Header Object follows the structure of the Parameter Object with the following changes: name MUST NOT be specified, it is given in the corresponding headers map. in MUST NOT be specified, it is implicitly in header . All traits that are affected by the location MUST be applicable to a location of header (for example, style ). Info \u00b6 Bases: BaseModel The object provides metadata about the API. The metadata MAY be used by the clients if needed, and MAY be presented in editing or documentation generation tools for convenience. contact class-attribute \u00b6 contact : Optional [ Contact ] = None The contact information for the exposed API. description class-attribute \u00b6 description : Optional [ str ] = None A description of the API. CommonMark syntax MAY be used for rich text representation. license class-attribute \u00b6 license : Optional [ License ] = None The license information for the exposed API. summary class-attribute \u00b6 summary : Optional [ str ] = None A short summary of the API. termsOfService class-attribute \u00b6 termsOfService : Optional [ AnyUrl ] = None A URL to the Terms of Service for the API. MUST be in the form of a URL. title class-attribute \u00b6 title : str REQUIRED . The title of the API. version class-attribute \u00b6 version : str REQUIRED . The version of the OpenAPI document (which is distinct from the OpenAPI Specification version ) or the API implementation version). License \u00b6 Bases: BaseModel License information for the exposed API. identifier class-attribute \u00b6 identifier : Optional [ str ] = None An SPDX license expression for the API. The identifier field is mutually exclusive of the url field. name class-attribute \u00b6 name : str REQUIRED . The license name used for the API. url class-attribute \u00b6 url : Optional [ AnyUrl ] = None A URL to the license used for the API. This MUST be in the form of a URL. The url field is mutually exclusive of the identifier field. Link \u00b6 Bases: BaseModel The Link object represents a possible design-time link for a response. The presence of a link does not guarantee the caller's ability to successfully invoke it, rather it provides a known relationship and traversal mechanism between responses and other operations. Unlike dynamic links (i.e. links provided in the response payload), the OAS linking mechanism does not require link information in the runtime response. For computing links, and providing instructions to execute them, a runtime expression is used for accessing values in an operation and using them as parameters while invoking the linked operation. description class-attribute \u00b6 description : Optional [ str ] = None A description of the link. CommonMark syntax MAY be used for rich text representation. operationId class-attribute \u00b6 operationId : Optional [ str ] = None The name of an existing , resolvable OAS operation, as defined with a unique operationId . This field is mutually exclusive of the operationRef field. operationRef class-attribute \u00b6 operationRef : Optional [ str ] = None A relative or absolute URI reference to an OAS operation. This field is mutually exclusive of the operationId field, and MUST point to an Operation Object . Relative operationRef values MAY be used to locate an existing Operation Object in the OpenAPI definition. See the rules for resolving Relative References . parameters class-attribute \u00b6 parameters : Optional [ Dict [ str , Any ]] = None A map representing parameters to pass to an operation as specified with operationId or identified via operationRef . The key is the parameter name to be used, whereas the value can be a constant or an expression to be evaluated and passed to the linked operation. The parameter name can be qualified using the parameter location [{in}.]{name} for operations that use the same parameter name in different locations (e.g. path.id). requestBody class-attribute \u00b6 requestBody : Optional [ Any ] = None A literal value or {expression} to use as a request body when calling the target operation. server class-attribute \u00b6 server : Optional [ Server ] = None A server object to be used by the target operation. MediaType \u00b6 Bases: BaseModel Each Media Type Object provides schema and examples for the media type identified by its key. encoding class-attribute \u00b6 encoding : Optional [ Dict [ str , Encoding ]] = None A map between a property name and its encoding information. The key, being the property name, MUST exist in the schema as a property. The encoding object SHALL only apply to requestBody objects when the media type is multipart or application/x-www- form-urlencoded . example class-attribute \u00b6 example : Optional [ Any ] = None Example of the media type. The example object SHOULD be in the correct format as specified by the media type. The example field is mutually exclusive of the examples field. Furthermore, if referencing a schema which contains an example, the example value SHALL override the example provided by the schema. examples class-attribute \u00b6 examples : Optional [ Dict [ str , Union [ Example , Reference ]]] = None Examples of the media type. Each example object SHOULD match the media type and specified schema if present. The examples field is mutually exclusive of the example field. Furthermore, if referencing a schema which contains an example, the examples value SHALL override the example provided by the schema. media_type_schema class-attribute \u00b6 media_type_schema : Optional [ Union [ Reference , Schema ]] = Field ( default = None , alias = 'schema' ) The schema defining the content of the request, response, or parameter. OAuthFlow \u00b6 Bases: BaseModel Configuration details for a supported OAuth Flow. authorizationUrl class-attribute \u00b6 authorizationUrl : Optional [ Union [ AnyUrl , str ]] = None REQUIRED for oauth2 (\"implicit\", \"authorizationCode\") . The authorization URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS. refreshUrl class-attribute \u00b6 refreshUrl : Optional [ Union [ AnyUrl , str ]] = None The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS. scopes class-attribute \u00b6 scopes : Optional [ Dict [ str , str ]] = None REQUIRED for oauth2 . The available scopes for the OAuth2 security scheme. A map between the scope name and a short description for it. The map MAY be empty. tokenUrl class-attribute \u00b6 tokenUrl : Optional [ Union [ AnyUrl , str ]] = None REQUIRED for oauth2 (\"password\", \"clientCredentials\", \"authorizationCode\") . The token URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS. OAuthFlows \u00b6 Bases: BaseModel Allows configuration of the supported OAuth Flows. authorizationCode class-attribute \u00b6 authorizationCode : Optional [ OAuthFlow ] = None Configuration for the OAuth Authorization Code flow. Previously called accessCode in OpenAPI 2.0. clientCredentials class-attribute \u00b6 clientCredentials : Optional [ OAuthFlow ] = None Configuration for the OAuth Client Credentials flow. Previously called application in OpenAPI 2.0. implicit class-attribute \u00b6 implicit : Optional [ OAuthFlow ] = None Configuration for the OAuth Implicit flow. password class-attribute \u00b6 password : Optional [ OAuthFlow ] = None Configuration for the OAuth Resource Owner Password flow. OpenAPI \u00b6 Bases: BaseModel Root OpenAPI document. components class-attribute \u00b6 components : Optional [ Components ] = None An element to hold various schemas for the document. externalDocs class-attribute \u00b6 externalDocs : Optional [ ExternalDocumentation ] = None Additional external documentation. info class-attribute \u00b6 info : Info REQUIRED . Provides metadata about the API. The metadata MAY be used by tooling as required. jsonSchemaDialect class-attribute \u00b6 jsonSchemaDialect : Optional [ str ] = None The default value for the $schema keyword within Schema Objects contained within this OAS document. This MUST be in the form of a URI. openapi class-attribute \u00b6 openapi : str = '3.1.0' REQUIRED . This string MUST be the version number of the OpenAPI Specification that the OpenAPI document uses. The openapi field SHOULD be used by tooling to interpret the OpenAPI document. This is not related to the API info.version string. paths class-attribute \u00b6 paths : Optional [ Paths ] = None The available paths and operations for the API. security class-attribute \u00b6 security : Optional [ List [ SecurityRequirement ]] = None A declaration of which security mechanisms can be used across the API. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. Individual operations can override this definition. To make security optional, an empty security requirement ( {} ) can be included in the array. servers class-attribute \u00b6 servers : List [ Server ] = [ Server ( url = '/' )] An array of Server Objects, which provide connectivity information to a target server. If the servers property is not provided, or is an empty array, the default value would be a Server Object with a url value of / . tags class-attribute \u00b6 tags : Optional [ List [ Tag ]] = None A list of tags used by the document with additional metadata. The order of the tags can be used to reflect on their order by the parsing tools. Not all tags that are used by the Operation Object must be declared. The tags that are not declared MAY be organized randomly or based on the tools' logic. Each tag name in the list MUST be unique. webhooks class-attribute \u00b6 webhooks : Optional [ Dict [ str , Union [ PathItem , Reference ]]] = None The incoming webhooks that MAY be received as part of this API and that the API consumer MAY choose to implement. Closely related to the callbacks feature, this section describes requests initiated other than by an API call, for example by an out of band registration. The key name is a unique string to refer to each webhook, while the (optionally referenced) Path Item Object describes a request that may be initiated by the API provider and the expected responses. An example is available. Operation \u00b6 Bases: BaseModel Describes a single API operation on a path. callbacks class-attribute \u00b6 callbacks : Optional [ Dict [ str , Union [ Callback , Reference ]]] = None A map of possible out-of band callbacks related to the parent operation. The key is a unique identifier for the Callback Object. Each value in the map is a Callback Object that describes a request that may be initiated by the API provider and the expected responses. deprecated class-attribute \u00b6 deprecated : bool = False Declares this operation to be deprecated. Consumers SHOULD refrain from usage of the declared operation. Default value is false . description class-attribute \u00b6 description : Optional [ str ] = None A verbose explanation of the operation behavior. CommonMark syntax MAY be used for rich text representation. externalDocs class-attribute \u00b6 externalDocs : Optional [ ExternalDocumentation ] = None Additional external documentation for this operation. operationId class-attribute \u00b6 operationId : Optional [ str ] = None Unique string used to identify the operation. The id MUST be unique among all operations described in the API. The operationId value is case-sensitive . Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is RECOMMENDED to follow common programming naming conventions. parameters class-attribute \u00b6 parameters : Optional [ List [ Union [ Parameter , Reference ]]] = None A list of parameters that are applicable for this operation. If a parameter is already defined at the Path Item , the new definition will override it but can never remove it. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a name and location . The list can use the Reference Object to link to parameters that are defined at the OpenAPI Object's components/parameters . requestBody class-attribute \u00b6 requestBody : Optional [ Union [ RequestBody , Reference ]] = None The request body applicable for this operation. The requestBody is fully supported in HTTP methods where the HTTP 1.1 specification RFC7231 has explicitly defined semantics for request bodies. In other cases where the HTTP spec is vague (such as GET , HEAD and DELETE ), requestBody is permitted but does not have well-defined semantics and SHOULD be avoided if possible. responses class-attribute \u00b6 responses : Optional [ Responses ] = None The list of possible responses as they are returned from executing this operation. security class-attribute \u00b6 security : Optional [ List [ SecurityRequirement ]] = None A declaration of which security mechanisms can be used for this operation. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. To make security optional, an empty security requirement ( {} ) can be included in the array. This definition overrides any declared top-level security . To remove a top-level security declaration, an empty array can be used. servers class-attribute \u00b6 servers : Optional [ List [ Server ]] = None An alternative server array to service this operation. If an alternative server object is specified at the Path Item Object or Root level, it will be overridden by this value. summary class-attribute \u00b6 summary : Optional [ str ] = None A short summary of what the operation does. tags class-attribute \u00b6 tags : Optional [ List [ str ]] = None A list of tags for API documentation control. Tags can be used for logical grouping of operations by resources or any other qualifier. Parameter \u00b6 Bases: BaseModel Describes a single operation parameter. A unique parameter is defined by a combination of a name and location . allowEmptyValue class-attribute \u00b6 allowEmptyValue : bool = False Sets the ability to pass empty-valued parameters. This is valid only for query parameters and allows sending a parameter with an empty value. Default value is false . If. style is used, and if behavior is n/a (cannot be serialized), the value of allowEmptyValue SHALL be ignored. Use of this property is NOT RECOMMENDED, as it is likely to be removed in a later revision. The rules for serialization of the parameter are specified in one of two ways. For simpler scenarios, a schema and style can describe the structure and syntax of the parameter. allowReserved class-attribute \u00b6 allowReserved : bool = False Determines whether the parameter value SHOULD allow reserved characters, as defined by. RFC3986 :/?#[]@!$&'()*+,;= to be included without percent- encoding. This property only applies to parameters with an in value of query . The default value is false . content class-attribute \u00b6 content : Optional [ Dict [ str , MediaType ]] = None A map containing the representations for the parameter. The key is the media type and the value describes it. The map MUST only contain one entry. deprecated class-attribute \u00b6 deprecated : bool = False Specifies that a parameter is deprecated and SHOULD be transitioned out of usage. Default value is false . description class-attribute \u00b6 description : Optional [ str ] = None A brief description of the parameter. This could contain examples of use. CommonMark syntax MAY be used for rich text representation. example class-attribute \u00b6 example : Optional [ Any ] = None Example of the parameter's potential value. The example SHOULD match the specified schema and encoding properties if present. The example field is mutually exclusive of the examples field. Furthermore, if referencing a schema that contains an example, the example value SHALL override the example provided by the schema. To represent examples of media types that cannot naturally be represented in JSON or YAML, a string value can contain the example with escaping where necessary. examples class-attribute \u00b6 examples : Optional [ Dict [ str , Union [ Example , Reference ]]] = None Examples of the parameter's potential value. Each example SHOULD contain a value in the correct format as specified in the parameter encoding. The examples field is mutually exclusive of the example field. Furthermore, if referencing a schema that contains an example, the examples value SHALL override the example provided by the schema. For more complex scenarios, the content property can define the media type and schema of the parameter. A parameter MUST contain either a schema property, or a content property, but not both. When example or examples are provided in conjunction with the schema object, the example MUST follow the prescribed serialization strategy for the parameter. explode class-attribute \u00b6 explode : bool = False When this is true, parameter values of type array or object generate separate parameters for each value of the array or key-value pair of the map. For other types of parameters this property has no effect. When style is form , the default value is true . For all other styles, the default value is false . name class-attribute \u00b6 name : str REQUIRED . The name of the parameter. Parameter names are case sensitive . If in is \"path\" , the name field MUST correspond to a template expression occurring within the path field in the Paths Object . See Path Templating for further information. If in is \"header\" and the name field is \"Accept\" , \"Content-Type\" or \"Authorization\" , the parameter definition SHALL be ignored. For all other cases, the name corresponds to the parameter name used by the in property. param_in class-attribute \u00b6 param_in : str = Field ( alias = 'in' ) REQUIRED . The location of the parameter. Possible values are \"query\" , \"header\" , \"path\" or \"cookie\" . param_schema class-attribute \u00b6 param_schema : Optional [ Union [ Schema , Reference ]] = Field ( default = None , alias = 'schema' ) The schema defining the type used for the parameter. required class-attribute \u00b6 required : bool = False Determines whether this parameter is mandatory. If the parameter location is \"path\" , this property is REQUIRED and its value MUST be true . Otherwise, the property MAY be included and its default value is false . style class-attribute \u00b6 style : Optional [ str ] = None Describes how the parameter value will be serialized depending on the type of the parameter value. Default values (based on value of in ): for query - form ; for path - simple ; for header - simple ; for cookie - form . PathItem \u00b6 Bases: BaseModel Describes the operations available on a single path. A Path Item MAY be empty, due to ACL constraints . The path itself is still exposed to the documentation viewer but they will not know which operations and parameters are available. delete class-attribute \u00b6 delete : Optional [ Operation ] = None A definition of a DELETE operation on this path. description class-attribute \u00b6 description : Optional [ str ] = None An optional, string description, intended to apply to all operations in this path. CommonMark syntax MAY be used for rich text representation. get class-attribute \u00b6 get : Optional [ Operation ] = None A definition of a GET operation on this path. head class-attribute \u00b6 head : Optional [ Operation ] = None A definition of a HEAD operation on this path. options class-attribute \u00b6 options : Optional [ Operation ] = None A definition of a OPTIONS operation on this path. parameters class-attribute \u00b6 parameters : Optional [ List [ Union [ Parameter , Reference ]]] = None A list of parameters that are applicable for all the operations described under this path. These parameters can be overridden at the operation level, but cannot be removed there. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a name and. location . The list can use the Reference Object to link to parameters that are defined at the. OpenAPI Object's components/parameters . patch class-attribute \u00b6 patch : Optional [ Operation ] = None A definition of a PATCH operation on this path. post class-attribute \u00b6 post : Optional [ Operation ] = None A definition of a POST operation on this path. put class-attribute \u00b6 put : Optional [ Operation ] = None A definition of a PUT operation on this path. ref class-attribute \u00b6 ref : Optional [ str ] = Field ( default = None , alias = '$ref' ) Allows for an external definition of this path item. The referenced structure MUST be in the format of a Path Item Object . In case a Path Item Object field appears both in the defined object and the referenced object, the behavior is undefined. See the rules for resolving Relative References . servers class-attribute \u00b6 servers : Optional [ List [ Server ]] = None An alternative server array to service all operations in this path. summary class-attribute \u00b6 summary : Optional [ str ] = None An optional, string summary, intended to apply to all operations in this path. trace class-attribute \u00b6 trace : Optional [ Operation ] = None A definition of a TRACE operation on this path. Reference \u00b6 Bases: BaseModel A simple object to allow referencing other components in the OpenAPI document, internally and externally. The $ref string value contains a URI RFC3986 , which identifies the location of the value being referenced. See the rules for resolving Relative References . description class-attribute \u00b6 description : Optional [ str ] = None A description which by default SHOULD override that of the referenced component. CommonMark syntax MAY be used for rich text representation. If the referenced object-type does not allow a description field, then this field has no effect. ref class-attribute \u00b6 ref : str = Field ( alias = '$ref' ) REQUIRED . The reference identifier. This MUST be in the form of a URI. summary class-attribute \u00b6 summary : Optional [ str ] = None A short summary which by default SHOULD override that of the referenced component. If the referenced object-type does not allow a summary field, then this field has no effect. RequestBody \u00b6 Bases: BaseModel Describes a single request body. content class-attribute \u00b6 content : Dict [ str , MediaType ] REQUIRED . The content of the request body. The key is a media type or media type range and the value describes it. For requests that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/* description class-attribute \u00b6 description : Optional [ str ] = None A brief description of the request body. This could contain examples of use. CommonMark syntax MAY be used for rich text representation. required class-attribute \u00b6 required : bool = False Determines if the request body is required in the request. Defaults to false . Response \u00b6 Bases: BaseModel Describes a single response from an API Operation, including design- time, static links to operations based on the response. content class-attribute \u00b6 content : Optional [ Dict [ str , MediaType ]] = None A map containing descriptions of potential response payloads. The key is a media type or media type range and the value describes it. For responses that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/* description class-attribute \u00b6 description : str REQUIRED . A short description of the response. CommonMark syntax MAY be used for rich text representation. headers class-attribute \u00b6 headers : Optional [ Dict [ str , Union [ Header , Reference ]]] = None Maps a header name to its definition. RFC7230 states header names are case insensitive. If a response header is defined with the name \"Content-Type\" , it SHALL be ignored. links class-attribute \u00b6 links : Optional [ Dict [ str , Union [ Link , Reference ]]] = None A map of operations links that can be followed from the response. The key of the map is a short name for the link, following the naming constraints of the names for `Component Objects <https://spec.openapis.org/oas/v3.1.0#componentsObject). Schema \u00b6 Bases: BaseModel The Schema Object allows the definition of input and output data types. These types can be objects, but also primitives and arrays. This object is a superset of the JSON Schema Specification Draft 2020-12 . For more information about the properties, see JSON Schema Core and JSON Schema Validation . Unless stated otherwise, the property definitions follow those of JSON Schema and do not add any additional semantics. Where JSON Schema indicates that behavior is defined by the application (e.g. for annotations), OAS also defers the definition of semantics to the application consuming the OpenAPI document. The following properties are taken directly from the JSON Schema Core and follow the same specifications: additionalProperties class-attribute \u00b6 additionalProperties : Optional [ Union [ Reference , Schema , bool ]] = None The value of \"additionalProperties\" MUST be a valid JSON Schema. The behavior of this keyword depends on the presence and annotation results of \"properties\" and \"patternProperties\" within the same schema object. Validation with \"additionalProperties\" applies only to the child values of instance names that do not appear in the annotation results of either \"properties\" or \"patternProperties\". For all such properties, validation succeeds if the child instance validates against the \"additionalProperties\" schema. The annotation result of this keyword is the set of instance property names validated by this keyword's subschema. Omitting this keyword has the same assertion behavior as an empty schema. Implementations MAY choose to implement or optimize this keyword in another way that produces the same effect, such as by directly checking the names in \"properties\" and the patterns in \"patternProperties\" against the instance property set. Implementations that do not support annotation collection MUST do so. allOf class-attribute \u00b6 allOf : Optional [ List [ Union [ Reference , Schema ]]] = None This keyword's value MUST be a non-empty array. Each item of the array MUST be a valid JSON Schema. An instance validates successfully against this keyword if it validates successfully against all schemas defined by this keyword's value. anyOf class-attribute \u00b6 anyOf : Optional [ List [ Union [ Reference , Schema ]]] = None This keyword's value MUST be a non-empty array. Each item of the array MUST be a valid JSON Schema. An instance validates successfully against this keyword if it validates successfully against at least one schema defined by this keyword's value. Note that when annotations are being collected, all subschemas MUST be examined so that annotations are collected from each subschema that validates successfully. const class-attribute \u00b6 const : Optional [ Any ] = None The value of this keyword MAY be of any type, including null. Use of this keyword is functionally equivalent to an \"enum\" (Section 6.1.2) with a single value. An instance validates successfully against this keyword if its value is equal to the value of the keyword. contains class-attribute \u00b6 contains : Optional [ Union [ Reference , Schema ]] = None The value of this keyword MUST be a valid JSON Schema. An array instance is valid against \"contains\" if at least one of its elements is valid against the given schema. The subschema MUST be applied to every array element even after the first match has been found, in order to collect annotations for use by other keywords. This is to ensure that all possible annotations are collected. Logically, the validation result of applying the value subschema to each item in the array MUST be ORed with \"false\", resulting in an overall validation result. This keyword produces an annotation value which is an array of the indexes to which this keyword validates successfully when applying its subschema, in ascending order. The value MAY be a boolean \"true\" if the subschema validates successfully when applied to every index of the instance. The annotation MUST be present if the instance array to which this keyword's schema applies is empty. contentEncoding class-attribute \u00b6 contentEncoding : Optional [ str ] = None If the instance value is a string, this property defines that the string SHOULD be interpreted as binary data and decoded using the encoding named by this property. Possible values indicating base 16, 32, and 64 encodings with several variations are listed in RFC 4648 [RFC4648]. Additionally, sections 6.7 and 6.8 of RFC 2045 [RFC2045] provide encodings used in MIME. As \"base64\" is defined in both RFCs, the definition from RFC 4648 SHOULD be assumed unless the string is specifically intended for use in a MIME context. Note that all of these encodings result in strings consisting only of 7-bit ASCII characters. Therefore, this keyword has no meaning for strings containing characters outside of that range. If this keyword is absent, but \"contentMediaType\" is present, this indicates that the encoding is the identity encoding, meaning that no transformation was needed in order to represent the content in a UTF-8 string. contentMediaType class-attribute \u00b6 contentMediaType : Optional [ str ] = None If the instance is a string, this property indicates the media type of the contents of the string. If \"contentEncoding\" is present, this property describes the decoded string. The value of this property MUST be a string, which MUST be a media type, as defined by RFC 2046 [RFC2046]. contentSchema class-attribute \u00b6 contentSchema : Optional [ Union [ Reference , Schema ]] = None If the instance is a string, and if \"contentMediaType\" is present, this property contains a schema which describes the structure of the string. This keyword MAY be used with any media type that can be mapped into JSON Schema's data model. The value of this property MUST be a valid JSON schema. It SHOULD be ignored if \"contentMediaType\" is not present. default class-attribute \u00b6 default : Optional [ Any ] = None There are no restrictions placed on the value of this keyword. When multiple occurrences of this keyword are applicable to a single sub- instance, implementations SHOULD remove duplicates. This keyword can be used to supply a default JSON value associated with a particular schema. It is RECOMMENDED that a default value be valid against the associated schema. dependentRequired class-attribute \u00b6 dependentRequired : Optional [ Dict [ str , List [ str ]]] = None The value of this keyword MUST be an object. Properties in this object, if any, MUST be arrays. Elements in each array, if any, MUST be strings, and MUST be unique. This keyword specifies properties that are required if a specific other property is present. Their requirement is dependent on the presence of the other property. Validation succeeds if, for each name that appears in both the instance and as a name within this keyword's value, every item in the corresponding array is also the name of a property in the instance. Omitting this keyword has the same behavior as an empty object. dependentSchemas class-attribute \u00b6 dependentSchemas : Optional [ Dict [ str , Union [ Reference , Schema ]]] = None This keyword specifies subschemas that are evaluated if the instance is an object and contains a certain property. This keyword's value MUST be an object. Each value in the object MUST be a valid JSON Schema. If the object key is a property in the instance, the entire instance must validate against the subschema. Its use is dependent on the presence of the property. Omitting this keyword has the same behavior as an empty object. deprecated class-attribute \u00b6 deprecated : Optional [ bool ] = None The value of this keyword MUST be a boolean. When multiple occurrences of this keyword are applicable to a single sub-instance, applications SHOULD consider the instance location to be deprecated if any occurrence specifies a true value. If \"deprecated\" has a value of boolean true, it indicates that applications SHOULD refrain from usage of the declared property. It MAY mean the property is going to be removed in the future. A root schema containing \"deprecated\" with a value of true indicates that the entire resource being described MAY be removed in the future. The \"deprecated\" keyword applies to each instance location to which the schema object containing the keyword successfully applies. This can result in scenarios where every array item or object property is deprecated even though the containing array or object is not. Omitting this keyword has the same behavior as a value of false. description class-attribute \u00b6 description : Optional [ str ] = None From OpenAPI: CommonMark syntax MAY be used for rich text representation. From JSON Schema: The value \"description\" MUST be a string. The description can be used to decorate a user interface with information about the data produced by this user interface. A description will provide explanation about the purpose of the instance described by this schema. discriminator class-attribute \u00b6 discriminator : Optional [ Discriminator ] = None Adds support for polymorphism. The discriminator is an object name that is used to differentiate between other schemas which may satisfy the payload description. See Composition and Inheritance for more details. enum class-attribute \u00b6 enum : Optional [ List [ Any ]] = Field ( default = None , min_items = 1 ) The value of this keyword MUST be an array. This array SHOULD have at least one element. Elements in the array SHOULD be unique. An instance validates successfully against this keyword if its value is equal to one of the elements in this keyword's array value. Elements in the array might be of any type, including null. example class-attribute \u00b6 example : Optional [ Any ] = None A free-form property to include an example of an instance for this schema. To represent examples that cannot be naturally represented in JSON or YAML, a string value can be used to contain the example with escaping where necessary. Deprecated: The example property has been deprecated in favor of the JSON Schema examples keyword. Use of example is discouraged, and later versions of this specification may remove it. examples class-attribute \u00b6 examples : Optional [ List [ Any ]] = None The value of this keyword MUST be an array. There are no restrictions placed on the values within the array. When multiple occurrences of this keyword are applicable to a single sub-instance, implementations MUST provide a flat array of all values rather than an array of arrays. This keyword can be used to provide sample JSON values associated with a particular schema, for the purpose of illustrating usage. It is RECOMMENDED that these values be valid against the associated schema. Implementations MAY use the value(s) of \"default\", if present, as an additional example. If \"examples\" is absent, \"default\" MAY still be used in this manner. The OpenAPI Specification's base vocabulary is comprised of the following keywords: exclusiveMaximum class-attribute \u00b6 exclusiveMaximum : Optional [ float ] = None The value of \"exclusiveMaximum\" MUST be a number, representing an exclusive upper limit for a numeric instance. If the instance is a number, then the instance is valid only if it has a value strictly less than (not equal to) \"exclusiveMaximum\". exclusiveMinimum class-attribute \u00b6 exclusiveMinimum : Optional [ float ] = None The value of \"exclusiveMinimum\" MUST be a number, representing an exclusive lower limit for a numeric instance. If the instance is a number, then the instance is valid only if it has a value strictly greater than (not equal to) \"exclusiveMinimum\". externalDocs class-attribute \u00b6 externalDocs : Optional [ ExternalDocumentation ] = None Additional external documentation for this schema. items class-attribute \u00b6 items : Optional [ Union [ Reference , Schema ]] = None The value of \"items\" MUST be a valid JSON Schema. This keyword applies its subschema to all instance elements at indexes greater than the length of the \"prefixItems\" array in the same schema object, as reported by the annotation result of that \"prefixItems\" keyword. If no such annotation result exists, \"items\" applies its subschema to all instance array elements. [[CREF11: Note that the behavior of \"items\" without \"prefixItems\" is identical to that of the schema form of \"items\" in prior drafts. When \"prefixItems\" is present, the behavior of \"items\" is identical to the former \"additionalItems\" keyword. ]] If the \"items\" subschema is applied to any positions within the instance array, it produces an annotation result of boolean true, indicating that all remaining array elements have been evaluated against this keyword's subschema. Omitting this keyword has the same assertion behavior as an empty schema. Implementations MAY choose to implement or optimize this keyword in another way that produces the same effect, such as by directly checking for the presence and size of a \"prefixItems\" array. Implementations that do not support annotation collection MUST do so. maxContains class-attribute \u00b6 maxContains : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. If \"contains\" is not present within the same schema object, then this keyword has no effect. An instance array is valid against \"maxContains\" in two ways, depending on the form of the annotation result of an adjacent \"contains\" [json-schema] keyword. The first way is if the annotation result is an array and the length of that array is less than or equal to the \"maxContains\" value. The second way is if the annotation result is a boolean \"true\" and the instance array length is less than or equal to the \"maxContains\" value. maxItems class-attribute \u00b6 maxItems : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. An array instance is valid against \"maxItems\" if its size is less than, or equal to, the value of this keyword. maxLength class-attribute \u00b6 maxLength : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. A string instance is valid against this keyword if its length is less than, or equal to, the value of this keyword. The length of a string instance is defined as the number of its characters as defined by RFC 8259 [RFC8259]. maxProperties class-attribute \u00b6 maxProperties : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. An object instance is valid against \"maxProperties\" if its number of properties is less than, or equal to, the value of this keyword. maximum class-attribute \u00b6 maximum : Optional [ float ] = None The value of \"maximum\" MUST be a number, representing an inclusive upper limit for a numeric instance. If the instance is a number, then this keyword validates only if the instance is less than or exactly equal to \"maximum\". minContains class-attribute \u00b6 minContains : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. If \"contains\" is not present within the same schema object, then this keyword has no effect. An instance array is valid against \"minContains\" in two ways, depending on the form of the annotation result of an adjacent \"contains\" [json-schema] keyword. The first way is if the annotation result is an array and the length of that array is greater than or equal to the \"minContains\" value. The second way is if the annotation result is a boolean \"true\" and the instance array length is greater than or equal to the \"minContains\" value. A value of 0 is allowed, but is only useful for setting a range of occurrences from 0 to the value of \"maxContains\". A value of 0 with no \"maxContains\" causes \"contains\" to always pass validation. Omitting this keyword has the same behavior as a value of 1. minItems class-attribute \u00b6 minItems : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. An array instance is valid against \"minItems\" if its size is greater than, or equal to, the value of this keyword. Omitting this keyword has the same behavior as a value of 0. minLength class-attribute \u00b6 minLength : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. A string instance is valid against this keyword if its length is greater than, or equal to, the value of this keyword. The length of a string instance is defined as the number of its characters as defined by RFC 8259 [RFC8259]. Omitting this keyword has the same behavior as a value of 0. minProperties class-attribute \u00b6 minProperties : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. An object instance is valid against \"minProperties\" if its number of properties is greater than, or equal to, the value of this keyword. Omitting this keyword has the same behavior as a value of 0. minimum class-attribute \u00b6 minimum : Optional [ float ] = None The value of \"minimum\" MUST be a number, representing an inclusive lower limit for a numeric instance. If the instance is a number, then this keyword validates only if the instance is greater than or exactly equal to \"minimum\". multipleOf class-attribute \u00b6 multipleOf : Optional [ float ] = Field ( default = None , gt = 0.0 ) The value of \"multipleOf\" MUST be a number, strictly greater than 0. A numeric instance is only valid if division by this keyword's value results in an integer. oneOf class-attribute \u00b6 oneOf : Optional [ List [ Union [ Reference , Schema ]]] = None This keyword's value MUST be a non-empty array. Each item of the array MUST be a valid JSON Schema. An instance validates successfully against this keyword if it validates successfully against exactly one schema defined by this keyword's value. pattern class-attribute \u00b6 pattern : Optional [ str ] = None The value of this keyword MUST be a string. This string SHOULD be a valid regular expression, according to the ECMA-262 regular expression dialect. A string instance is considered valid if the regular expression matches the instance successfully. Recall: regular expressions are not implicitly anchored. patternProperties class-attribute \u00b6 patternProperties : Optional [ Dict [ str , Union [ Reference , Schema ]]] = None The value of \"patternProperties\" MUST be an object. Each property name of this object SHOULD be a valid regular expression, according to the ECMA-262 regular expression dialect. Each property value of this object MUST be a valid JSON Schema. Validation succeeds if, for each instance name that matches any regular expressions that appear as a property name in this keyword's value, the child instance for that name successfully validates against each schema that corresponds to a matching regular expression. The annotation result of this keyword is the set of instance property names matched by this keyword. Omitting this keyword has the same assertion behavior as an empty object. prefixItems class-attribute \u00b6 prefixItems : Optional [ List [ Union [ Reference , Schema ]]] = None The value of \"prefixItems\" MUST be a non-empty array of valid JSON Schemas. Validation succeeds if each element of the instance validates against the schema at the same position, if any. This keyword does not constrain the length of the array. If the array is longer than this keyword's value, this keyword validates only the prefix of matching length. This keyword produces an annotation value which is the largest index to which this keyword applied a subschema. The value MAY be a boolean true if a subschema was applied to every index of the instance, such as is produced by the \"items\" keyword. This annotation affects the behavior of \"items\" and \"unevaluatedItems\". Omitting this keyword has the same assertion behavior as an empty array. properties class-attribute \u00b6 properties : Optional [ Dict [ str , Union [ Reference , Schema ]]] = None The value of \"properties\" MUST be an object. Each value of this object MUST be a valid JSON Schema. Validation succeeds if, for each name that appears in both the instance and as a name within this keyword's value, the child instance for that name successfully validates against the corresponding schema. The annotation result of this keyword is the set of instance property names matched by this keyword. Omitting this keyword has the same assertion behavior as an empty object. propertyNames class-attribute \u00b6 propertyNames : Optional [ Union [ Reference , Schema ]] = None The value of \"propertyNames\" MUST be a valid JSON Schema. If the instance is an object, this keyword validates if every property name in the instance validates against the provided schema. Note the property name that the schema is testing will always be a string. Omitting this keyword has the same behavior as an empty schema. readOnly class-attribute \u00b6 readOnly : Optional [ bool ] = None The value of \"readOnly\" MUST be a boolean. When multiple occurrences of this keyword are applicable to a single sub-instance, the resulting behavior SHOULD be as for a true value if any occurrence specifies a true value, and SHOULD be as for a false value otherwise. If \"readOnly\" has a value of boolean true, it indicates that the value of the instance is managed exclusively by the owning authority, and attempts by an application to modify the value of this property are expected to be ignored or rejected by that owning authority. An instance document that is marked as \"readOnly\" for the entire document MAY be ignored if sent to the owning authority, or MAY result in an error, at the authority's discretion. For example, \"readOnly\" would be used to mark a database-generated serial number as read-only, while \"writeOnly\" would be used to mark a password input field. This keyword can be used to assist in user interface instance generation. In particular, an application MAY choose to use a widget that hides input values as they are typed for write-only fields. Omitting these keywords has the same behavior as values of false. required class-attribute \u00b6 required : Optional [ List [ str ]] = None The value of this keyword MUST be an array. Elements of this array, if any, MUST be strings, and MUST be unique. An object instance is valid against this keyword if every item in the array is the name of a property in the instance. Omitting this keyword has the same behavior as an empty array. schema_else class-attribute \u00b6 schema_else : Optional [ Union [ Reference , Schema ]] = Field ( default = None , alias = 'else' ) This keyword's value MUST be a valid JSON Schema. When \"if\" is present, and the instance fails to validate against its subschema, then validation succeeds against this keyword if the instance successfully validates against this keyword's subschema. This keyword has no effect when \"if\" is absent, or when the instance successfully validates against its subschema. Implementations MUST NOT evaluate the instance against this keyword, for either validation or annotation collection purposes, in such cases. schema_format class-attribute \u00b6 schema_format : Optional [ str ] = Field ( default = None , alias = 'format' ) From OpenAPI: See [Data Type Formats<https://spec.openapis.org/oas/v3.1.0#dataTypeFormat) for further details. While relying on JSON Schema's defined formats, the OAS offers a few additional predefined formats. From JSON Schema: Structural validation alone may be insufficient to allow an application to correctly utilize certain values. The \"format\" annotation keyword is defined to allow schema authors to convey semantic information for a fixed subset of values which are accurately described by authoritative resources, be they RFCs or other external specifications. The value of this keyword is called a format attribute. It MUST be a string. A format attribute can generally only validate a given set of instance types. If the type of the instance to validate is not in this set, validation for this format attribute and instance SHOULD succeed. All format attributes defined in this section apply to strings, but a format attribute can be specified to apply to any instance types defined in the data model defined in the core JSON Schema. [json-schema] [[CREF1: Note that the \"type\" keyword in this specification defines an \"integer\" type which is not part of the data model. Therefore a format attribute can be limited to numbers, but not specifically to integers. However, a numeric format can be used alongside the \"type\" keyword with a value of \"integer\", or could be explicitly defined to always pass if the number is not an integer, which produces essentially the same behavior as only applying to integers. ]] schema_if class-attribute \u00b6 schema_if : Optional [ Union [ Reference , Schema ]] = Field ( default = None , alias = 'if' ) This keyword's value MUST be a valid JSON Schema. This validation outcome of this keyword's subschema has no direct effect on the overall validation result. Rather, it controls which of the \"then\" or \"else\" keywords are evaluated. Instances that successfully validate against this keyword's subschema MUST also be valid against the subschema value of the \"then\" keyword, if present. Instances that fail to validate against this keyword's subschema MUST also be valid against the subschema value of the \"else\" keyword, if present. If annotations (Section 7.7) are being collected, they are collected from this keyword's subschema in the usual way, including when the keyword is present without either \"then\" or \"else\". schema_not class-attribute \u00b6 schema_not : Optional [ Union [ Reference , Schema ]] = Field ( default = None , alias = 'not' ) This keyword's value MUST be a valid JSON Schema. An instance is valid against this keyword if it fails to validate successfully against the schema defined by this keyword. then class-attribute \u00b6 then : Optional [ Union [ Reference , Schema ]] = None This keyword's value MUST be a valid JSON Schema. When \"if\" is present, and the instance successfully validates against its subschema, then validation succeeds against this keyword if the instance also successfully validates against this keyword's subschema. This keyword has no effect when \"if\" is absent, or when the instance fails to validate against its subschema. Implementations MUST NOT evaluate the instance against this keyword, for either validation or annotation collection purposes, in such cases. title class-attribute \u00b6 title : Optional [ str ] = None The value of \"title\" MUST be a string. The title can be used to decorate a user interface with information about the data produced by this user interface. A title will preferably be short. type class-attribute \u00b6 type : Optional [ Union [ str , List [ str ]]] = None The value of this keyword MUST be either a string or an array. If it is an array, elements of the array MUST be strings and MUST be unique. String values MUST be one of the six primitive types (\"null\", \"boolean\", \"object\", \"array\", \"number\", or \"string\"), or \"integer\" which matches any number with a zero fractional part. An instance validates if and only if the instance is in any of the sets listed for this keyword. unevaluatedItems class-attribute \u00b6 unevaluatedItems : Optional [ Union [ Reference , Schema ]] = None The value of \"unevaluatedItems\" MUST be a valid JSON Schema. The behavior of this keyword depends on the annotation results of adjacent keywords that apply to the instance location being validated. Specifically, the annotations from \"prefixItems\", \"items\", and \"contains\", which can come from those keywords when they are adjacent to the \"unevaluatedItems\" keyword. Those three annotations, as well as \"unevaluatedItems\", can also result from any and all adjacent in-place applicator (Section 10.2) keywords. This includes but is not limited to the in-place applicators defined in this document. If no relevant annotations are present, the \"unevaluatedItems\" subschema MUST be applied to all locations in the array. If a boolean true value is present from any of the relevant annotations, \"unevaluatedItems\" MUST be ignored. Otherwise, the subschema MUST be applied to any index greater than the largest annotation value for \"prefixItems\", which does not appear in any annotation value for \"contains\". This means that \"prefixItems\", \"items\", \"contains\", and all in-place applicators MUST be evaluated before this keyword can be evaluated. Authors of extension keywords MUST NOT define an in-place applicator that would need to be evaluated after this keyword. If the \"unevaluatedItems\" subschema is applied to any positions within the instance array, it produces an annotation result of boolean true, analogous to the behavior of \"items\". Omitting this keyword has the same assertion behavior as an empty schema. unevaluatedProperties class-attribute \u00b6 unevaluatedProperties : Optional [ Union [ Reference , Schema ]] = None The value of \"unevaluatedProperties\" MUST be a valid JSON Schema. The behavior of this keyword depends on the annotation results of adjacent keywords that apply to the instance location being validated. Specifically, the annotations from \"properties\", \"patternProperties\", and \"additionalProperties\", which can come from those keywords when they are adjacent to the \"unevaluatedProperties\" keyword. Those three annotations, as well as \"unevaluatedProperties\", can also result from any and all adjacent in-place applicator (Section 10.2) keywords. This includes but is not limited to the in-place applicators defined in this document. Validation with \"unevaluatedProperties\" applies only to the child values of instance names that do not appear in the \"properties\", \"patternProperties\", \"additionalProperties\", or \"unevaluatedProperties\" annotation results that apply to the instance location being validated. For all such properties, validation succeeds if the child instance validates against the \"unevaluatedProperties\" schema. This means that \"properties\", \"patternProperties\", \"additionalProperties\", and all in-place applicators MUST be evaluated before this keyword can be evaluated. Authors of extension keywords MUST NOT define an in-place applicator that would need to be evaluated after this keyword. The annotation result of this keyword is the set of instance property names validated by this keyword's subschema. Omitting this keyword has the same assertion behavior as an empty schema. The following properties are taken directly from the JSON Schema Validation and follow the same specifications: uniqueItems class-attribute \u00b6 uniqueItems : Optional [ bool ] = None The value of this keyword MUST be a boolean. If this keyword has boolean value false, the instance validates successfully. If it has boolean value true, the instance validates successfully if all of its elements are unique. Omitting this keyword has the same behavior as a value of false. writeOnly class-attribute \u00b6 writeOnly : Optional [ bool ] = None The value of \"writeOnly\" MUST be a boolean. When multiple occurrences of this keyword are applicable to a single sub-instance, the resulting behavior SHOULD be as for a true value if any occurrence specifies a true value, and SHOULD be as for a false value otherwise. If \"writeOnly\" has a value of boolean true, it indicates that the value is never present when the instance is retrieved from the owning authority. It can be present when sent to the owning authority to update or create the document (or the resource it represents), but it will not be included in any updated or newly created version of the instance. An instance document that is marked as \"writeOnly\" for the entire document MAY be returned as a blank document of some sort, or MAY produce an error upon retrieval, or have the retrieval request ignored, at the authority's discretion. For example, \"readOnly\" would be used to mark a database-generated serial number as read-only, while \"writeOnly\" would be used to mark a password input field. This keyword can be used to assist in user interface instance generation. In particular, an application MAY choose to use a widget that hides input values as they are typed for write-only fields. Omitting these keywords has the same behavior as values of false. xml class-attribute \u00b6 xml : Optional [ XML ] = None This MAY be used only on properties schemas. It has no effect on root schemas. Adds additional metadata to describe the XML representation of this property. SecurityScheme \u00b6 Bases: BaseModel Defines a security scheme that can be used by the operations. Supported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query parameter), mutual TLS (use of a client certificate), OAuth2's common flows (implicit, password, client credentials and authorization code) as defined in RFC6749 , and OpenID Connect Discovery . Please note that as of 2020, the implicit flow is about to be deprecated by OAuth 2.0 Security Best Current Practice . Recommended for most use case is Authorization Code Grant flow with PKCE. bearerFormat class-attribute \u00b6 bearerFormat : Optional [ str ] = None A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes. description class-attribute \u00b6 description : Optional [ str ] = None A description for security scheme. CommonMark syntax MAY be used for rich text representation. flows class-attribute \u00b6 flows : Optional [ OAuthFlows ] = None REQUIRED for oauth2 . An object containing configuration information for the flow types supported. name class-attribute \u00b6 name : Optional [ str ] = None REQUIRED for apiKey . The name of the header, query or cookie parameter to be used. openIdConnectUrl class-attribute \u00b6 openIdConnectUrl : Optional [ Union [ AnyUrl , str ]] = None REQUIRED for openIdConnect . OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL. The OpenID Connect standard requires the use of TLS. scheme class-attribute \u00b6 scheme : Optional [ str ] = None REQUIRED for http . The name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC7235 . The values used SHOULD be registered in the IANA Authentication Scheme registry . security_scheme_in class-attribute \u00b6 security_scheme_in : Optional [ Literal [ \"query\" , \"header\" , \"cookie\" ]] = Field ( alias = \"in\" , default = None ) REQUIRED for apiKey . The location of the API key. type class-attribute \u00b6 type : Literal [ 'apiKey' , 'http' , 'mutualTLS' , 'oauth2' , 'openIdConnect' ] REQUIRED . The type of the security scheme. Server \u00b6 Bases: BaseModel An object representing a Server. description class-attribute \u00b6 description : Optional [ str ] = None An optional string describing the host designated by the URL. CommonMark syntax MAY be used for rich text representation. url class-attribute \u00b6 url : str REQUIRED . A URL to the target host. This URL supports Server Variables and MAY be relative, to indicate that the host location is relative to the location where the OpenAPI document is being served. Variable substitutions will be made when a variable is named in { brackets } . variables class-attribute \u00b6 variables : Optional [ Dict [ str , ServerVariable ]] = None A map between a variable name and its value. The value is used for substitution in the server's URL template. ServerVariable \u00b6 Bases: BaseModel An object representing a Server Variable for server URL template substitution. default class-attribute \u00b6 default : str REQUIRED . The default value to use for substitution, which SHALL be sent if an alternate value is not supplied. Note this behavior is different than the Schema Object's treatment of default values, because in those cases parameter values are optional. If the enum is defined, the value MUST exist in the enum's values. description class-attribute \u00b6 description : Optional [ str ] = None An optional description for the server variable. CommonMark syntax MAY be used for rich text representation. enum class-attribute \u00b6 enum : Optional [ List [ str ]] = None An enumeration of string values to be used if the substitution options are from a limited set. The array SHOULD NOT be empty. Tag \u00b6 Bases: BaseModel Adds metadata to a single tag that is used by the Operation Object . It is not mandatory to have a Tag Object per tag defined in the Operation Object instances. description class-attribute \u00b6 description : Optional [ str ] = None A short description for the tag. CommonMark syntax MAY be used for rich text representation. externalDocs class-attribute \u00b6 externalDocs : Optional [ ExternalDocumentation ] = None Additional external documentation for this tag. name class-attribute \u00b6 name : str REQUIRED . The name of the tag. XML \u00b6 Bases: BaseModel A metadata object that allows for more fine-tuned XML model definitions. When using arrays, XML element names are not inferred (for singular/plural forms) and the name property SHOULD be used to add that information. See examples for expected behavior. attribute class-attribute \u00b6 attribute : bool = False Declares whether the property definition translates to an attribute instead of an element. Default value is false . name class-attribute \u00b6 name : Optional [ str ] = None Replaces the name of the element/attribute used for the described schema property. When defined within items , it will affect the name of the individual XML elements within the list. When defined alongside type being array (outside the items ), it will affect the wrapping element and only if wrapped is true . If wrapped is false , it will be ignored. namespace class-attribute \u00b6 namespace : Optional [ str ] = None The URI of the namespace definition. Value MUST be in the form of an absolute URI. prefix class-attribute \u00b6 prefix : Optional [ str ] = None The prefix to be used for the name . wrapped class-attribute \u00b6 wrapped : bool = False MAY be used only for an array definition. Signifies whether the array is wrapped (for example, <books><book/><book/></books> ) or unwrapped ( <book/><book/> ). Default value is false . The definition takes effect only when defined alongside type being array (outside the items ).","title":"v3_1_0"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.Callback","text":"Callback = Dict [ str , Union [ 'PathItem' , 'Reference' ]] A map of possible out-of band callbacks related to the parent operation. Each value in the map is a Path Item Object that describes a set of requests that may be initiated by the API provider and the expected responses. The key value used to identify the path item object is an expression, evaluated at runtime, that identifies a URL to use for the callback operation. Patterned Fields {expression}: 'PathItem' = ... A Path Item Object used to define a callback request and expected responses. A complete example is available.","title":"Callback"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.Paths","text":"Paths = Dict [ str , PathItem ] Holds the relative paths to the individual endpoints and their operations. The path is appended to the URL from the. Server Object in order to construct the full URL. The Paths MAY be empty, due to Access Control List (ACL) constraints . Patterned Fields /{path}: PathItem A relative path to an individual endpoint. The field name MUST begin with a forward slash ( / ). The path is appended (no relative URL resolution) to the expanded URL from the Server Object 's url field in order to construct the full URL. Path templating is allowed. When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts. Templated paths with the same hierarchy but different templated names MUST NOT exist as they are identical. In case of ambiguous matching, it's up to the tooling to decide which one to use.","title":"Paths"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.Responses","text":"Responses = Dict [ str , Union [ Response , Reference ]] A container for the expected responses of an operation. The container maps a HTTP response code to the expected response. The documentation is not necessarily expected to cover all possible HTTP response codes because they may not be known in advance. However, documentation is expected to cover a successful operation response and any known errors. The default MAY be used as a default response object for all HTTP codes that are not covered individually by the specification. The Responses Object MUST contain at least one response code, and it SHOULD be the response for a successful operation call. Fixed Fields default: Optional[Union[Response, Reference]] The documentation of responses other than the ones declared for specific HTTP response codes. Use this field to cover undeclared responses. A Reference Object can link to a response that the OpenAPI Object's components/responses section defines. Patterned Fields {httpStatusCode}: Optional[Union[Response, Reference]] Any HTTP status code can be used as the property name, but only one property per code, to describe the expected response for that HTTP status code. A Reference Object can link to a response that is defined in the OpenAPI Object's components/responses section. This field MUST be enclosed in quotation marks (for example, \"200\") for compatibility between JSON and YAML. To define a range of response codes, this field MAY contain the uppercase wildcard character X . For example, 2XX represents all response codes between [200-299] . Only the following range definitions are allowed: 1XX , 2XX , 3XX , 4XX , and 5XX . If a response is defined using an explicit code, the explicit code definition takes precedence over the range definition for that code.","title":"Responses"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.SecurityRequirement","text":"SecurityRequirement = Dict [ str , List [ str ]] Lists the required security schemes to execute this operation. The name used for each property MUST correspond to a security scheme declared in the. Security Schemes under the Components Object . Security Requirement Objects that contain multiple schemes require that all schemes MUST be satisfied for a request to be authorized. This enables support for scenarios where multiple query parameters or HTTP headers are required to convey security information. When a list of Security Requirement Objects is defined on the OpenAPI Object or Operation Object , only one of the Security Requirement Objects in the list needs to be satisfied to authorize the request. Patterned Fields {name}: List[str] Each name MUST correspond to a security scheme which is declared in the Security Schemes under the Components Object . If the security scheme is of type \"oauth2\" or \"openIdConnect\" , then the value is a list of scope names required for the execution, and the list MAY be empty if authorization does not require a specified scope. For other security scheme types, the array MAY contain a list of role names which are required for the execution, but are not otherwise defined or exchanged in-band.","title":"SecurityRequirement"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.Components","text":"Bases: BaseModel Holds a set of reusable objects for different aspects of the OAS. All objects defined within the components object will have no effect on the API unless they are explicitly referenced from properties outside the components object.","title":"Components"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.components.Components.callbacks","text":"callbacks : Optional [ Dict [ str , Union [ Callback , Reference ]]] = None An object to hold reusable Callback Objects .","title":"callbacks"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.components.Components.examples","text":"examples : Optional [ Dict [ str , Union [ Example , Reference ]]] = None An object to hold reusable Example Objects .","title":"examples"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.components.Components.headers","text":"headers : Optional [ Dict [ str , Union [ Header , Reference ]]] = None An object to hold reusable Header Objects .","title":"headers"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.components.Components.links","text":"links : Optional [ Dict [ str , Union [ Link , Reference ]]] = None An object to hold reusable Link Objects .","title":"links"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.components.Components.parameters","text":"parameters : Optional [ Dict [ str , Union [ Parameter , Reference ]]] = None An object to hold reusable Parameter Objects .","title":"parameters"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.components.Components.pathItems","text":"pathItems : Optional [ Dict [ str , Union [ PathItem , Reference ]]] = None An object to hold reusable Path Item Object .","title":"pathItems"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.components.Components.requestBodies","text":"requestBodies : Optional [ Dict [ str , Union [ RequestBody , Reference ]]] = None An object to hold reusable Request Body Objects .","title":"requestBodies"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.components.Components.responses","text":"responses : Optional [ Dict [ str , Union [ Response , Reference ]]] = None An object to hold reusable Response Objects .","title":"responses"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.components.Components.schemas","text":"schemas : Optional [ Dict [ str , Schema ]] = None An object to hold reusable Schema Objects .","title":"schemas"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.components.Components.securitySchemes","text":"securitySchemes : Optional [ Dict [ str , Union [ SecurityScheme , Reference ]]] = None An object to hold reusable Security Scheme Objects .","title":"securitySchemes"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.Contact","text":"Bases: BaseModel Contact information for the exposed API.","title":"Contact"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.contact.Contact.email","text":"email : Optional [ Union [ EmailStr , str ]] = None The email address of the contact person/organization. MUST be in the form of an email address.","title":"email"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.contact.Contact.name","text":"name : Optional [ str ] = None The identifying name of the contact person/organization.","title":"name"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.contact.Contact.url","text":"url : Optional [ AnyUrl ] = None The URL pointing to the contact information. MUST be in the form of a URL.","title":"url"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.contact.Contact.validate_email","text":"validate_email ( v ) Validate email address. Parameters: Name Type Description Default v Union [ EmailStr , str ] Holds the email string to be validated required Raises: Type Description ValueError Value is not a valid email address Returns: Type Description EmailStr Validated email string.","title":"validate_email()"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.Discriminator","text":"Bases: BaseModel When request bodies or response payloads may be one of a number of different schemas, a discriminator object can be used to aid in serialization, deserialization, and validation. The discriminator is a specific object in a schema which is used to inform the consumer of the specification of an alternative schema based on the value associated with it. When using the discriminator, inline schemas will not be considered.","title":"Discriminator"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.discriminator.Discriminator.mapping","text":"mapping : Optional [ Dict [ str , str ]] = None An object to hold mappings between payload values and schema names or references.","title":"mapping"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.discriminator.Discriminator.propertyName","text":"propertyName : str REQUIRED . The name of the property in the payload that will hold the discriminator value.","title":"propertyName"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.Encoding","text":"Bases: BaseModel A single encoding definition applied to a single schema property.","title":"Encoding"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.encoding.Encoding.allowReserved","text":"allowReserved : bool = False Determines whether the parameter value SHOULD allow reserved characters, as defined by. RFC3986 :/?#[]@!$&'()*+,;= to be included without percent- encoding. The default value is false . This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data . If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored.","title":"allowReserved"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.encoding.Encoding.contentType","text":"contentType : Optional [ str ] = None The Content-Type for encoding a specific property. Default value depends on the property type: for object - application/json ; for array \u2013 the default is defined based on the inner type; for all other cases the default is application/octet-stream . The value can be a specific media type (e.g. application/json ), a wildcard media type (e.g. image/* ), or a comma-separated list of the two types.","title":"contentType"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.encoding.Encoding.explode","text":"explode : bool = False When this is true, property values of type array or object generate separate parameters for each value of the array, or key-value-pair of the map. For other types of properties this property has no effect. When style is form , the default value is true . For all other styles, the default value is false . This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data . If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored.","title":"explode"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.encoding.Encoding.headers","text":"headers : Optional [ Dict [ str , Union [ Header , Reference ]]] = None A map allowing additional information to be provided as headers, for example Content-Disposition . Content-Type is described separately and SHALL be ignored in this section. This property SHALL be ignored if the request body media type is not a multipart .","title":"headers"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.encoding.Encoding.style","text":"style : Optional [ str ] = None Describes how a specific property value will be serialized depending on its type. See Parameter Object for details on the style property. The behavior follows the same values as query parameters, including default values. This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data . If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored.","title":"style"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.Example","text":"Bases: BaseModel","title":"Example"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.example.Example.description","text":"description : Optional [ str ] = None Long description for the example. CommonMark syntax MAY be used for rich text representation.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.example.Example.externalValue","text":"externalValue : Optional [ str ] = None A URL that points to the literal example. This provides the capability to reference examples that cannot easily be included in JSON or YAML documents. The value field and externalValue field are mutually exclusive. See the rules for resolving Relative References .","title":"externalValue"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.example.Example.summary","text":"summary : Optional [ str ] = None Short description for the example.","title":"summary"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.example.Example.value","text":"value : Optional [ Any ] = None Embedded literal example. The value field and externalValue field are mutually exclusive. To represent examples of media types that cannot naturally represented in JSON or YAML, use a string value to contain the example, escaping where necessary.","title":"value"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.ExternalDocumentation","text":"Bases: BaseModel Allows referencing an external resource for extended documentation.","title":"ExternalDocumentation"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.external_documentation.ExternalDocumentation.description","text":"description : Optional [ str ] = None A short description of the target documentation. CommonMark syntax MAY be used for rich text representation.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.external_documentation.ExternalDocumentation.url","text":"url : AnyUrl REQUIRED . The URL for the target documentation. Value MUST be in the form of a URL.","title":"url"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.Header","text":"Bases: Parameter The Header Object follows the structure of the Parameter Object with the following changes: name MUST NOT be specified, it is given in the corresponding headers map. in MUST NOT be specified, it is implicitly in header . All traits that are affected by the location MUST be applicable to a location of header (for example, style ).","title":"Header"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.Info","text":"Bases: BaseModel The object provides metadata about the API. The metadata MAY be used by the clients if needed, and MAY be presented in editing or documentation generation tools for convenience.","title":"Info"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.info.Info.contact","text":"contact : Optional [ Contact ] = None The contact information for the exposed API.","title":"contact"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.info.Info.description","text":"description : Optional [ str ] = None A description of the API. CommonMark syntax MAY be used for rich text representation.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.info.Info.license","text":"license : Optional [ License ] = None The license information for the exposed API.","title":"license"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.info.Info.summary","text":"summary : Optional [ str ] = None A short summary of the API.","title":"summary"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.info.Info.termsOfService","text":"termsOfService : Optional [ AnyUrl ] = None A URL to the Terms of Service for the API. MUST be in the form of a URL.","title":"termsOfService"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.info.Info.title","text":"title : str REQUIRED . The title of the API.","title":"title"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.info.Info.version","text":"version : str REQUIRED . The version of the OpenAPI document (which is distinct from the OpenAPI Specification version ) or the API implementation version).","title":"version"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.License","text":"Bases: BaseModel License information for the exposed API.","title":"License"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.license.License.identifier","text":"identifier : Optional [ str ] = None An SPDX license expression for the API. The identifier field is mutually exclusive of the url field.","title":"identifier"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.license.License.name","text":"name : str REQUIRED . The license name used for the API.","title":"name"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.license.License.url","text":"url : Optional [ AnyUrl ] = None A URL to the license used for the API. This MUST be in the form of a URL. The url field is mutually exclusive of the identifier field.","title":"url"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.Link","text":"Bases: BaseModel The Link object represents a possible design-time link for a response. The presence of a link does not guarantee the caller's ability to successfully invoke it, rather it provides a known relationship and traversal mechanism between responses and other operations. Unlike dynamic links (i.e. links provided in the response payload), the OAS linking mechanism does not require link information in the runtime response. For computing links, and providing instructions to execute them, a runtime expression is used for accessing values in an operation and using them as parameters while invoking the linked operation.","title":"Link"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.link.Link.description","text":"description : Optional [ str ] = None A description of the link. CommonMark syntax MAY be used for rich text representation.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.link.Link.operationId","text":"operationId : Optional [ str ] = None The name of an existing , resolvable OAS operation, as defined with a unique operationId . This field is mutually exclusive of the operationRef field.","title":"operationId"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.link.Link.operationRef","text":"operationRef : Optional [ str ] = None A relative or absolute URI reference to an OAS operation. This field is mutually exclusive of the operationId field, and MUST point to an Operation Object . Relative operationRef values MAY be used to locate an existing Operation Object in the OpenAPI definition. See the rules for resolving Relative References .","title":"operationRef"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.link.Link.parameters","text":"parameters : Optional [ Dict [ str , Any ]] = None A map representing parameters to pass to an operation as specified with operationId or identified via operationRef . The key is the parameter name to be used, whereas the value can be a constant or an expression to be evaluated and passed to the linked operation. The parameter name can be qualified using the parameter location [{in}.]{name} for operations that use the same parameter name in different locations (e.g. path.id).","title":"parameters"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.link.Link.requestBody","text":"requestBody : Optional [ Any ] = None A literal value or {expression} to use as a request body when calling the target operation.","title":"requestBody"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.link.Link.server","text":"server : Optional [ Server ] = None A server object to be used by the target operation.","title":"server"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.MediaType","text":"Bases: BaseModel Each Media Type Object provides schema and examples for the media type identified by its key.","title":"MediaType"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.media_type.MediaType.encoding","text":"encoding : Optional [ Dict [ str , Encoding ]] = None A map between a property name and its encoding information. The key, being the property name, MUST exist in the schema as a property. The encoding object SHALL only apply to requestBody objects when the media type is multipart or application/x-www- form-urlencoded .","title":"encoding"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.media_type.MediaType.example","text":"example : Optional [ Any ] = None Example of the media type. The example object SHOULD be in the correct format as specified by the media type. The example field is mutually exclusive of the examples field. Furthermore, if referencing a schema which contains an example, the example value SHALL override the example provided by the schema.","title":"example"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.media_type.MediaType.examples","text":"examples : Optional [ Dict [ str , Union [ Example , Reference ]]] = None Examples of the media type. Each example object SHOULD match the media type and specified schema if present. The examples field is mutually exclusive of the example field. Furthermore, if referencing a schema which contains an example, the examples value SHALL override the example provided by the schema.","title":"examples"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.media_type.MediaType.media_type_schema","text":"media_type_schema : Optional [ Union [ Reference , Schema ]] = Field ( default = None , alias = 'schema' ) The schema defining the content of the request, response, or parameter.","title":"media_type_schema"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.OAuthFlow","text":"Bases: BaseModel Configuration details for a supported OAuth Flow.","title":"OAuthFlow"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.oauth_flow.OAuthFlow.authorizationUrl","text":"authorizationUrl : Optional [ Union [ AnyUrl , str ]] = None REQUIRED for oauth2 (\"implicit\", \"authorizationCode\") . The authorization URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.","title":"authorizationUrl"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.oauth_flow.OAuthFlow.refreshUrl","text":"refreshUrl : Optional [ Union [ AnyUrl , str ]] = None The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.","title":"refreshUrl"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.oauth_flow.OAuthFlow.scopes","text":"scopes : Optional [ Dict [ str , str ]] = None REQUIRED for oauth2 . The available scopes for the OAuth2 security scheme. A map between the scope name and a short description for it. The map MAY be empty.","title":"scopes"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.oauth_flow.OAuthFlow.tokenUrl","text":"tokenUrl : Optional [ Union [ AnyUrl , str ]] = None REQUIRED for oauth2 (\"password\", \"clientCredentials\", \"authorizationCode\") . The token URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.","title":"tokenUrl"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.OAuthFlows","text":"Bases: BaseModel Allows configuration of the supported OAuth Flows.","title":"OAuthFlows"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.oauth_flows.OAuthFlows.authorizationCode","text":"authorizationCode : Optional [ OAuthFlow ] = None Configuration for the OAuth Authorization Code flow. Previously called accessCode in OpenAPI 2.0.","title":"authorizationCode"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.oauth_flows.OAuthFlows.clientCredentials","text":"clientCredentials : Optional [ OAuthFlow ] = None Configuration for the OAuth Client Credentials flow. Previously called application in OpenAPI 2.0.","title":"clientCredentials"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.oauth_flows.OAuthFlows.implicit","text":"implicit : Optional [ OAuthFlow ] = None Configuration for the OAuth Implicit flow.","title":"implicit"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.oauth_flows.OAuthFlows.password","text":"password : Optional [ OAuthFlow ] = None Configuration for the OAuth Resource Owner Password flow.","title":"password"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.OpenAPI","text":"Bases: BaseModel Root OpenAPI document.","title":"OpenAPI"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.open_api.OpenAPI.components","text":"components : Optional [ Components ] = None An element to hold various schemas for the document.","title":"components"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.open_api.OpenAPI.externalDocs","text":"externalDocs : Optional [ ExternalDocumentation ] = None Additional external documentation.","title":"externalDocs"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.open_api.OpenAPI.info","text":"info : Info REQUIRED . Provides metadata about the API. The metadata MAY be used by tooling as required.","title":"info"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.open_api.OpenAPI.jsonSchemaDialect","text":"jsonSchemaDialect : Optional [ str ] = None The default value for the $schema keyword within Schema Objects contained within this OAS document. This MUST be in the form of a URI.","title":"jsonSchemaDialect"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.open_api.OpenAPI.openapi","text":"openapi : str = '3.1.0' REQUIRED . This string MUST be the version number of the OpenAPI Specification that the OpenAPI document uses. The openapi field SHOULD be used by tooling to interpret the OpenAPI document. This is not related to the API info.version string.","title":"openapi"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.open_api.OpenAPI.paths","text":"paths : Optional [ Paths ] = None The available paths and operations for the API.","title":"paths"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.open_api.OpenAPI.security","text":"security : Optional [ List [ SecurityRequirement ]] = None A declaration of which security mechanisms can be used across the API. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. Individual operations can override this definition. To make security optional, an empty security requirement ( {} ) can be included in the array.","title":"security"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.open_api.OpenAPI.servers","text":"servers : List [ Server ] = [ Server ( url = '/' )] An array of Server Objects, which provide connectivity information to a target server. If the servers property is not provided, or is an empty array, the default value would be a Server Object with a url value of / .","title":"servers"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.open_api.OpenAPI.tags","text":"tags : Optional [ List [ Tag ]] = None A list of tags used by the document with additional metadata. The order of the tags can be used to reflect on their order by the parsing tools. Not all tags that are used by the Operation Object must be declared. The tags that are not declared MAY be organized randomly or based on the tools' logic. Each tag name in the list MUST be unique.","title":"tags"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.open_api.OpenAPI.webhooks","text":"webhooks : Optional [ Dict [ str , Union [ PathItem , Reference ]]] = None The incoming webhooks that MAY be received as part of this API and that the API consumer MAY choose to implement. Closely related to the callbacks feature, this section describes requests initiated other than by an API call, for example by an out of band registration. The key name is a unique string to refer to each webhook, while the (optionally referenced) Path Item Object describes a request that may be initiated by the API provider and the expected responses. An example is available.","title":"webhooks"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.Operation","text":"Bases: BaseModel Describes a single API operation on a path.","title":"Operation"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.operation.Operation.callbacks","text":"callbacks : Optional [ Dict [ str , Union [ Callback , Reference ]]] = None A map of possible out-of band callbacks related to the parent operation. The key is a unique identifier for the Callback Object. Each value in the map is a Callback Object that describes a request that may be initiated by the API provider and the expected responses.","title":"callbacks"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.operation.Operation.deprecated","text":"deprecated : bool = False Declares this operation to be deprecated. Consumers SHOULD refrain from usage of the declared operation. Default value is false .","title":"deprecated"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.operation.Operation.description","text":"description : Optional [ str ] = None A verbose explanation of the operation behavior. CommonMark syntax MAY be used for rich text representation.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.operation.Operation.externalDocs","text":"externalDocs : Optional [ ExternalDocumentation ] = None Additional external documentation for this operation.","title":"externalDocs"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.operation.Operation.operationId","text":"operationId : Optional [ str ] = None Unique string used to identify the operation. The id MUST be unique among all operations described in the API. The operationId value is case-sensitive . Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is RECOMMENDED to follow common programming naming conventions.","title":"operationId"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.operation.Operation.parameters","text":"parameters : Optional [ List [ Union [ Parameter , Reference ]]] = None A list of parameters that are applicable for this operation. If a parameter is already defined at the Path Item , the new definition will override it but can never remove it. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a name and location . The list can use the Reference Object to link to parameters that are defined at the OpenAPI Object's components/parameters .","title":"parameters"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.operation.Operation.requestBody","text":"requestBody : Optional [ Union [ RequestBody , Reference ]] = None The request body applicable for this operation. The requestBody is fully supported in HTTP methods where the HTTP 1.1 specification RFC7231 has explicitly defined semantics for request bodies. In other cases where the HTTP spec is vague (such as GET , HEAD and DELETE ), requestBody is permitted but does not have well-defined semantics and SHOULD be avoided if possible.","title":"requestBody"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.operation.Operation.responses","text":"responses : Optional [ Responses ] = None The list of possible responses as they are returned from executing this operation.","title":"responses"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.operation.Operation.security","text":"security : Optional [ List [ SecurityRequirement ]] = None A declaration of which security mechanisms can be used for this operation. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. To make security optional, an empty security requirement ( {} ) can be included in the array. This definition overrides any declared top-level security . To remove a top-level security declaration, an empty array can be used.","title":"security"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.operation.Operation.servers","text":"servers : Optional [ List [ Server ]] = None An alternative server array to service this operation. If an alternative server object is specified at the Path Item Object or Root level, it will be overridden by this value.","title":"servers"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.operation.Operation.summary","text":"summary : Optional [ str ] = None A short summary of what the operation does.","title":"summary"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.operation.Operation.tags","text":"tags : Optional [ List [ str ]] = None A list of tags for API documentation control. Tags can be used for logical grouping of operations by resources or any other qualifier.","title":"tags"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.Parameter","text":"Bases: BaseModel Describes a single operation parameter. A unique parameter is defined by a combination of a name and location .","title":"Parameter"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.parameter.Parameter.allowEmptyValue","text":"allowEmptyValue : bool = False Sets the ability to pass empty-valued parameters. This is valid only for query parameters and allows sending a parameter with an empty value. Default value is false . If. style is used, and if behavior is n/a (cannot be serialized), the value of allowEmptyValue SHALL be ignored. Use of this property is NOT RECOMMENDED, as it is likely to be removed in a later revision. The rules for serialization of the parameter are specified in one of two ways. For simpler scenarios, a schema and style can describe the structure and syntax of the parameter.","title":"allowEmptyValue"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.parameter.Parameter.allowReserved","text":"allowReserved : bool = False Determines whether the parameter value SHOULD allow reserved characters, as defined by. RFC3986 :/?#[]@!$&'()*+,;= to be included without percent- encoding. This property only applies to parameters with an in value of query . The default value is false .","title":"allowReserved"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.parameter.Parameter.content","text":"content : Optional [ Dict [ str , MediaType ]] = None A map containing the representations for the parameter. The key is the media type and the value describes it. The map MUST only contain one entry.","title":"content"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.parameter.Parameter.deprecated","text":"deprecated : bool = False Specifies that a parameter is deprecated and SHOULD be transitioned out of usage. Default value is false .","title":"deprecated"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.parameter.Parameter.description","text":"description : Optional [ str ] = None A brief description of the parameter. This could contain examples of use. CommonMark syntax MAY be used for rich text representation.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.parameter.Parameter.example","text":"example : Optional [ Any ] = None Example of the parameter's potential value. The example SHOULD match the specified schema and encoding properties if present. The example field is mutually exclusive of the examples field. Furthermore, if referencing a schema that contains an example, the example value SHALL override the example provided by the schema. To represent examples of media types that cannot naturally be represented in JSON or YAML, a string value can contain the example with escaping where necessary.","title":"example"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.parameter.Parameter.examples","text":"examples : Optional [ Dict [ str , Union [ Example , Reference ]]] = None Examples of the parameter's potential value. Each example SHOULD contain a value in the correct format as specified in the parameter encoding. The examples field is mutually exclusive of the example field. Furthermore, if referencing a schema that contains an example, the examples value SHALL override the example provided by the schema. For more complex scenarios, the content property can define the media type and schema of the parameter. A parameter MUST contain either a schema property, or a content property, but not both. When example or examples are provided in conjunction with the schema object, the example MUST follow the prescribed serialization strategy for the parameter.","title":"examples"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.parameter.Parameter.explode","text":"explode : bool = False When this is true, parameter values of type array or object generate separate parameters for each value of the array or key-value pair of the map. For other types of parameters this property has no effect. When style is form , the default value is true . For all other styles, the default value is false .","title":"explode"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.parameter.Parameter.name","text":"name : str REQUIRED . The name of the parameter. Parameter names are case sensitive . If in is \"path\" , the name field MUST correspond to a template expression occurring within the path field in the Paths Object . See Path Templating for further information. If in is \"header\" and the name field is \"Accept\" , \"Content-Type\" or \"Authorization\" , the parameter definition SHALL be ignored. For all other cases, the name corresponds to the parameter name used by the in property.","title":"name"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.parameter.Parameter.param_in","text":"param_in : str = Field ( alias = 'in' ) REQUIRED . The location of the parameter. Possible values are \"query\" , \"header\" , \"path\" or \"cookie\" .","title":"param_in"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.parameter.Parameter.param_schema","text":"param_schema : Optional [ Union [ Schema , Reference ]] = Field ( default = None , alias = 'schema' ) The schema defining the type used for the parameter.","title":"param_schema"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.parameter.Parameter.required","text":"required : bool = False Determines whether this parameter is mandatory. If the parameter location is \"path\" , this property is REQUIRED and its value MUST be true . Otherwise, the property MAY be included and its default value is false .","title":"required"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.parameter.Parameter.style","text":"style : Optional [ str ] = None Describes how the parameter value will be serialized depending on the type of the parameter value. Default values (based on value of in ): for query - form ; for path - simple ; for header - simple ; for cookie - form .","title":"style"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.PathItem","text":"Bases: BaseModel Describes the operations available on a single path. A Path Item MAY be empty, due to ACL constraints . The path itself is still exposed to the documentation viewer but they will not know which operations and parameters are available.","title":"PathItem"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.path_item.PathItem.delete","text":"delete : Optional [ Operation ] = None A definition of a DELETE operation on this path.","title":"delete"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.path_item.PathItem.description","text":"description : Optional [ str ] = None An optional, string description, intended to apply to all operations in this path. CommonMark syntax MAY be used for rich text representation.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.path_item.PathItem.get","text":"get : Optional [ Operation ] = None A definition of a GET operation on this path.","title":"get"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.path_item.PathItem.head","text":"head : Optional [ Operation ] = None A definition of a HEAD operation on this path.","title":"head"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.path_item.PathItem.options","text":"options : Optional [ Operation ] = None A definition of a OPTIONS operation on this path.","title":"options"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.path_item.PathItem.parameters","text":"parameters : Optional [ List [ Union [ Parameter , Reference ]]] = None A list of parameters that are applicable for all the operations described under this path. These parameters can be overridden at the operation level, but cannot be removed there. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a name and. location . The list can use the Reference Object to link to parameters that are defined at the. OpenAPI Object's components/parameters .","title":"parameters"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.path_item.PathItem.patch","text":"patch : Optional [ Operation ] = None A definition of a PATCH operation on this path.","title":"patch"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.path_item.PathItem.post","text":"post : Optional [ Operation ] = None A definition of a POST operation on this path.","title":"post"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.path_item.PathItem.put","text":"put : Optional [ Operation ] = None A definition of a PUT operation on this path.","title":"put"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.path_item.PathItem.ref","text":"ref : Optional [ str ] = Field ( default = None , alias = '$ref' ) Allows for an external definition of this path item. The referenced structure MUST be in the format of a Path Item Object . In case a Path Item Object field appears both in the defined object and the referenced object, the behavior is undefined. See the rules for resolving Relative References .","title":"ref"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.path_item.PathItem.servers","text":"servers : Optional [ List [ Server ]] = None An alternative server array to service all operations in this path.","title":"servers"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.path_item.PathItem.summary","text":"summary : Optional [ str ] = None An optional, string summary, intended to apply to all operations in this path.","title":"summary"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.path_item.PathItem.trace","text":"trace : Optional [ Operation ] = None A definition of a TRACE operation on this path.","title":"trace"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.Reference","text":"Bases: BaseModel A simple object to allow referencing other components in the OpenAPI document, internally and externally. The $ref string value contains a URI RFC3986 , which identifies the location of the value being referenced. See the rules for resolving Relative References .","title":"Reference"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.reference.Reference.description","text":"description : Optional [ str ] = None A description which by default SHOULD override that of the referenced component. CommonMark syntax MAY be used for rich text representation. If the referenced object-type does not allow a description field, then this field has no effect.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.reference.Reference.ref","text":"ref : str = Field ( alias = '$ref' ) REQUIRED . The reference identifier. This MUST be in the form of a URI.","title":"ref"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.reference.Reference.summary","text":"summary : Optional [ str ] = None A short summary which by default SHOULD override that of the referenced component. If the referenced object-type does not allow a summary field, then this field has no effect.","title":"summary"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.RequestBody","text":"Bases: BaseModel Describes a single request body.","title":"RequestBody"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.request_body.RequestBody.content","text":"content : Dict [ str , MediaType ] REQUIRED . The content of the request body. The key is a media type or media type range and the value describes it. For requests that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*","title":"content"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.request_body.RequestBody.description","text":"description : Optional [ str ] = None A brief description of the request body. This could contain examples of use. CommonMark syntax MAY be used for rich text representation.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.request_body.RequestBody.required","text":"required : bool = False Determines if the request body is required in the request. Defaults to false .","title":"required"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.Response","text":"Bases: BaseModel Describes a single response from an API Operation, including design- time, static links to operations based on the response.","title":"Response"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.response.Response.content","text":"content : Optional [ Dict [ str , MediaType ]] = None A map containing descriptions of potential response payloads. The key is a media type or media type range and the value describes it. For responses that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*","title":"content"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.response.Response.description","text":"description : str REQUIRED . A short description of the response. CommonMark syntax MAY be used for rich text representation.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.response.Response.headers","text":"headers : Optional [ Dict [ str , Union [ Header , Reference ]]] = None Maps a header name to its definition. RFC7230 states header names are case insensitive. If a response header is defined with the name \"Content-Type\" , it SHALL be ignored.","title":"headers"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.response.Response.links","text":"links : Optional [ Dict [ str , Union [ Link , Reference ]]] = None A map of operations links that can be followed from the response. The key of the map is a short name for the link, following the naming constraints of the names for `Component Objects <https://spec.openapis.org/oas/v3.1.0#componentsObject).","title":"links"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.Schema","text":"Bases: BaseModel The Schema Object allows the definition of input and output data types. These types can be objects, but also primitives and arrays. This object is a superset of the JSON Schema Specification Draft 2020-12 . For more information about the properties, see JSON Schema Core and JSON Schema Validation . Unless stated otherwise, the property definitions follow those of JSON Schema and do not add any additional semantics. Where JSON Schema indicates that behavior is defined by the application (e.g. for annotations), OAS also defers the definition of semantics to the application consuming the OpenAPI document. The following properties are taken directly from the JSON Schema Core and follow the same specifications:","title":"Schema"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.additionalProperties","text":"additionalProperties : Optional [ Union [ Reference , Schema , bool ]] = None The value of \"additionalProperties\" MUST be a valid JSON Schema. The behavior of this keyword depends on the presence and annotation results of \"properties\" and \"patternProperties\" within the same schema object. Validation with \"additionalProperties\" applies only to the child values of instance names that do not appear in the annotation results of either \"properties\" or \"patternProperties\". For all such properties, validation succeeds if the child instance validates against the \"additionalProperties\" schema. The annotation result of this keyword is the set of instance property names validated by this keyword's subschema. Omitting this keyword has the same assertion behavior as an empty schema. Implementations MAY choose to implement or optimize this keyword in another way that produces the same effect, such as by directly checking the names in \"properties\" and the patterns in \"patternProperties\" against the instance property set. Implementations that do not support annotation collection MUST do so.","title":"additionalProperties"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.allOf","text":"allOf : Optional [ List [ Union [ Reference , Schema ]]] = None This keyword's value MUST be a non-empty array. Each item of the array MUST be a valid JSON Schema. An instance validates successfully against this keyword if it validates successfully against all schemas defined by this keyword's value.","title":"allOf"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.anyOf","text":"anyOf : Optional [ List [ Union [ Reference , Schema ]]] = None This keyword's value MUST be a non-empty array. Each item of the array MUST be a valid JSON Schema. An instance validates successfully against this keyword if it validates successfully against at least one schema defined by this keyword's value. Note that when annotations are being collected, all subschemas MUST be examined so that annotations are collected from each subschema that validates successfully.","title":"anyOf"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.const","text":"const : Optional [ Any ] = None The value of this keyword MAY be of any type, including null. Use of this keyword is functionally equivalent to an \"enum\" (Section 6.1.2) with a single value. An instance validates successfully against this keyword if its value is equal to the value of the keyword.","title":"const"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.contains","text":"contains : Optional [ Union [ Reference , Schema ]] = None The value of this keyword MUST be a valid JSON Schema. An array instance is valid against \"contains\" if at least one of its elements is valid against the given schema. The subschema MUST be applied to every array element even after the first match has been found, in order to collect annotations for use by other keywords. This is to ensure that all possible annotations are collected. Logically, the validation result of applying the value subschema to each item in the array MUST be ORed with \"false\", resulting in an overall validation result. This keyword produces an annotation value which is an array of the indexes to which this keyword validates successfully when applying its subschema, in ascending order. The value MAY be a boolean \"true\" if the subschema validates successfully when applied to every index of the instance. The annotation MUST be present if the instance array to which this keyword's schema applies is empty.","title":"contains"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.contentEncoding","text":"contentEncoding : Optional [ str ] = None If the instance value is a string, this property defines that the string SHOULD be interpreted as binary data and decoded using the encoding named by this property. Possible values indicating base 16, 32, and 64 encodings with several variations are listed in RFC 4648 [RFC4648]. Additionally, sections 6.7 and 6.8 of RFC 2045 [RFC2045] provide encodings used in MIME. As \"base64\" is defined in both RFCs, the definition from RFC 4648 SHOULD be assumed unless the string is specifically intended for use in a MIME context. Note that all of these encodings result in strings consisting only of 7-bit ASCII characters. Therefore, this keyword has no meaning for strings containing characters outside of that range. If this keyword is absent, but \"contentMediaType\" is present, this indicates that the encoding is the identity encoding, meaning that no transformation was needed in order to represent the content in a UTF-8 string.","title":"contentEncoding"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.contentMediaType","text":"contentMediaType : Optional [ str ] = None If the instance is a string, this property indicates the media type of the contents of the string. If \"contentEncoding\" is present, this property describes the decoded string. The value of this property MUST be a string, which MUST be a media type, as defined by RFC 2046 [RFC2046].","title":"contentMediaType"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.contentSchema","text":"contentSchema : Optional [ Union [ Reference , Schema ]] = None If the instance is a string, and if \"contentMediaType\" is present, this property contains a schema which describes the structure of the string. This keyword MAY be used with any media type that can be mapped into JSON Schema's data model. The value of this property MUST be a valid JSON schema. It SHOULD be ignored if \"contentMediaType\" is not present.","title":"contentSchema"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.default","text":"default : Optional [ Any ] = None There are no restrictions placed on the value of this keyword. When multiple occurrences of this keyword are applicable to a single sub- instance, implementations SHOULD remove duplicates. This keyword can be used to supply a default JSON value associated with a particular schema. It is RECOMMENDED that a default value be valid against the associated schema.","title":"default"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.dependentRequired","text":"dependentRequired : Optional [ Dict [ str , List [ str ]]] = None The value of this keyword MUST be an object. Properties in this object, if any, MUST be arrays. Elements in each array, if any, MUST be strings, and MUST be unique. This keyword specifies properties that are required if a specific other property is present. Their requirement is dependent on the presence of the other property. Validation succeeds if, for each name that appears in both the instance and as a name within this keyword's value, every item in the corresponding array is also the name of a property in the instance. Omitting this keyword has the same behavior as an empty object.","title":"dependentRequired"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.dependentSchemas","text":"dependentSchemas : Optional [ Dict [ str , Union [ Reference , Schema ]]] = None This keyword specifies subschemas that are evaluated if the instance is an object and contains a certain property. This keyword's value MUST be an object. Each value in the object MUST be a valid JSON Schema. If the object key is a property in the instance, the entire instance must validate against the subschema. Its use is dependent on the presence of the property. Omitting this keyword has the same behavior as an empty object.","title":"dependentSchemas"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.deprecated","text":"deprecated : Optional [ bool ] = None The value of this keyword MUST be a boolean. When multiple occurrences of this keyword are applicable to a single sub-instance, applications SHOULD consider the instance location to be deprecated if any occurrence specifies a true value. If \"deprecated\" has a value of boolean true, it indicates that applications SHOULD refrain from usage of the declared property. It MAY mean the property is going to be removed in the future. A root schema containing \"deprecated\" with a value of true indicates that the entire resource being described MAY be removed in the future. The \"deprecated\" keyword applies to each instance location to which the schema object containing the keyword successfully applies. This can result in scenarios where every array item or object property is deprecated even though the containing array or object is not. Omitting this keyword has the same behavior as a value of false.","title":"deprecated"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.description","text":"description : Optional [ str ] = None From OpenAPI: CommonMark syntax MAY be used for rich text representation. From JSON Schema: The value \"description\" MUST be a string. The description can be used to decorate a user interface with information about the data produced by this user interface. A description will provide explanation about the purpose of the instance described by this schema.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.discriminator","text":"discriminator : Optional [ Discriminator ] = None Adds support for polymorphism. The discriminator is an object name that is used to differentiate between other schemas which may satisfy the payload description. See Composition and Inheritance for more details.","title":"discriminator"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.enum","text":"enum : Optional [ List [ Any ]] = Field ( default = None , min_items = 1 ) The value of this keyword MUST be an array. This array SHOULD have at least one element. Elements in the array SHOULD be unique. An instance validates successfully against this keyword if its value is equal to one of the elements in this keyword's array value. Elements in the array might be of any type, including null.","title":"enum"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.example","text":"example : Optional [ Any ] = None A free-form property to include an example of an instance for this schema. To represent examples that cannot be naturally represented in JSON or YAML, a string value can be used to contain the example with escaping where necessary. Deprecated: The example property has been deprecated in favor of the JSON Schema examples keyword. Use of example is discouraged, and later versions of this specification may remove it.","title":"example"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.examples","text":"examples : Optional [ List [ Any ]] = None The value of this keyword MUST be an array. There are no restrictions placed on the values within the array. When multiple occurrences of this keyword are applicable to a single sub-instance, implementations MUST provide a flat array of all values rather than an array of arrays. This keyword can be used to provide sample JSON values associated with a particular schema, for the purpose of illustrating usage. It is RECOMMENDED that these values be valid against the associated schema. Implementations MAY use the value(s) of \"default\", if present, as an additional example. If \"examples\" is absent, \"default\" MAY still be used in this manner. The OpenAPI Specification's base vocabulary is comprised of the following keywords:","title":"examples"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.exclusiveMaximum","text":"exclusiveMaximum : Optional [ float ] = None The value of \"exclusiveMaximum\" MUST be a number, representing an exclusive upper limit for a numeric instance. If the instance is a number, then the instance is valid only if it has a value strictly less than (not equal to) \"exclusiveMaximum\".","title":"exclusiveMaximum"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.exclusiveMinimum","text":"exclusiveMinimum : Optional [ float ] = None The value of \"exclusiveMinimum\" MUST be a number, representing an exclusive lower limit for a numeric instance. If the instance is a number, then the instance is valid only if it has a value strictly greater than (not equal to) \"exclusiveMinimum\".","title":"exclusiveMinimum"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.externalDocs","text":"externalDocs : Optional [ ExternalDocumentation ] = None Additional external documentation for this schema.","title":"externalDocs"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.items","text":"items : Optional [ Union [ Reference , Schema ]] = None The value of \"items\" MUST be a valid JSON Schema. This keyword applies its subschema to all instance elements at indexes greater than the length of the \"prefixItems\" array in the same schema object, as reported by the annotation result of that \"prefixItems\" keyword. If no such annotation result exists, \"items\" applies its subschema to all instance array elements. [[CREF11: Note that the behavior of \"items\" without \"prefixItems\" is identical to that of the schema form of \"items\" in prior drafts. When \"prefixItems\" is present, the behavior of \"items\" is identical to the former \"additionalItems\" keyword. ]] If the \"items\" subschema is applied to any positions within the instance array, it produces an annotation result of boolean true, indicating that all remaining array elements have been evaluated against this keyword's subschema. Omitting this keyword has the same assertion behavior as an empty schema. Implementations MAY choose to implement or optimize this keyword in another way that produces the same effect, such as by directly checking for the presence and size of a \"prefixItems\" array. Implementations that do not support annotation collection MUST do so.","title":"items"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.maxContains","text":"maxContains : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. If \"contains\" is not present within the same schema object, then this keyword has no effect. An instance array is valid against \"maxContains\" in two ways, depending on the form of the annotation result of an adjacent \"contains\" [json-schema] keyword. The first way is if the annotation result is an array and the length of that array is less than or equal to the \"maxContains\" value. The second way is if the annotation result is a boolean \"true\" and the instance array length is less than or equal to the \"maxContains\" value.","title":"maxContains"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.maxItems","text":"maxItems : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. An array instance is valid against \"maxItems\" if its size is less than, or equal to, the value of this keyword.","title":"maxItems"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.maxLength","text":"maxLength : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. A string instance is valid against this keyword if its length is less than, or equal to, the value of this keyword. The length of a string instance is defined as the number of its characters as defined by RFC 8259 [RFC8259].","title":"maxLength"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.maxProperties","text":"maxProperties : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. An object instance is valid against \"maxProperties\" if its number of properties is less than, or equal to, the value of this keyword.","title":"maxProperties"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.maximum","text":"maximum : Optional [ float ] = None The value of \"maximum\" MUST be a number, representing an inclusive upper limit for a numeric instance. If the instance is a number, then this keyword validates only if the instance is less than or exactly equal to \"maximum\".","title":"maximum"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.minContains","text":"minContains : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. If \"contains\" is not present within the same schema object, then this keyword has no effect. An instance array is valid against \"minContains\" in two ways, depending on the form of the annotation result of an adjacent \"contains\" [json-schema] keyword. The first way is if the annotation result is an array and the length of that array is greater than or equal to the \"minContains\" value. The second way is if the annotation result is a boolean \"true\" and the instance array length is greater than or equal to the \"minContains\" value. A value of 0 is allowed, but is only useful for setting a range of occurrences from 0 to the value of \"maxContains\". A value of 0 with no \"maxContains\" causes \"contains\" to always pass validation. Omitting this keyword has the same behavior as a value of 1.","title":"minContains"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.minItems","text":"minItems : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. An array instance is valid against \"minItems\" if its size is greater than, or equal to, the value of this keyword. Omitting this keyword has the same behavior as a value of 0.","title":"minItems"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.minLength","text":"minLength : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. A string instance is valid against this keyword if its length is greater than, or equal to, the value of this keyword. The length of a string instance is defined as the number of its characters as defined by RFC 8259 [RFC8259]. Omitting this keyword has the same behavior as a value of 0.","title":"minLength"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.minProperties","text":"minProperties : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. An object instance is valid against \"minProperties\" if its number of properties is greater than, or equal to, the value of this keyword. Omitting this keyword has the same behavior as a value of 0.","title":"minProperties"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.minimum","text":"minimum : Optional [ float ] = None The value of \"minimum\" MUST be a number, representing an inclusive lower limit for a numeric instance. If the instance is a number, then this keyword validates only if the instance is greater than or exactly equal to \"minimum\".","title":"minimum"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.multipleOf","text":"multipleOf : Optional [ float ] = Field ( default = None , gt = 0.0 ) The value of \"multipleOf\" MUST be a number, strictly greater than 0. A numeric instance is only valid if division by this keyword's value results in an integer.","title":"multipleOf"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.oneOf","text":"oneOf : Optional [ List [ Union [ Reference , Schema ]]] = None This keyword's value MUST be a non-empty array. Each item of the array MUST be a valid JSON Schema. An instance validates successfully against this keyword if it validates successfully against exactly one schema defined by this keyword's value.","title":"oneOf"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.pattern","text":"pattern : Optional [ str ] = None The value of this keyword MUST be a string. This string SHOULD be a valid regular expression, according to the ECMA-262 regular expression dialect. A string instance is considered valid if the regular expression matches the instance successfully. Recall: regular expressions are not implicitly anchored.","title":"pattern"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.patternProperties","text":"patternProperties : Optional [ Dict [ str , Union [ Reference , Schema ]]] = None The value of \"patternProperties\" MUST be an object. Each property name of this object SHOULD be a valid regular expression, according to the ECMA-262 regular expression dialect. Each property value of this object MUST be a valid JSON Schema. Validation succeeds if, for each instance name that matches any regular expressions that appear as a property name in this keyword's value, the child instance for that name successfully validates against each schema that corresponds to a matching regular expression. The annotation result of this keyword is the set of instance property names matched by this keyword. Omitting this keyword has the same assertion behavior as an empty object.","title":"patternProperties"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.prefixItems","text":"prefixItems : Optional [ List [ Union [ Reference , Schema ]]] = None The value of \"prefixItems\" MUST be a non-empty array of valid JSON Schemas. Validation succeeds if each element of the instance validates against the schema at the same position, if any. This keyword does not constrain the length of the array. If the array is longer than this keyword's value, this keyword validates only the prefix of matching length. This keyword produces an annotation value which is the largest index to which this keyword applied a subschema. The value MAY be a boolean true if a subschema was applied to every index of the instance, such as is produced by the \"items\" keyword. This annotation affects the behavior of \"items\" and \"unevaluatedItems\". Omitting this keyword has the same assertion behavior as an empty array.","title":"prefixItems"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.properties","text":"properties : Optional [ Dict [ str , Union [ Reference , Schema ]]] = None The value of \"properties\" MUST be an object. Each value of this object MUST be a valid JSON Schema. Validation succeeds if, for each name that appears in both the instance and as a name within this keyword's value, the child instance for that name successfully validates against the corresponding schema. The annotation result of this keyword is the set of instance property names matched by this keyword. Omitting this keyword has the same assertion behavior as an empty object.","title":"properties"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.propertyNames","text":"propertyNames : Optional [ Union [ Reference , Schema ]] = None The value of \"propertyNames\" MUST be a valid JSON Schema. If the instance is an object, this keyword validates if every property name in the instance validates against the provided schema. Note the property name that the schema is testing will always be a string. Omitting this keyword has the same behavior as an empty schema.","title":"propertyNames"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.readOnly","text":"readOnly : Optional [ bool ] = None The value of \"readOnly\" MUST be a boolean. When multiple occurrences of this keyword are applicable to a single sub-instance, the resulting behavior SHOULD be as for a true value if any occurrence specifies a true value, and SHOULD be as for a false value otherwise. If \"readOnly\" has a value of boolean true, it indicates that the value of the instance is managed exclusively by the owning authority, and attempts by an application to modify the value of this property are expected to be ignored or rejected by that owning authority. An instance document that is marked as \"readOnly\" for the entire document MAY be ignored if sent to the owning authority, or MAY result in an error, at the authority's discretion. For example, \"readOnly\" would be used to mark a database-generated serial number as read-only, while \"writeOnly\" would be used to mark a password input field. This keyword can be used to assist in user interface instance generation. In particular, an application MAY choose to use a widget that hides input values as they are typed for write-only fields. Omitting these keywords has the same behavior as values of false.","title":"readOnly"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.required","text":"required : Optional [ List [ str ]] = None The value of this keyword MUST be an array. Elements of this array, if any, MUST be strings, and MUST be unique. An object instance is valid against this keyword if every item in the array is the name of a property in the instance. Omitting this keyword has the same behavior as an empty array.","title":"required"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.schema_else","text":"schema_else : Optional [ Union [ Reference , Schema ]] = Field ( default = None , alias = 'else' ) This keyword's value MUST be a valid JSON Schema. When \"if\" is present, and the instance fails to validate against its subschema, then validation succeeds against this keyword if the instance successfully validates against this keyword's subschema. This keyword has no effect when \"if\" is absent, or when the instance successfully validates against its subschema. Implementations MUST NOT evaluate the instance against this keyword, for either validation or annotation collection purposes, in such cases.","title":"schema_else"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.schema_format","text":"schema_format : Optional [ str ] = Field ( default = None , alias = 'format' ) From OpenAPI: See [Data Type Formats<https://spec.openapis.org/oas/v3.1.0#dataTypeFormat) for further details. While relying on JSON Schema's defined formats, the OAS offers a few additional predefined formats. From JSON Schema: Structural validation alone may be insufficient to allow an application to correctly utilize certain values. The \"format\" annotation keyword is defined to allow schema authors to convey semantic information for a fixed subset of values which are accurately described by authoritative resources, be they RFCs or other external specifications. The value of this keyword is called a format attribute. It MUST be a string. A format attribute can generally only validate a given set of instance types. If the type of the instance to validate is not in this set, validation for this format attribute and instance SHOULD succeed. All format attributes defined in this section apply to strings, but a format attribute can be specified to apply to any instance types defined in the data model defined in the core JSON Schema. [json-schema] [[CREF1: Note that the \"type\" keyword in this specification defines an \"integer\" type which is not part of the data model. Therefore a format attribute can be limited to numbers, but not specifically to integers. However, a numeric format can be used alongside the \"type\" keyword with a value of \"integer\", or could be explicitly defined to always pass if the number is not an integer, which produces essentially the same behavior as only applying to integers. ]]","title":"schema_format"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.schema_if","text":"schema_if : Optional [ Union [ Reference , Schema ]] = Field ( default = None , alias = 'if' ) This keyword's value MUST be a valid JSON Schema. This validation outcome of this keyword's subschema has no direct effect on the overall validation result. Rather, it controls which of the \"then\" or \"else\" keywords are evaluated. Instances that successfully validate against this keyword's subschema MUST also be valid against the subschema value of the \"then\" keyword, if present. Instances that fail to validate against this keyword's subschema MUST also be valid against the subschema value of the \"else\" keyword, if present. If annotations (Section 7.7) are being collected, they are collected from this keyword's subschema in the usual way, including when the keyword is present without either \"then\" or \"else\".","title":"schema_if"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.schema_not","text":"schema_not : Optional [ Union [ Reference , Schema ]] = Field ( default = None , alias = 'not' ) This keyword's value MUST be a valid JSON Schema. An instance is valid against this keyword if it fails to validate successfully against the schema defined by this keyword.","title":"schema_not"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.then","text":"then : Optional [ Union [ Reference , Schema ]] = None This keyword's value MUST be a valid JSON Schema. When \"if\" is present, and the instance successfully validates against its subschema, then validation succeeds against this keyword if the instance also successfully validates against this keyword's subschema. This keyword has no effect when \"if\" is absent, or when the instance fails to validate against its subschema. Implementations MUST NOT evaluate the instance against this keyword, for either validation or annotation collection purposes, in such cases.","title":"then"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.title","text":"title : Optional [ str ] = None The value of \"title\" MUST be a string. The title can be used to decorate a user interface with information about the data produced by this user interface. A title will preferably be short.","title":"title"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.type","text":"type : Optional [ Union [ str , List [ str ]]] = None The value of this keyword MUST be either a string or an array. If it is an array, elements of the array MUST be strings and MUST be unique. String values MUST be one of the six primitive types (\"null\", \"boolean\", \"object\", \"array\", \"number\", or \"string\"), or \"integer\" which matches any number with a zero fractional part. An instance validates if and only if the instance is in any of the sets listed for this keyword.","title":"type"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.unevaluatedItems","text":"unevaluatedItems : Optional [ Union [ Reference , Schema ]] = None The value of \"unevaluatedItems\" MUST be a valid JSON Schema. The behavior of this keyword depends on the annotation results of adjacent keywords that apply to the instance location being validated. Specifically, the annotations from \"prefixItems\", \"items\", and \"contains\", which can come from those keywords when they are adjacent to the \"unevaluatedItems\" keyword. Those three annotations, as well as \"unevaluatedItems\", can also result from any and all adjacent in-place applicator (Section 10.2) keywords. This includes but is not limited to the in-place applicators defined in this document. If no relevant annotations are present, the \"unevaluatedItems\" subschema MUST be applied to all locations in the array. If a boolean true value is present from any of the relevant annotations, \"unevaluatedItems\" MUST be ignored. Otherwise, the subschema MUST be applied to any index greater than the largest annotation value for \"prefixItems\", which does not appear in any annotation value for \"contains\". This means that \"prefixItems\", \"items\", \"contains\", and all in-place applicators MUST be evaluated before this keyword can be evaluated. Authors of extension keywords MUST NOT define an in-place applicator that would need to be evaluated after this keyword. If the \"unevaluatedItems\" subschema is applied to any positions within the instance array, it produces an annotation result of boolean true, analogous to the behavior of \"items\". Omitting this keyword has the same assertion behavior as an empty schema.","title":"unevaluatedItems"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.unevaluatedProperties","text":"unevaluatedProperties : Optional [ Union [ Reference , Schema ]] = None The value of \"unevaluatedProperties\" MUST be a valid JSON Schema. The behavior of this keyword depends on the annotation results of adjacent keywords that apply to the instance location being validated. Specifically, the annotations from \"properties\", \"patternProperties\", and \"additionalProperties\", which can come from those keywords when they are adjacent to the \"unevaluatedProperties\" keyword. Those three annotations, as well as \"unevaluatedProperties\", can also result from any and all adjacent in-place applicator (Section 10.2) keywords. This includes but is not limited to the in-place applicators defined in this document. Validation with \"unevaluatedProperties\" applies only to the child values of instance names that do not appear in the \"properties\", \"patternProperties\", \"additionalProperties\", or \"unevaluatedProperties\" annotation results that apply to the instance location being validated. For all such properties, validation succeeds if the child instance validates against the \"unevaluatedProperties\" schema. This means that \"properties\", \"patternProperties\", \"additionalProperties\", and all in-place applicators MUST be evaluated before this keyword can be evaluated. Authors of extension keywords MUST NOT define an in-place applicator that would need to be evaluated after this keyword. The annotation result of this keyword is the set of instance property names validated by this keyword's subschema. Omitting this keyword has the same assertion behavior as an empty schema. The following properties are taken directly from the JSON Schema Validation and follow the same specifications:","title":"unevaluatedProperties"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.uniqueItems","text":"uniqueItems : Optional [ bool ] = None The value of this keyword MUST be a boolean. If this keyword has boolean value false, the instance validates successfully. If it has boolean value true, the instance validates successfully if all of its elements are unique. Omitting this keyword has the same behavior as a value of false.","title":"uniqueItems"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.writeOnly","text":"writeOnly : Optional [ bool ] = None The value of \"writeOnly\" MUST be a boolean. When multiple occurrences of this keyword are applicable to a single sub-instance, the resulting behavior SHOULD be as for a true value if any occurrence specifies a true value, and SHOULD be as for a false value otherwise. If \"writeOnly\" has a value of boolean true, it indicates that the value is never present when the instance is retrieved from the owning authority. It can be present when sent to the owning authority to update or create the document (or the resource it represents), but it will not be included in any updated or newly created version of the instance. An instance document that is marked as \"writeOnly\" for the entire document MAY be returned as a blank document of some sort, or MAY produce an error upon retrieval, or have the retrieval request ignored, at the authority's discretion. For example, \"readOnly\" would be used to mark a database-generated serial number as read-only, while \"writeOnly\" would be used to mark a password input field. This keyword can be used to assist in user interface instance generation. In particular, an application MAY choose to use a widget that hides input values as they are typed for write-only fields. Omitting these keywords has the same behavior as values of false.","title":"writeOnly"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.schema.Schema.xml","text":"xml : Optional [ XML ] = None This MAY be used only on properties schemas. It has no effect on root schemas. Adds additional metadata to describe the XML representation of this property.","title":"xml"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.SecurityScheme","text":"Bases: BaseModel Defines a security scheme that can be used by the operations. Supported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query parameter), mutual TLS (use of a client certificate), OAuth2's common flows (implicit, password, client credentials and authorization code) as defined in RFC6749 , and OpenID Connect Discovery . Please note that as of 2020, the implicit flow is about to be deprecated by OAuth 2.0 Security Best Current Practice . Recommended for most use case is Authorization Code Grant flow with PKCE.","title":"SecurityScheme"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.security_scheme.SecurityScheme.bearerFormat","text":"bearerFormat : Optional [ str ] = None A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.","title":"bearerFormat"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.security_scheme.SecurityScheme.description","text":"description : Optional [ str ] = None A description for security scheme. CommonMark syntax MAY be used for rich text representation.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.security_scheme.SecurityScheme.flows","text":"flows : Optional [ OAuthFlows ] = None REQUIRED for oauth2 . An object containing configuration information for the flow types supported.","title":"flows"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.security_scheme.SecurityScheme.name","text":"name : Optional [ str ] = None REQUIRED for apiKey . The name of the header, query or cookie parameter to be used.","title":"name"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.security_scheme.SecurityScheme.openIdConnectUrl","text":"openIdConnectUrl : Optional [ Union [ AnyUrl , str ]] = None REQUIRED for openIdConnect . OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL. The OpenID Connect standard requires the use of TLS.","title":"openIdConnectUrl"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.security_scheme.SecurityScheme.scheme","text":"scheme : Optional [ str ] = None REQUIRED for http . The name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC7235 . The values used SHOULD be registered in the IANA Authentication Scheme registry .","title":"scheme"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.security_scheme.SecurityScheme.security_scheme_in","text":"security_scheme_in : Optional [ Literal [ \"query\" , \"header\" , \"cookie\" ]] = Field ( alias = \"in\" , default = None ) REQUIRED for apiKey . The location of the API key.","title":"security_scheme_in"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.security_scheme.SecurityScheme.type","text":"type : Literal [ 'apiKey' , 'http' , 'mutualTLS' , 'oauth2' , 'openIdConnect' ] REQUIRED . The type of the security scheme.","title":"type"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.Server","text":"Bases: BaseModel An object representing a Server.","title":"Server"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.server.Server.description","text":"description : Optional [ str ] = None An optional string describing the host designated by the URL. CommonMark syntax MAY be used for rich text representation.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.server.Server.url","text":"url : str REQUIRED . A URL to the target host. This URL supports Server Variables and MAY be relative, to indicate that the host location is relative to the location where the OpenAPI document is being served. Variable substitutions will be made when a variable is named in { brackets } .","title":"url"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.server.Server.variables","text":"variables : Optional [ Dict [ str , ServerVariable ]] = None A map between a variable name and its value. The value is used for substitution in the server's URL template.","title":"variables"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.ServerVariable","text":"Bases: BaseModel An object representing a Server Variable for server URL template substitution.","title":"ServerVariable"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.server_variable.ServerVariable.default","text":"default : str REQUIRED . The default value to use for substitution, which SHALL be sent if an alternate value is not supplied. Note this behavior is different than the Schema Object's treatment of default values, because in those cases parameter values are optional. If the enum is defined, the value MUST exist in the enum's values.","title":"default"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.server_variable.ServerVariable.description","text":"description : Optional [ str ] = None An optional description for the server variable. CommonMark syntax MAY be used for rich text representation.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.server_variable.ServerVariable.enum","text":"enum : Optional [ List [ str ]] = None An enumeration of string values to be used if the substitution options are from a limited set. The array SHOULD NOT be empty.","title":"enum"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.Tag","text":"Bases: BaseModel Adds metadata to a single tag that is used by the Operation Object . It is not mandatory to have a Tag Object per tag defined in the Operation Object instances.","title":"Tag"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.tag.Tag.description","text":"description : Optional [ str ] = None A short description for the tag. CommonMark syntax MAY be used for rich text representation.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.tag.Tag.externalDocs","text":"externalDocs : Optional [ ExternalDocumentation ] = None Additional external documentation for this tag.","title":"externalDocs"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.tag.Tag.name","text":"name : str REQUIRED . The name of the tag.","title":"name"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.XML","text":"Bases: BaseModel A metadata object that allows for more fine-tuned XML model definitions. When using arrays, XML element names are not inferred (for singular/plural forms) and the name property SHOULD be used to add that information. See examples for expected behavior.","title":"XML"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.xml.XML.attribute","text":"attribute : bool = False Declares whether the property definition translates to an attribute instead of an element. Default value is false .","title":"attribute"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.xml.XML.name","text":"name : Optional [ str ] = None Replaces the name of the element/attribute used for the described schema property. When defined within items , it will affect the name of the individual XML elements within the list. When defined alongside type being array (outside the items ), it will affect the wrapping element and only if wrapped is true . If wrapped is false , it will be ignored.","title":"name"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.xml.XML.namespace","text":"namespace : Optional [ str ] = None The URI of the namespace definition. Value MUST be in the form of an absolute URI.","title":"namespace"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.xml.XML.prefix","text":"prefix : Optional [ str ] = None The prefix to be used for the name .","title":"prefix"},{"location":"reference/pydantic_openapi_schema/v3_1_0/#pydantic_openapi_schema.v3_1_0.xml.XML.wrapped","text":"wrapped : bool = False MAY be used only for an array definition. Signifies whether the array is wrapped (for example, <books><book/><book/></books> ) or unwrapped ( <book/><book/> ). Default value is false . The definition takes effect only when defined alongside type being array (outside the items ).","title":"wrapped"},{"location":"reference/pydantic_openapi_schema/v3_1_0/callback/","text":"Callback module-attribute \u00b6 Callback = Dict [ str , Union [ 'PathItem' , 'Reference' ]] A map of possible out-of band callbacks related to the parent operation. Each value in the map is a Path Item Object that describes a set of requests that may be initiated by the API provider and the expected responses. The key value used to identify the path item object is an expression, evaluated at runtime, that identifies a URL to use for the callback operation. Patterned Fields {expression}: 'PathItem' = ... A Path Item Object used to define a callback request and expected responses. A complete example is available.","title":"callback"},{"location":"reference/pydantic_openapi_schema/v3_1_0/callback/#pydantic_openapi_schema.v3_1_0.callback.Callback","text":"Callback = Dict [ str , Union [ 'PathItem' , 'Reference' ]] A map of possible out-of band callbacks related to the parent operation. Each value in the map is a Path Item Object that describes a set of requests that may be initiated by the API provider and the expected responses. The key value used to identify the path item object is an expression, evaluated at runtime, that identifies a URL to use for the callback operation. Patterned Fields {expression}: 'PathItem' = ... A Path Item Object used to define a callback request and expected responses. A complete example is available.","title":"Callback"},{"location":"reference/pydantic_openapi_schema/v3_1_0/components/","text":"Components \u00b6 Bases: BaseModel Holds a set of reusable objects for different aspects of the OAS. All objects defined within the components object will have no effect on the API unless they are explicitly referenced from properties outside the components object. callbacks class-attribute \u00b6 callbacks : Optional [ Dict [ str , Union [ Callback , Reference ]]] = None An object to hold reusable Callback Objects . examples class-attribute \u00b6 examples : Optional [ Dict [ str , Union [ Example , Reference ]]] = None An object to hold reusable Example Objects . headers class-attribute \u00b6 headers : Optional [ Dict [ str , Union [ Header , Reference ]]] = None An object to hold reusable Header Objects . links class-attribute \u00b6 links : Optional [ Dict [ str , Union [ Link , Reference ]]] = None An object to hold reusable Link Objects . parameters class-attribute \u00b6 parameters : Optional [ Dict [ str , Union [ Parameter , Reference ]]] = None An object to hold reusable Parameter Objects . pathItems class-attribute \u00b6 pathItems : Optional [ Dict [ str , Union [ PathItem , Reference ]]] = None An object to hold reusable Path Item Object . requestBodies class-attribute \u00b6 requestBodies : Optional [ Dict [ str , Union [ RequestBody , Reference ]]] = None An object to hold reusable Request Body Objects . responses class-attribute \u00b6 responses : Optional [ Dict [ str , Union [ Response , Reference ]]] = None An object to hold reusable Response Objects . schemas class-attribute \u00b6 schemas : Optional [ Dict [ str , Schema ]] = None An object to hold reusable Schema Objects . securitySchemes class-attribute \u00b6 securitySchemes : Optional [ Dict [ str , Union [ SecurityScheme , Reference ]]] = None An object to hold reusable Security Scheme Objects .","title":"components"},{"location":"reference/pydantic_openapi_schema/v3_1_0/components/#pydantic_openapi_schema.v3_1_0.components.Components","text":"Bases: BaseModel Holds a set of reusable objects for different aspects of the OAS. All objects defined within the components object will have no effect on the API unless they are explicitly referenced from properties outside the components object.","title":"Components"},{"location":"reference/pydantic_openapi_schema/v3_1_0/components/#pydantic_openapi_schema.v3_1_0.components.Components.callbacks","text":"callbacks : Optional [ Dict [ str , Union [ Callback , Reference ]]] = None An object to hold reusable Callback Objects .","title":"callbacks"},{"location":"reference/pydantic_openapi_schema/v3_1_0/components/#pydantic_openapi_schema.v3_1_0.components.Components.examples","text":"examples : Optional [ Dict [ str , Union [ Example , Reference ]]] = None An object to hold reusable Example Objects .","title":"examples"},{"location":"reference/pydantic_openapi_schema/v3_1_0/components/#pydantic_openapi_schema.v3_1_0.components.Components.headers","text":"headers : Optional [ Dict [ str , Union [ Header , Reference ]]] = None An object to hold reusable Header Objects .","title":"headers"},{"location":"reference/pydantic_openapi_schema/v3_1_0/components/#pydantic_openapi_schema.v3_1_0.components.Components.links","text":"links : Optional [ Dict [ str , Union [ Link , Reference ]]] = None An object to hold reusable Link Objects .","title":"links"},{"location":"reference/pydantic_openapi_schema/v3_1_0/components/#pydantic_openapi_schema.v3_1_0.components.Components.parameters","text":"parameters : Optional [ Dict [ str , Union [ Parameter , Reference ]]] = None An object to hold reusable Parameter Objects .","title":"parameters"},{"location":"reference/pydantic_openapi_schema/v3_1_0/components/#pydantic_openapi_schema.v3_1_0.components.Components.pathItems","text":"pathItems : Optional [ Dict [ str , Union [ PathItem , Reference ]]] = None An object to hold reusable Path Item Object .","title":"pathItems"},{"location":"reference/pydantic_openapi_schema/v3_1_0/components/#pydantic_openapi_schema.v3_1_0.components.Components.requestBodies","text":"requestBodies : Optional [ Dict [ str , Union [ RequestBody , Reference ]]] = None An object to hold reusable Request Body Objects .","title":"requestBodies"},{"location":"reference/pydantic_openapi_schema/v3_1_0/components/#pydantic_openapi_schema.v3_1_0.components.Components.responses","text":"responses : Optional [ Dict [ str , Union [ Response , Reference ]]] = None An object to hold reusable Response Objects .","title":"responses"},{"location":"reference/pydantic_openapi_schema/v3_1_0/components/#pydantic_openapi_schema.v3_1_0.components.Components.schemas","text":"schemas : Optional [ Dict [ str , Schema ]] = None An object to hold reusable Schema Objects .","title":"schemas"},{"location":"reference/pydantic_openapi_schema/v3_1_0/components/#pydantic_openapi_schema.v3_1_0.components.Components.securitySchemes","text":"securitySchemes : Optional [ Dict [ str , Union [ SecurityScheme , Reference ]]] = None An object to hold reusable Security Scheme Objects .","title":"securitySchemes"},{"location":"reference/pydantic_openapi_schema/v3_1_0/contact/","text":"Contact \u00b6 Bases: BaseModel Contact information for the exposed API. email class-attribute \u00b6 email : Optional [ Union [ EmailStr , str ]] = None The email address of the contact person/organization. MUST be in the form of an email address. name class-attribute \u00b6 name : Optional [ str ] = None The identifying name of the contact person/organization. url class-attribute \u00b6 url : Optional [ AnyUrl ] = None The URL pointing to the contact information. MUST be in the form of a URL. validate_email \u00b6 validate_email ( v ) Validate email address. Parameters: Name Type Description Default v Union [ EmailStr , str ] Holds the email string to be validated required Raises: Type Description ValueError Value is not a valid email address Returns: Type Description EmailStr Validated email string.","title":"contact"},{"location":"reference/pydantic_openapi_schema/v3_1_0/contact/#pydantic_openapi_schema.v3_1_0.contact.Contact","text":"Bases: BaseModel Contact information for the exposed API.","title":"Contact"},{"location":"reference/pydantic_openapi_schema/v3_1_0/contact/#pydantic_openapi_schema.v3_1_0.contact.Contact.email","text":"email : Optional [ Union [ EmailStr , str ]] = None The email address of the contact person/organization. MUST be in the form of an email address.","title":"email"},{"location":"reference/pydantic_openapi_schema/v3_1_0/contact/#pydantic_openapi_schema.v3_1_0.contact.Contact.name","text":"name : Optional [ str ] = None The identifying name of the contact person/organization.","title":"name"},{"location":"reference/pydantic_openapi_schema/v3_1_0/contact/#pydantic_openapi_schema.v3_1_0.contact.Contact.url","text":"url : Optional [ AnyUrl ] = None The URL pointing to the contact information. MUST be in the form of a URL.","title":"url"},{"location":"reference/pydantic_openapi_schema/v3_1_0/contact/#pydantic_openapi_schema.v3_1_0.contact.Contact.validate_email","text":"validate_email ( v ) Validate email address. Parameters: Name Type Description Default v Union [ EmailStr , str ] Holds the email string to be validated required Raises: Type Description ValueError Value is not a valid email address Returns: Type Description EmailStr Validated email string.","title":"validate_email()"},{"location":"reference/pydantic_openapi_schema/v3_1_0/discriminator/","text":"Discriminator \u00b6 Bases: BaseModel When request bodies or response payloads may be one of a number of different schemas, a discriminator object can be used to aid in serialization, deserialization, and validation. The discriminator is a specific object in a schema which is used to inform the consumer of the specification of an alternative schema based on the value associated with it. When using the discriminator, inline schemas will not be considered. mapping class-attribute \u00b6 mapping : Optional [ Dict [ str , str ]] = None An object to hold mappings between payload values and schema names or references. propertyName class-attribute \u00b6 propertyName : str REQUIRED . The name of the property in the payload that will hold the discriminator value.","title":"discriminator"},{"location":"reference/pydantic_openapi_schema/v3_1_0/discriminator/#pydantic_openapi_schema.v3_1_0.discriminator.Discriminator","text":"Bases: BaseModel When request bodies or response payloads may be one of a number of different schemas, a discriminator object can be used to aid in serialization, deserialization, and validation. The discriminator is a specific object in a schema which is used to inform the consumer of the specification of an alternative schema based on the value associated with it. When using the discriminator, inline schemas will not be considered.","title":"Discriminator"},{"location":"reference/pydantic_openapi_schema/v3_1_0/discriminator/#pydantic_openapi_schema.v3_1_0.discriminator.Discriminator.mapping","text":"mapping : Optional [ Dict [ str , str ]] = None An object to hold mappings between payload values and schema names or references.","title":"mapping"},{"location":"reference/pydantic_openapi_schema/v3_1_0/discriminator/#pydantic_openapi_schema.v3_1_0.discriminator.Discriminator.propertyName","text":"propertyName : str REQUIRED . The name of the property in the payload that will hold the discriminator value.","title":"propertyName"},{"location":"reference/pydantic_openapi_schema/v3_1_0/encoding/","text":"Encoding \u00b6 Bases: BaseModel A single encoding definition applied to a single schema property. allowReserved class-attribute \u00b6 allowReserved : bool = False Determines whether the parameter value SHOULD allow reserved characters, as defined by. RFC3986 :/?#[]@!$&'()*+,;= to be included without percent- encoding. The default value is false . This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data . If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored. contentType class-attribute \u00b6 contentType : Optional [ str ] = None The Content-Type for encoding a specific property. Default value depends on the property type: for object - application/json ; for array \u2013 the default is defined based on the inner type; for all other cases the default is application/octet-stream . The value can be a specific media type (e.g. application/json ), a wildcard media type (e.g. image/* ), or a comma-separated list of the two types. explode class-attribute \u00b6 explode : bool = False When this is true, property values of type array or object generate separate parameters for each value of the array, or key-value-pair of the map. For other types of properties this property has no effect. When style is form , the default value is true . For all other styles, the default value is false . This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data . If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored. headers class-attribute \u00b6 headers : Optional [ Dict [ str , Union [ Header , Reference ]]] = None A map allowing additional information to be provided as headers, for example Content-Disposition . Content-Type is described separately and SHALL be ignored in this section. This property SHALL be ignored if the request body media type is not a multipart . style class-attribute \u00b6 style : Optional [ str ] = None Describes how a specific property value will be serialized depending on its type. See Parameter Object for details on the style property. The behavior follows the same values as query parameters, including default values. This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data . If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored.","title":"encoding"},{"location":"reference/pydantic_openapi_schema/v3_1_0/encoding/#pydantic_openapi_schema.v3_1_0.encoding.Encoding","text":"Bases: BaseModel A single encoding definition applied to a single schema property.","title":"Encoding"},{"location":"reference/pydantic_openapi_schema/v3_1_0/encoding/#pydantic_openapi_schema.v3_1_0.encoding.Encoding.allowReserved","text":"allowReserved : bool = False Determines whether the parameter value SHOULD allow reserved characters, as defined by. RFC3986 :/?#[]@!$&'()*+,;= to be included without percent- encoding. The default value is false . This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data . If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored.","title":"allowReserved"},{"location":"reference/pydantic_openapi_schema/v3_1_0/encoding/#pydantic_openapi_schema.v3_1_0.encoding.Encoding.contentType","text":"contentType : Optional [ str ] = None The Content-Type for encoding a specific property. Default value depends on the property type: for object - application/json ; for array \u2013 the default is defined based on the inner type; for all other cases the default is application/octet-stream . The value can be a specific media type (e.g. application/json ), a wildcard media type (e.g. image/* ), or a comma-separated list of the two types.","title":"contentType"},{"location":"reference/pydantic_openapi_schema/v3_1_0/encoding/#pydantic_openapi_schema.v3_1_0.encoding.Encoding.explode","text":"explode : bool = False When this is true, property values of type array or object generate separate parameters for each value of the array, or key-value-pair of the map. For other types of properties this property has no effect. When style is form , the default value is true . For all other styles, the default value is false . This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data . If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored.","title":"explode"},{"location":"reference/pydantic_openapi_schema/v3_1_0/encoding/#pydantic_openapi_schema.v3_1_0.encoding.Encoding.headers","text":"headers : Optional [ Dict [ str , Union [ Header , Reference ]]] = None A map allowing additional information to be provided as headers, for example Content-Disposition . Content-Type is described separately and SHALL be ignored in this section. This property SHALL be ignored if the request body media type is not a multipart .","title":"headers"},{"location":"reference/pydantic_openapi_schema/v3_1_0/encoding/#pydantic_openapi_schema.v3_1_0.encoding.Encoding.style","text":"style : Optional [ str ] = None Describes how a specific property value will be serialized depending on its type. See Parameter Object for details on the style property. The behavior follows the same values as query parameters, including default values. This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data . If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored.","title":"style"},{"location":"reference/pydantic_openapi_schema/v3_1_0/example/","text":"Example \u00b6 Bases: BaseModel description class-attribute \u00b6 description : Optional [ str ] = None Long description for the example. CommonMark syntax MAY be used for rich text representation. externalValue class-attribute \u00b6 externalValue : Optional [ str ] = None A URL that points to the literal example. This provides the capability to reference examples that cannot easily be included in JSON or YAML documents. The value field and externalValue field are mutually exclusive. See the rules for resolving Relative References . summary class-attribute \u00b6 summary : Optional [ str ] = None Short description for the example. value class-attribute \u00b6 value : Optional [ Any ] = None Embedded literal example. The value field and externalValue field are mutually exclusive. To represent examples of media types that cannot naturally represented in JSON or YAML, use a string value to contain the example, escaping where necessary.","title":"example"},{"location":"reference/pydantic_openapi_schema/v3_1_0/example/#pydantic_openapi_schema.v3_1_0.example.Example","text":"Bases: BaseModel","title":"Example"},{"location":"reference/pydantic_openapi_schema/v3_1_0/example/#pydantic_openapi_schema.v3_1_0.example.Example.description","text":"description : Optional [ str ] = None Long description for the example. CommonMark syntax MAY be used for rich text representation.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/example/#pydantic_openapi_schema.v3_1_0.example.Example.externalValue","text":"externalValue : Optional [ str ] = None A URL that points to the literal example. This provides the capability to reference examples that cannot easily be included in JSON or YAML documents. The value field and externalValue field are mutually exclusive. See the rules for resolving Relative References .","title":"externalValue"},{"location":"reference/pydantic_openapi_schema/v3_1_0/example/#pydantic_openapi_schema.v3_1_0.example.Example.summary","text":"summary : Optional [ str ] = None Short description for the example.","title":"summary"},{"location":"reference/pydantic_openapi_schema/v3_1_0/example/#pydantic_openapi_schema.v3_1_0.example.Example.value","text":"value : Optional [ Any ] = None Embedded literal example. The value field and externalValue field are mutually exclusive. To represent examples of media types that cannot naturally represented in JSON or YAML, use a string value to contain the example, escaping where necessary.","title":"value"},{"location":"reference/pydantic_openapi_schema/v3_1_0/external_documentation/","text":"ExternalDocumentation \u00b6 Bases: BaseModel Allows referencing an external resource for extended documentation. description class-attribute \u00b6 description : Optional [ str ] = None A short description of the target documentation. CommonMark syntax MAY be used for rich text representation. url class-attribute \u00b6 url : AnyUrl REQUIRED . The URL for the target documentation. Value MUST be in the form of a URL.","title":"external_documentation"},{"location":"reference/pydantic_openapi_schema/v3_1_0/external_documentation/#pydantic_openapi_schema.v3_1_0.external_documentation.ExternalDocumentation","text":"Bases: BaseModel Allows referencing an external resource for extended documentation.","title":"ExternalDocumentation"},{"location":"reference/pydantic_openapi_schema/v3_1_0/external_documentation/#pydantic_openapi_schema.v3_1_0.external_documentation.ExternalDocumentation.description","text":"description : Optional [ str ] = None A short description of the target documentation. CommonMark syntax MAY be used for rich text representation.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/external_documentation/#pydantic_openapi_schema.v3_1_0.external_documentation.ExternalDocumentation.url","text":"url : AnyUrl REQUIRED . The URL for the target documentation. Value MUST be in the form of a URL.","title":"url"},{"location":"reference/pydantic_openapi_schema/v3_1_0/header/","text":"Header \u00b6 Bases: Parameter The Header Object follows the structure of the Parameter Object with the following changes: name MUST NOT be specified, it is given in the corresponding headers map. in MUST NOT be specified, it is implicitly in header . All traits that are affected by the location MUST be applicable to a location of header (for example, style ).","title":"header"},{"location":"reference/pydantic_openapi_schema/v3_1_0/header/#pydantic_openapi_schema.v3_1_0.header.Header","text":"Bases: Parameter The Header Object follows the structure of the Parameter Object with the following changes: name MUST NOT be specified, it is given in the corresponding headers map. in MUST NOT be specified, it is implicitly in header . All traits that are affected by the location MUST be applicable to a location of header (for example, style ).","title":"Header"},{"location":"reference/pydantic_openapi_schema/v3_1_0/info/","text":"Info \u00b6 Bases: BaseModel The object provides metadata about the API. The metadata MAY be used by the clients if needed, and MAY be presented in editing or documentation generation tools for convenience. contact class-attribute \u00b6 contact : Optional [ Contact ] = None The contact information for the exposed API. description class-attribute \u00b6 description : Optional [ str ] = None A description of the API. CommonMark syntax MAY be used for rich text representation. license class-attribute \u00b6 license : Optional [ License ] = None The license information for the exposed API. summary class-attribute \u00b6 summary : Optional [ str ] = None A short summary of the API. termsOfService class-attribute \u00b6 termsOfService : Optional [ AnyUrl ] = None A URL to the Terms of Service for the API. MUST be in the form of a URL. title class-attribute \u00b6 title : str REQUIRED . The title of the API. version class-attribute \u00b6 version : str REQUIRED . The version of the OpenAPI document (which is distinct from the OpenAPI Specification version ) or the API implementation version).","title":"info"},{"location":"reference/pydantic_openapi_schema/v3_1_0/info/#pydantic_openapi_schema.v3_1_0.info.Info","text":"Bases: BaseModel The object provides metadata about the API. The metadata MAY be used by the clients if needed, and MAY be presented in editing or documentation generation tools for convenience.","title":"Info"},{"location":"reference/pydantic_openapi_schema/v3_1_0/info/#pydantic_openapi_schema.v3_1_0.info.Info.contact","text":"contact : Optional [ Contact ] = None The contact information for the exposed API.","title":"contact"},{"location":"reference/pydantic_openapi_schema/v3_1_0/info/#pydantic_openapi_schema.v3_1_0.info.Info.description","text":"description : Optional [ str ] = None A description of the API. CommonMark syntax MAY be used for rich text representation.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/info/#pydantic_openapi_schema.v3_1_0.info.Info.license","text":"license : Optional [ License ] = None The license information for the exposed API.","title":"license"},{"location":"reference/pydantic_openapi_schema/v3_1_0/info/#pydantic_openapi_schema.v3_1_0.info.Info.summary","text":"summary : Optional [ str ] = None A short summary of the API.","title":"summary"},{"location":"reference/pydantic_openapi_schema/v3_1_0/info/#pydantic_openapi_schema.v3_1_0.info.Info.termsOfService","text":"termsOfService : Optional [ AnyUrl ] = None A URL to the Terms of Service for the API. MUST be in the form of a URL.","title":"termsOfService"},{"location":"reference/pydantic_openapi_schema/v3_1_0/info/#pydantic_openapi_schema.v3_1_0.info.Info.title","text":"title : str REQUIRED . The title of the API.","title":"title"},{"location":"reference/pydantic_openapi_schema/v3_1_0/info/#pydantic_openapi_schema.v3_1_0.info.Info.version","text":"version : str REQUIRED . The version of the OpenAPI document (which is distinct from the OpenAPI Specification version ) or the API implementation version).","title":"version"},{"location":"reference/pydantic_openapi_schema/v3_1_0/license/","text":"License \u00b6 Bases: BaseModel License information for the exposed API. identifier class-attribute \u00b6 identifier : Optional [ str ] = None An SPDX license expression for the API. The identifier field is mutually exclusive of the url field. name class-attribute \u00b6 name : str REQUIRED . The license name used for the API. url class-attribute \u00b6 url : Optional [ AnyUrl ] = None A URL to the license used for the API. This MUST be in the form of a URL. The url field is mutually exclusive of the identifier field.","title":"license"},{"location":"reference/pydantic_openapi_schema/v3_1_0/license/#pydantic_openapi_schema.v3_1_0.license.License","text":"Bases: BaseModel License information for the exposed API.","title":"License"},{"location":"reference/pydantic_openapi_schema/v3_1_0/license/#pydantic_openapi_schema.v3_1_0.license.License.identifier","text":"identifier : Optional [ str ] = None An SPDX license expression for the API. The identifier field is mutually exclusive of the url field.","title":"identifier"},{"location":"reference/pydantic_openapi_schema/v3_1_0/license/#pydantic_openapi_schema.v3_1_0.license.License.name","text":"name : str REQUIRED . The license name used for the API.","title":"name"},{"location":"reference/pydantic_openapi_schema/v3_1_0/license/#pydantic_openapi_schema.v3_1_0.license.License.url","text":"url : Optional [ AnyUrl ] = None A URL to the license used for the API. This MUST be in the form of a URL. The url field is mutually exclusive of the identifier field.","title":"url"},{"location":"reference/pydantic_openapi_schema/v3_1_0/link/","text":"Link \u00b6 Bases: BaseModel The Link object represents a possible design-time link for a response. The presence of a link does not guarantee the caller's ability to successfully invoke it, rather it provides a known relationship and traversal mechanism between responses and other operations. Unlike dynamic links (i.e. links provided in the response payload), the OAS linking mechanism does not require link information in the runtime response. For computing links, and providing instructions to execute them, a runtime expression is used for accessing values in an operation and using them as parameters while invoking the linked operation. description class-attribute \u00b6 description : Optional [ str ] = None A description of the link. CommonMark syntax MAY be used for rich text representation. operationId class-attribute \u00b6 operationId : Optional [ str ] = None The name of an existing , resolvable OAS operation, as defined with a unique operationId . This field is mutually exclusive of the operationRef field. operationRef class-attribute \u00b6 operationRef : Optional [ str ] = None A relative or absolute URI reference to an OAS operation. This field is mutually exclusive of the operationId field, and MUST point to an Operation Object . Relative operationRef values MAY be used to locate an existing Operation Object in the OpenAPI definition. See the rules for resolving Relative References . parameters class-attribute \u00b6 parameters : Optional [ Dict [ str , Any ]] = None A map representing parameters to pass to an operation as specified with operationId or identified via operationRef . The key is the parameter name to be used, whereas the value can be a constant or an expression to be evaluated and passed to the linked operation. The parameter name can be qualified using the parameter location [{in}.]{name} for operations that use the same parameter name in different locations (e.g. path.id). requestBody class-attribute \u00b6 requestBody : Optional [ Any ] = None A literal value or {expression} to use as a request body when calling the target operation. server class-attribute \u00b6 server : Optional [ Server ] = None A server object to be used by the target operation.","title":"link"},{"location":"reference/pydantic_openapi_schema/v3_1_0/link/#pydantic_openapi_schema.v3_1_0.link.Link","text":"Bases: BaseModel The Link object represents a possible design-time link for a response. The presence of a link does not guarantee the caller's ability to successfully invoke it, rather it provides a known relationship and traversal mechanism between responses and other operations. Unlike dynamic links (i.e. links provided in the response payload), the OAS linking mechanism does not require link information in the runtime response. For computing links, and providing instructions to execute them, a runtime expression is used for accessing values in an operation and using them as parameters while invoking the linked operation.","title":"Link"},{"location":"reference/pydantic_openapi_schema/v3_1_0/link/#pydantic_openapi_schema.v3_1_0.link.Link.description","text":"description : Optional [ str ] = None A description of the link. CommonMark syntax MAY be used for rich text representation.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/link/#pydantic_openapi_schema.v3_1_0.link.Link.operationId","text":"operationId : Optional [ str ] = None The name of an existing , resolvable OAS operation, as defined with a unique operationId . This field is mutually exclusive of the operationRef field.","title":"operationId"},{"location":"reference/pydantic_openapi_schema/v3_1_0/link/#pydantic_openapi_schema.v3_1_0.link.Link.operationRef","text":"operationRef : Optional [ str ] = None A relative or absolute URI reference to an OAS operation. This field is mutually exclusive of the operationId field, and MUST point to an Operation Object . Relative operationRef values MAY be used to locate an existing Operation Object in the OpenAPI definition. See the rules for resolving Relative References .","title":"operationRef"},{"location":"reference/pydantic_openapi_schema/v3_1_0/link/#pydantic_openapi_schema.v3_1_0.link.Link.parameters","text":"parameters : Optional [ Dict [ str , Any ]] = None A map representing parameters to pass to an operation as specified with operationId or identified via operationRef . The key is the parameter name to be used, whereas the value can be a constant or an expression to be evaluated and passed to the linked operation. The parameter name can be qualified using the parameter location [{in}.]{name} for operations that use the same parameter name in different locations (e.g. path.id).","title":"parameters"},{"location":"reference/pydantic_openapi_schema/v3_1_0/link/#pydantic_openapi_schema.v3_1_0.link.Link.requestBody","text":"requestBody : Optional [ Any ] = None A literal value or {expression} to use as a request body when calling the target operation.","title":"requestBody"},{"location":"reference/pydantic_openapi_schema/v3_1_0/link/#pydantic_openapi_schema.v3_1_0.link.Link.server","text":"server : Optional [ Server ] = None A server object to be used by the target operation.","title":"server"},{"location":"reference/pydantic_openapi_schema/v3_1_0/media_type/","text":"MediaType \u00b6 Bases: BaseModel Each Media Type Object provides schema and examples for the media type identified by its key. encoding class-attribute \u00b6 encoding : Optional [ Dict [ str , Encoding ]] = None A map between a property name and its encoding information. The key, being the property name, MUST exist in the schema as a property. The encoding object SHALL only apply to requestBody objects when the media type is multipart or application/x-www- form-urlencoded . example class-attribute \u00b6 example : Optional [ Any ] = None Example of the media type. The example object SHOULD be in the correct format as specified by the media type. The example field is mutually exclusive of the examples field. Furthermore, if referencing a schema which contains an example, the example value SHALL override the example provided by the schema. examples class-attribute \u00b6 examples : Optional [ Dict [ str , Union [ Example , Reference ]]] = None Examples of the media type. Each example object SHOULD match the media type and specified schema if present. The examples field is mutually exclusive of the example field. Furthermore, if referencing a schema which contains an example, the examples value SHALL override the example provided by the schema. media_type_schema class-attribute \u00b6 media_type_schema : Optional [ Union [ Reference , Schema ]] = Field ( default = None , alias = 'schema' ) The schema defining the content of the request, response, or parameter.","title":"media_type"},{"location":"reference/pydantic_openapi_schema/v3_1_0/media_type/#pydantic_openapi_schema.v3_1_0.media_type.MediaType","text":"Bases: BaseModel Each Media Type Object provides schema and examples for the media type identified by its key.","title":"MediaType"},{"location":"reference/pydantic_openapi_schema/v3_1_0/media_type/#pydantic_openapi_schema.v3_1_0.media_type.MediaType.encoding","text":"encoding : Optional [ Dict [ str , Encoding ]] = None A map between a property name and its encoding information. The key, being the property name, MUST exist in the schema as a property. The encoding object SHALL only apply to requestBody objects when the media type is multipart or application/x-www- form-urlencoded .","title":"encoding"},{"location":"reference/pydantic_openapi_schema/v3_1_0/media_type/#pydantic_openapi_schema.v3_1_0.media_type.MediaType.example","text":"example : Optional [ Any ] = None Example of the media type. The example object SHOULD be in the correct format as specified by the media type. The example field is mutually exclusive of the examples field. Furthermore, if referencing a schema which contains an example, the example value SHALL override the example provided by the schema.","title":"example"},{"location":"reference/pydantic_openapi_schema/v3_1_0/media_type/#pydantic_openapi_schema.v3_1_0.media_type.MediaType.examples","text":"examples : Optional [ Dict [ str , Union [ Example , Reference ]]] = None Examples of the media type. Each example object SHOULD match the media type and specified schema if present. The examples field is mutually exclusive of the example field. Furthermore, if referencing a schema which contains an example, the examples value SHALL override the example provided by the schema.","title":"examples"},{"location":"reference/pydantic_openapi_schema/v3_1_0/media_type/#pydantic_openapi_schema.v3_1_0.media_type.MediaType.media_type_schema","text":"media_type_schema : Optional [ Union [ Reference , Schema ]] = Field ( default = None , alias = 'schema' ) The schema defining the content of the request, response, or parameter.","title":"media_type_schema"},{"location":"reference/pydantic_openapi_schema/v3_1_0/oauth_flow/","text":"OAuthFlow \u00b6 Bases: BaseModel Configuration details for a supported OAuth Flow. authorizationUrl class-attribute \u00b6 authorizationUrl : Optional [ Union [ AnyUrl , str ]] = None REQUIRED for oauth2 (\"implicit\", \"authorizationCode\") . The authorization URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS. refreshUrl class-attribute \u00b6 refreshUrl : Optional [ Union [ AnyUrl , str ]] = None The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS. scopes class-attribute \u00b6 scopes : Optional [ Dict [ str , str ]] = None REQUIRED for oauth2 . The available scopes for the OAuth2 security scheme. A map between the scope name and a short description for it. The map MAY be empty. tokenUrl class-attribute \u00b6 tokenUrl : Optional [ Union [ AnyUrl , str ]] = None REQUIRED for oauth2 (\"password\", \"clientCredentials\", \"authorizationCode\") . The token URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.","title":"oauth_flow"},{"location":"reference/pydantic_openapi_schema/v3_1_0/oauth_flow/#pydantic_openapi_schema.v3_1_0.oauth_flow.OAuthFlow","text":"Bases: BaseModel Configuration details for a supported OAuth Flow.","title":"OAuthFlow"},{"location":"reference/pydantic_openapi_schema/v3_1_0/oauth_flow/#pydantic_openapi_schema.v3_1_0.oauth_flow.OAuthFlow.authorizationUrl","text":"authorizationUrl : Optional [ Union [ AnyUrl , str ]] = None REQUIRED for oauth2 (\"implicit\", \"authorizationCode\") . The authorization URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.","title":"authorizationUrl"},{"location":"reference/pydantic_openapi_schema/v3_1_0/oauth_flow/#pydantic_openapi_schema.v3_1_0.oauth_flow.OAuthFlow.refreshUrl","text":"refreshUrl : Optional [ Union [ AnyUrl , str ]] = None The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.","title":"refreshUrl"},{"location":"reference/pydantic_openapi_schema/v3_1_0/oauth_flow/#pydantic_openapi_schema.v3_1_0.oauth_flow.OAuthFlow.scopes","text":"scopes : Optional [ Dict [ str , str ]] = None REQUIRED for oauth2 . The available scopes for the OAuth2 security scheme. A map between the scope name and a short description for it. The map MAY be empty.","title":"scopes"},{"location":"reference/pydantic_openapi_schema/v3_1_0/oauth_flow/#pydantic_openapi_schema.v3_1_0.oauth_flow.OAuthFlow.tokenUrl","text":"tokenUrl : Optional [ Union [ AnyUrl , str ]] = None REQUIRED for oauth2 (\"password\", \"clientCredentials\", \"authorizationCode\") . The token URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.","title":"tokenUrl"},{"location":"reference/pydantic_openapi_schema/v3_1_0/oauth_flows/","text":"OAuthFlows \u00b6 Bases: BaseModel Allows configuration of the supported OAuth Flows. authorizationCode class-attribute \u00b6 authorizationCode : Optional [ OAuthFlow ] = None Configuration for the OAuth Authorization Code flow. Previously called accessCode in OpenAPI 2.0. clientCredentials class-attribute \u00b6 clientCredentials : Optional [ OAuthFlow ] = None Configuration for the OAuth Client Credentials flow. Previously called application in OpenAPI 2.0. implicit class-attribute \u00b6 implicit : Optional [ OAuthFlow ] = None Configuration for the OAuth Implicit flow. password class-attribute \u00b6 password : Optional [ OAuthFlow ] = None Configuration for the OAuth Resource Owner Password flow.","title":"oauth_flows"},{"location":"reference/pydantic_openapi_schema/v3_1_0/oauth_flows/#pydantic_openapi_schema.v3_1_0.oauth_flows.OAuthFlows","text":"Bases: BaseModel Allows configuration of the supported OAuth Flows.","title":"OAuthFlows"},{"location":"reference/pydantic_openapi_schema/v3_1_0/oauth_flows/#pydantic_openapi_schema.v3_1_0.oauth_flows.OAuthFlows.authorizationCode","text":"authorizationCode : Optional [ OAuthFlow ] = None Configuration for the OAuth Authorization Code flow. Previously called accessCode in OpenAPI 2.0.","title":"authorizationCode"},{"location":"reference/pydantic_openapi_schema/v3_1_0/oauth_flows/#pydantic_openapi_schema.v3_1_0.oauth_flows.OAuthFlows.clientCredentials","text":"clientCredentials : Optional [ OAuthFlow ] = None Configuration for the OAuth Client Credentials flow. Previously called application in OpenAPI 2.0.","title":"clientCredentials"},{"location":"reference/pydantic_openapi_schema/v3_1_0/oauth_flows/#pydantic_openapi_schema.v3_1_0.oauth_flows.OAuthFlows.implicit","text":"implicit : Optional [ OAuthFlow ] = None Configuration for the OAuth Implicit flow.","title":"implicit"},{"location":"reference/pydantic_openapi_schema/v3_1_0/oauth_flows/#pydantic_openapi_schema.v3_1_0.oauth_flows.OAuthFlows.password","text":"password : Optional [ OAuthFlow ] = None Configuration for the OAuth Resource Owner Password flow.","title":"password"},{"location":"reference/pydantic_openapi_schema/v3_1_0/open_api/","text":"OpenAPI \u00b6 Bases: BaseModel Root OpenAPI document. components class-attribute \u00b6 components : Optional [ Components ] = None An element to hold various schemas for the document. externalDocs class-attribute \u00b6 externalDocs : Optional [ ExternalDocumentation ] = None Additional external documentation. info class-attribute \u00b6 info : Info REQUIRED . Provides metadata about the API. The metadata MAY be used by tooling as required. jsonSchemaDialect class-attribute \u00b6 jsonSchemaDialect : Optional [ str ] = None The default value for the $schema keyword within Schema Objects contained within this OAS document. This MUST be in the form of a URI. openapi class-attribute \u00b6 openapi : str = '3.1.0' REQUIRED . This string MUST be the version number of the OpenAPI Specification that the OpenAPI document uses. The openapi field SHOULD be used by tooling to interpret the OpenAPI document. This is not related to the API info.version string. paths class-attribute \u00b6 paths : Optional [ Paths ] = None The available paths and operations for the API. security class-attribute \u00b6 security : Optional [ List [ SecurityRequirement ]] = None A declaration of which security mechanisms can be used across the API. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. Individual operations can override this definition. To make security optional, an empty security requirement ( {} ) can be included in the array. servers class-attribute \u00b6 servers : List [ Server ] = [ Server ( url = '/' )] An array of Server Objects, which provide connectivity information to a target server. If the servers property is not provided, or is an empty array, the default value would be a Server Object with a url value of / . tags class-attribute \u00b6 tags : Optional [ List [ Tag ]] = None A list of tags used by the document with additional metadata. The order of the tags can be used to reflect on their order by the parsing tools. Not all tags that are used by the Operation Object must be declared. The tags that are not declared MAY be organized randomly or based on the tools' logic. Each tag name in the list MUST be unique. webhooks class-attribute \u00b6 webhooks : Optional [ Dict [ str , Union [ PathItem , Reference ]]] = None The incoming webhooks that MAY be received as part of this API and that the API consumer MAY choose to implement. Closely related to the callbacks feature, this section describes requests initiated other than by an API call, for example by an out of band registration. The key name is a unique string to refer to each webhook, while the (optionally referenced) Path Item Object describes a request that may be initiated by the API provider and the expected responses. An example is available.","title":"open_api"},{"location":"reference/pydantic_openapi_schema/v3_1_0/open_api/#pydantic_openapi_schema.v3_1_0.open_api.OpenAPI","text":"Bases: BaseModel Root OpenAPI document.","title":"OpenAPI"},{"location":"reference/pydantic_openapi_schema/v3_1_0/open_api/#pydantic_openapi_schema.v3_1_0.open_api.OpenAPI.components","text":"components : Optional [ Components ] = None An element to hold various schemas for the document.","title":"components"},{"location":"reference/pydantic_openapi_schema/v3_1_0/open_api/#pydantic_openapi_schema.v3_1_0.open_api.OpenAPI.externalDocs","text":"externalDocs : Optional [ ExternalDocumentation ] = None Additional external documentation.","title":"externalDocs"},{"location":"reference/pydantic_openapi_schema/v3_1_0/open_api/#pydantic_openapi_schema.v3_1_0.open_api.OpenAPI.info","text":"info : Info REQUIRED . Provides metadata about the API. The metadata MAY be used by tooling as required.","title":"info"},{"location":"reference/pydantic_openapi_schema/v3_1_0/open_api/#pydantic_openapi_schema.v3_1_0.open_api.OpenAPI.jsonSchemaDialect","text":"jsonSchemaDialect : Optional [ str ] = None The default value for the $schema keyword within Schema Objects contained within this OAS document. This MUST be in the form of a URI.","title":"jsonSchemaDialect"},{"location":"reference/pydantic_openapi_schema/v3_1_0/open_api/#pydantic_openapi_schema.v3_1_0.open_api.OpenAPI.openapi","text":"openapi : str = '3.1.0' REQUIRED . This string MUST be the version number of the OpenAPI Specification that the OpenAPI document uses. The openapi field SHOULD be used by tooling to interpret the OpenAPI document. This is not related to the API info.version string.","title":"openapi"},{"location":"reference/pydantic_openapi_schema/v3_1_0/open_api/#pydantic_openapi_schema.v3_1_0.open_api.OpenAPI.paths","text":"paths : Optional [ Paths ] = None The available paths and operations for the API.","title":"paths"},{"location":"reference/pydantic_openapi_schema/v3_1_0/open_api/#pydantic_openapi_schema.v3_1_0.open_api.OpenAPI.security","text":"security : Optional [ List [ SecurityRequirement ]] = None A declaration of which security mechanisms can be used across the API. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. Individual operations can override this definition. To make security optional, an empty security requirement ( {} ) can be included in the array.","title":"security"},{"location":"reference/pydantic_openapi_schema/v3_1_0/open_api/#pydantic_openapi_schema.v3_1_0.open_api.OpenAPI.servers","text":"servers : List [ Server ] = [ Server ( url = '/' )] An array of Server Objects, which provide connectivity information to a target server. If the servers property is not provided, or is an empty array, the default value would be a Server Object with a url value of / .","title":"servers"},{"location":"reference/pydantic_openapi_schema/v3_1_0/open_api/#pydantic_openapi_schema.v3_1_0.open_api.OpenAPI.tags","text":"tags : Optional [ List [ Tag ]] = None A list of tags used by the document with additional metadata. The order of the tags can be used to reflect on their order by the parsing tools. Not all tags that are used by the Operation Object must be declared. The tags that are not declared MAY be organized randomly or based on the tools' logic. Each tag name in the list MUST be unique.","title":"tags"},{"location":"reference/pydantic_openapi_schema/v3_1_0/open_api/#pydantic_openapi_schema.v3_1_0.open_api.OpenAPI.webhooks","text":"webhooks : Optional [ Dict [ str , Union [ PathItem , Reference ]]] = None The incoming webhooks that MAY be received as part of this API and that the API consumer MAY choose to implement. Closely related to the callbacks feature, this section describes requests initiated other than by an API call, for example by an out of band registration. The key name is a unique string to refer to each webhook, while the (optionally referenced) Path Item Object describes a request that may be initiated by the API provider and the expected responses. An example is available.","title":"webhooks"},{"location":"reference/pydantic_openapi_schema/v3_1_0/operation/","text":"Operation \u00b6 Bases: BaseModel Describes a single API operation on a path. callbacks class-attribute \u00b6 callbacks : Optional [ Dict [ str , Union [ Callback , Reference ]]] = None A map of possible out-of band callbacks related to the parent operation. The key is a unique identifier for the Callback Object. Each value in the map is a Callback Object that describes a request that may be initiated by the API provider and the expected responses. deprecated class-attribute \u00b6 deprecated : bool = False Declares this operation to be deprecated. Consumers SHOULD refrain from usage of the declared operation. Default value is false . description class-attribute \u00b6 description : Optional [ str ] = None A verbose explanation of the operation behavior. CommonMark syntax MAY be used for rich text representation. externalDocs class-attribute \u00b6 externalDocs : Optional [ ExternalDocumentation ] = None Additional external documentation for this operation. operationId class-attribute \u00b6 operationId : Optional [ str ] = None Unique string used to identify the operation. The id MUST be unique among all operations described in the API. The operationId value is case-sensitive . Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is RECOMMENDED to follow common programming naming conventions. parameters class-attribute \u00b6 parameters : Optional [ List [ Union [ Parameter , Reference ]]] = None A list of parameters that are applicable for this operation. If a parameter is already defined at the Path Item , the new definition will override it but can never remove it. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a name and location . The list can use the Reference Object to link to parameters that are defined at the OpenAPI Object's components/parameters . requestBody class-attribute \u00b6 requestBody : Optional [ Union [ RequestBody , Reference ]] = None The request body applicable for this operation. The requestBody is fully supported in HTTP methods where the HTTP 1.1 specification RFC7231 has explicitly defined semantics for request bodies. In other cases where the HTTP spec is vague (such as GET , HEAD and DELETE ), requestBody is permitted but does not have well-defined semantics and SHOULD be avoided if possible. responses class-attribute \u00b6 responses : Optional [ Responses ] = None The list of possible responses as they are returned from executing this operation. security class-attribute \u00b6 security : Optional [ List [ SecurityRequirement ]] = None A declaration of which security mechanisms can be used for this operation. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. To make security optional, an empty security requirement ( {} ) can be included in the array. This definition overrides any declared top-level security . To remove a top-level security declaration, an empty array can be used. servers class-attribute \u00b6 servers : Optional [ List [ Server ]] = None An alternative server array to service this operation. If an alternative server object is specified at the Path Item Object or Root level, it will be overridden by this value. summary class-attribute \u00b6 summary : Optional [ str ] = None A short summary of what the operation does. tags class-attribute \u00b6 tags : Optional [ List [ str ]] = None A list of tags for API documentation control. Tags can be used for logical grouping of operations by resources or any other qualifier.","title":"operation"},{"location":"reference/pydantic_openapi_schema/v3_1_0/operation/#pydantic_openapi_schema.v3_1_0.operation.Operation","text":"Bases: BaseModel Describes a single API operation on a path.","title":"Operation"},{"location":"reference/pydantic_openapi_schema/v3_1_0/operation/#pydantic_openapi_schema.v3_1_0.operation.Operation.callbacks","text":"callbacks : Optional [ Dict [ str , Union [ Callback , Reference ]]] = None A map of possible out-of band callbacks related to the parent operation. The key is a unique identifier for the Callback Object. Each value in the map is a Callback Object that describes a request that may be initiated by the API provider and the expected responses.","title":"callbacks"},{"location":"reference/pydantic_openapi_schema/v3_1_0/operation/#pydantic_openapi_schema.v3_1_0.operation.Operation.deprecated","text":"deprecated : bool = False Declares this operation to be deprecated. Consumers SHOULD refrain from usage of the declared operation. Default value is false .","title":"deprecated"},{"location":"reference/pydantic_openapi_schema/v3_1_0/operation/#pydantic_openapi_schema.v3_1_0.operation.Operation.description","text":"description : Optional [ str ] = None A verbose explanation of the operation behavior. CommonMark syntax MAY be used for rich text representation.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/operation/#pydantic_openapi_schema.v3_1_0.operation.Operation.externalDocs","text":"externalDocs : Optional [ ExternalDocumentation ] = None Additional external documentation for this operation.","title":"externalDocs"},{"location":"reference/pydantic_openapi_schema/v3_1_0/operation/#pydantic_openapi_schema.v3_1_0.operation.Operation.operationId","text":"operationId : Optional [ str ] = None Unique string used to identify the operation. The id MUST be unique among all operations described in the API. The operationId value is case-sensitive . Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is RECOMMENDED to follow common programming naming conventions.","title":"operationId"},{"location":"reference/pydantic_openapi_schema/v3_1_0/operation/#pydantic_openapi_schema.v3_1_0.operation.Operation.parameters","text":"parameters : Optional [ List [ Union [ Parameter , Reference ]]] = None A list of parameters that are applicable for this operation. If a parameter is already defined at the Path Item , the new definition will override it but can never remove it. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a name and location . The list can use the Reference Object to link to parameters that are defined at the OpenAPI Object's components/parameters .","title":"parameters"},{"location":"reference/pydantic_openapi_schema/v3_1_0/operation/#pydantic_openapi_schema.v3_1_0.operation.Operation.requestBody","text":"requestBody : Optional [ Union [ RequestBody , Reference ]] = None The request body applicable for this operation. The requestBody is fully supported in HTTP methods where the HTTP 1.1 specification RFC7231 has explicitly defined semantics for request bodies. In other cases where the HTTP spec is vague (such as GET , HEAD and DELETE ), requestBody is permitted but does not have well-defined semantics and SHOULD be avoided if possible.","title":"requestBody"},{"location":"reference/pydantic_openapi_schema/v3_1_0/operation/#pydantic_openapi_schema.v3_1_0.operation.Operation.responses","text":"responses : Optional [ Responses ] = None The list of possible responses as they are returned from executing this operation.","title":"responses"},{"location":"reference/pydantic_openapi_schema/v3_1_0/operation/#pydantic_openapi_schema.v3_1_0.operation.Operation.security","text":"security : Optional [ List [ SecurityRequirement ]] = None A declaration of which security mechanisms can be used for this operation. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. To make security optional, an empty security requirement ( {} ) can be included in the array. This definition overrides any declared top-level security . To remove a top-level security declaration, an empty array can be used.","title":"security"},{"location":"reference/pydantic_openapi_schema/v3_1_0/operation/#pydantic_openapi_schema.v3_1_0.operation.Operation.servers","text":"servers : Optional [ List [ Server ]] = None An alternative server array to service this operation. If an alternative server object is specified at the Path Item Object or Root level, it will be overridden by this value.","title":"servers"},{"location":"reference/pydantic_openapi_schema/v3_1_0/operation/#pydantic_openapi_schema.v3_1_0.operation.Operation.summary","text":"summary : Optional [ str ] = None A short summary of what the operation does.","title":"summary"},{"location":"reference/pydantic_openapi_schema/v3_1_0/operation/#pydantic_openapi_schema.v3_1_0.operation.Operation.tags","text":"tags : Optional [ List [ str ]] = None A list of tags for API documentation control. Tags can be used for logical grouping of operations by resources or any other qualifier.","title":"tags"},{"location":"reference/pydantic_openapi_schema/v3_1_0/parameter/","text":"Parameter \u00b6 Bases: BaseModel Describes a single operation parameter. A unique parameter is defined by a combination of a name and location . allowEmptyValue class-attribute \u00b6 allowEmptyValue : bool = False Sets the ability to pass empty-valued parameters. This is valid only for query parameters and allows sending a parameter with an empty value. Default value is false . If. style is used, and if behavior is n/a (cannot be serialized), the value of allowEmptyValue SHALL be ignored. Use of this property is NOT RECOMMENDED, as it is likely to be removed in a later revision. The rules for serialization of the parameter are specified in one of two ways. For simpler scenarios, a schema and style can describe the structure and syntax of the parameter. allowReserved class-attribute \u00b6 allowReserved : bool = False Determines whether the parameter value SHOULD allow reserved characters, as defined by. RFC3986 :/?#[]@!$&'()*+,;= to be included without percent- encoding. This property only applies to parameters with an in value of query . The default value is false . content class-attribute \u00b6 content : Optional [ Dict [ str , MediaType ]] = None A map containing the representations for the parameter. The key is the media type and the value describes it. The map MUST only contain one entry. deprecated class-attribute \u00b6 deprecated : bool = False Specifies that a parameter is deprecated and SHOULD be transitioned out of usage. Default value is false . description class-attribute \u00b6 description : Optional [ str ] = None A brief description of the parameter. This could contain examples of use. CommonMark syntax MAY be used for rich text representation. example class-attribute \u00b6 example : Optional [ Any ] = None Example of the parameter's potential value. The example SHOULD match the specified schema and encoding properties if present. The example field is mutually exclusive of the examples field. Furthermore, if referencing a schema that contains an example, the example value SHALL override the example provided by the schema. To represent examples of media types that cannot naturally be represented in JSON or YAML, a string value can contain the example with escaping where necessary. examples class-attribute \u00b6 examples : Optional [ Dict [ str , Union [ Example , Reference ]]] = None Examples of the parameter's potential value. Each example SHOULD contain a value in the correct format as specified in the parameter encoding. The examples field is mutually exclusive of the example field. Furthermore, if referencing a schema that contains an example, the examples value SHALL override the example provided by the schema. For more complex scenarios, the content property can define the media type and schema of the parameter. A parameter MUST contain either a schema property, or a content property, but not both. When example or examples are provided in conjunction with the schema object, the example MUST follow the prescribed serialization strategy for the parameter. explode class-attribute \u00b6 explode : bool = False When this is true, parameter values of type array or object generate separate parameters for each value of the array or key-value pair of the map. For other types of parameters this property has no effect. When style is form , the default value is true . For all other styles, the default value is false . name class-attribute \u00b6 name : str REQUIRED . The name of the parameter. Parameter names are case sensitive . If in is \"path\" , the name field MUST correspond to a template expression occurring within the path field in the Paths Object . See Path Templating for further information. If in is \"header\" and the name field is \"Accept\" , \"Content-Type\" or \"Authorization\" , the parameter definition SHALL be ignored. For all other cases, the name corresponds to the parameter name used by the in property. param_in class-attribute \u00b6 param_in : str = Field ( alias = 'in' ) REQUIRED . The location of the parameter. Possible values are \"query\" , \"header\" , \"path\" or \"cookie\" . param_schema class-attribute \u00b6 param_schema : Optional [ Union [ Schema , Reference ]] = Field ( default = None , alias = 'schema' ) The schema defining the type used for the parameter. required class-attribute \u00b6 required : bool = False Determines whether this parameter is mandatory. If the parameter location is \"path\" , this property is REQUIRED and its value MUST be true . Otherwise, the property MAY be included and its default value is false . style class-attribute \u00b6 style : Optional [ str ] = None Describes how the parameter value will be serialized depending on the type of the parameter value. Default values (based on value of in ): for query - form ; for path - simple ; for header - simple ; for cookie - form .","title":"parameter"},{"location":"reference/pydantic_openapi_schema/v3_1_0/parameter/#pydantic_openapi_schema.v3_1_0.parameter.Parameter","text":"Bases: BaseModel Describes a single operation parameter. A unique parameter is defined by a combination of a name and location .","title":"Parameter"},{"location":"reference/pydantic_openapi_schema/v3_1_0/parameter/#pydantic_openapi_schema.v3_1_0.parameter.Parameter.allowEmptyValue","text":"allowEmptyValue : bool = False Sets the ability to pass empty-valued parameters. This is valid only for query parameters and allows sending a parameter with an empty value. Default value is false . If. style is used, and if behavior is n/a (cannot be serialized), the value of allowEmptyValue SHALL be ignored. Use of this property is NOT RECOMMENDED, as it is likely to be removed in a later revision. The rules for serialization of the parameter are specified in one of two ways. For simpler scenarios, a schema and style can describe the structure and syntax of the parameter.","title":"allowEmptyValue"},{"location":"reference/pydantic_openapi_schema/v3_1_0/parameter/#pydantic_openapi_schema.v3_1_0.parameter.Parameter.allowReserved","text":"allowReserved : bool = False Determines whether the parameter value SHOULD allow reserved characters, as defined by. RFC3986 :/?#[]@!$&'()*+,;= to be included without percent- encoding. This property only applies to parameters with an in value of query . The default value is false .","title":"allowReserved"},{"location":"reference/pydantic_openapi_schema/v3_1_0/parameter/#pydantic_openapi_schema.v3_1_0.parameter.Parameter.content","text":"content : Optional [ Dict [ str , MediaType ]] = None A map containing the representations for the parameter. The key is the media type and the value describes it. The map MUST only contain one entry.","title":"content"},{"location":"reference/pydantic_openapi_schema/v3_1_0/parameter/#pydantic_openapi_schema.v3_1_0.parameter.Parameter.deprecated","text":"deprecated : bool = False Specifies that a parameter is deprecated and SHOULD be transitioned out of usage. Default value is false .","title":"deprecated"},{"location":"reference/pydantic_openapi_schema/v3_1_0/parameter/#pydantic_openapi_schema.v3_1_0.parameter.Parameter.description","text":"description : Optional [ str ] = None A brief description of the parameter. This could contain examples of use. CommonMark syntax MAY be used for rich text representation.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/parameter/#pydantic_openapi_schema.v3_1_0.parameter.Parameter.example","text":"example : Optional [ Any ] = None Example of the parameter's potential value. The example SHOULD match the specified schema and encoding properties if present. The example field is mutually exclusive of the examples field. Furthermore, if referencing a schema that contains an example, the example value SHALL override the example provided by the schema. To represent examples of media types that cannot naturally be represented in JSON or YAML, a string value can contain the example with escaping where necessary.","title":"example"},{"location":"reference/pydantic_openapi_schema/v3_1_0/parameter/#pydantic_openapi_schema.v3_1_0.parameter.Parameter.examples","text":"examples : Optional [ Dict [ str , Union [ Example , Reference ]]] = None Examples of the parameter's potential value. Each example SHOULD contain a value in the correct format as specified in the parameter encoding. The examples field is mutually exclusive of the example field. Furthermore, if referencing a schema that contains an example, the examples value SHALL override the example provided by the schema. For more complex scenarios, the content property can define the media type and schema of the parameter. A parameter MUST contain either a schema property, or a content property, but not both. When example or examples are provided in conjunction with the schema object, the example MUST follow the prescribed serialization strategy for the parameter.","title":"examples"},{"location":"reference/pydantic_openapi_schema/v3_1_0/parameter/#pydantic_openapi_schema.v3_1_0.parameter.Parameter.explode","text":"explode : bool = False When this is true, parameter values of type array or object generate separate parameters for each value of the array or key-value pair of the map. For other types of parameters this property has no effect. When style is form , the default value is true . For all other styles, the default value is false .","title":"explode"},{"location":"reference/pydantic_openapi_schema/v3_1_0/parameter/#pydantic_openapi_schema.v3_1_0.parameter.Parameter.name","text":"name : str REQUIRED . The name of the parameter. Parameter names are case sensitive . If in is \"path\" , the name field MUST correspond to a template expression occurring within the path field in the Paths Object . See Path Templating for further information. If in is \"header\" and the name field is \"Accept\" , \"Content-Type\" or \"Authorization\" , the parameter definition SHALL be ignored. For all other cases, the name corresponds to the parameter name used by the in property.","title":"name"},{"location":"reference/pydantic_openapi_schema/v3_1_0/parameter/#pydantic_openapi_schema.v3_1_0.parameter.Parameter.param_in","text":"param_in : str = Field ( alias = 'in' ) REQUIRED . The location of the parameter. Possible values are \"query\" , \"header\" , \"path\" or \"cookie\" .","title":"param_in"},{"location":"reference/pydantic_openapi_schema/v3_1_0/parameter/#pydantic_openapi_schema.v3_1_0.parameter.Parameter.param_schema","text":"param_schema : Optional [ Union [ Schema , Reference ]] = Field ( default = None , alias = 'schema' ) The schema defining the type used for the parameter.","title":"param_schema"},{"location":"reference/pydantic_openapi_schema/v3_1_0/parameter/#pydantic_openapi_schema.v3_1_0.parameter.Parameter.required","text":"required : bool = False Determines whether this parameter is mandatory. If the parameter location is \"path\" , this property is REQUIRED and its value MUST be true . Otherwise, the property MAY be included and its default value is false .","title":"required"},{"location":"reference/pydantic_openapi_schema/v3_1_0/parameter/#pydantic_openapi_schema.v3_1_0.parameter.Parameter.style","text":"style : Optional [ str ] = None Describes how the parameter value will be serialized depending on the type of the parameter value. Default values (based on value of in ): for query - form ; for path - simple ; for header - simple ; for cookie - form .","title":"style"},{"location":"reference/pydantic_openapi_schema/v3_1_0/path_item/","text":"PathItem \u00b6 Bases: BaseModel Describes the operations available on a single path. A Path Item MAY be empty, due to ACL constraints . The path itself is still exposed to the documentation viewer but they will not know which operations and parameters are available. delete class-attribute \u00b6 delete : Optional [ Operation ] = None A definition of a DELETE operation on this path. description class-attribute \u00b6 description : Optional [ str ] = None An optional, string description, intended to apply to all operations in this path. CommonMark syntax MAY be used for rich text representation. get class-attribute \u00b6 get : Optional [ Operation ] = None A definition of a GET operation on this path. head class-attribute \u00b6 head : Optional [ Operation ] = None A definition of a HEAD operation on this path. options class-attribute \u00b6 options : Optional [ Operation ] = None A definition of a OPTIONS operation on this path. parameters class-attribute \u00b6 parameters : Optional [ List [ Union [ Parameter , Reference ]]] = None A list of parameters that are applicable for all the operations described under this path. These parameters can be overridden at the operation level, but cannot be removed there. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a name and. location . The list can use the Reference Object to link to parameters that are defined at the. OpenAPI Object's components/parameters . patch class-attribute \u00b6 patch : Optional [ Operation ] = None A definition of a PATCH operation on this path. post class-attribute \u00b6 post : Optional [ Operation ] = None A definition of a POST operation on this path. put class-attribute \u00b6 put : Optional [ Operation ] = None A definition of a PUT operation on this path. ref class-attribute \u00b6 ref : Optional [ str ] = Field ( default = None , alias = '$ref' ) Allows for an external definition of this path item. The referenced structure MUST be in the format of a Path Item Object . In case a Path Item Object field appears both in the defined object and the referenced object, the behavior is undefined. See the rules for resolving Relative References . servers class-attribute \u00b6 servers : Optional [ List [ Server ]] = None An alternative server array to service all operations in this path. summary class-attribute \u00b6 summary : Optional [ str ] = None An optional, string summary, intended to apply to all operations in this path. trace class-attribute \u00b6 trace : Optional [ Operation ] = None A definition of a TRACE operation on this path.","title":"path_item"},{"location":"reference/pydantic_openapi_schema/v3_1_0/path_item/#pydantic_openapi_schema.v3_1_0.path_item.PathItem","text":"Bases: BaseModel Describes the operations available on a single path. A Path Item MAY be empty, due to ACL constraints . The path itself is still exposed to the documentation viewer but they will not know which operations and parameters are available.","title":"PathItem"},{"location":"reference/pydantic_openapi_schema/v3_1_0/path_item/#pydantic_openapi_schema.v3_1_0.path_item.PathItem.delete","text":"delete : Optional [ Operation ] = None A definition of a DELETE operation on this path.","title":"delete"},{"location":"reference/pydantic_openapi_schema/v3_1_0/path_item/#pydantic_openapi_schema.v3_1_0.path_item.PathItem.description","text":"description : Optional [ str ] = None An optional, string description, intended to apply to all operations in this path. CommonMark syntax MAY be used for rich text representation.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/path_item/#pydantic_openapi_schema.v3_1_0.path_item.PathItem.get","text":"get : Optional [ Operation ] = None A definition of a GET operation on this path.","title":"get"},{"location":"reference/pydantic_openapi_schema/v3_1_0/path_item/#pydantic_openapi_schema.v3_1_0.path_item.PathItem.head","text":"head : Optional [ Operation ] = None A definition of a HEAD operation on this path.","title":"head"},{"location":"reference/pydantic_openapi_schema/v3_1_0/path_item/#pydantic_openapi_schema.v3_1_0.path_item.PathItem.options","text":"options : Optional [ Operation ] = None A definition of a OPTIONS operation on this path.","title":"options"},{"location":"reference/pydantic_openapi_schema/v3_1_0/path_item/#pydantic_openapi_schema.v3_1_0.path_item.PathItem.parameters","text":"parameters : Optional [ List [ Union [ Parameter , Reference ]]] = None A list of parameters that are applicable for all the operations described under this path. These parameters can be overridden at the operation level, but cannot be removed there. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a name and. location . The list can use the Reference Object to link to parameters that are defined at the. OpenAPI Object's components/parameters .","title":"parameters"},{"location":"reference/pydantic_openapi_schema/v3_1_0/path_item/#pydantic_openapi_schema.v3_1_0.path_item.PathItem.patch","text":"patch : Optional [ Operation ] = None A definition of a PATCH operation on this path.","title":"patch"},{"location":"reference/pydantic_openapi_schema/v3_1_0/path_item/#pydantic_openapi_schema.v3_1_0.path_item.PathItem.post","text":"post : Optional [ Operation ] = None A definition of a POST operation on this path.","title":"post"},{"location":"reference/pydantic_openapi_schema/v3_1_0/path_item/#pydantic_openapi_schema.v3_1_0.path_item.PathItem.put","text":"put : Optional [ Operation ] = None A definition of a PUT operation on this path.","title":"put"},{"location":"reference/pydantic_openapi_schema/v3_1_0/path_item/#pydantic_openapi_schema.v3_1_0.path_item.PathItem.ref","text":"ref : Optional [ str ] = Field ( default = None , alias = '$ref' ) Allows for an external definition of this path item. The referenced structure MUST be in the format of a Path Item Object . In case a Path Item Object field appears both in the defined object and the referenced object, the behavior is undefined. See the rules for resolving Relative References .","title":"ref"},{"location":"reference/pydantic_openapi_schema/v3_1_0/path_item/#pydantic_openapi_schema.v3_1_0.path_item.PathItem.servers","text":"servers : Optional [ List [ Server ]] = None An alternative server array to service all operations in this path.","title":"servers"},{"location":"reference/pydantic_openapi_schema/v3_1_0/path_item/#pydantic_openapi_schema.v3_1_0.path_item.PathItem.summary","text":"summary : Optional [ str ] = None An optional, string summary, intended to apply to all operations in this path.","title":"summary"},{"location":"reference/pydantic_openapi_schema/v3_1_0/path_item/#pydantic_openapi_schema.v3_1_0.path_item.PathItem.trace","text":"trace : Optional [ Operation ] = None A definition of a TRACE operation on this path.","title":"trace"},{"location":"reference/pydantic_openapi_schema/v3_1_0/paths/","text":"Paths module-attribute \u00b6 Paths = Dict [ str , PathItem ] Holds the relative paths to the individual endpoints and their operations. The path is appended to the URL from the. Server Object in order to construct the full URL. The Paths MAY be empty, due to Access Control List (ACL) constraints . Patterned Fields /{path}: PathItem A relative path to an individual endpoint. The field name MUST begin with a forward slash ( / ). The path is appended (no relative URL resolution) to the expanded URL from the Server Object 's url field in order to construct the full URL. Path templating is allowed. When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts. Templated paths with the same hierarchy but different templated names MUST NOT exist as they are identical. In case of ambiguous matching, it's up to the tooling to decide which one to use.","title":"paths"},{"location":"reference/pydantic_openapi_schema/v3_1_0/paths/#pydantic_openapi_schema.v3_1_0.paths.Paths","text":"Paths = Dict [ str , PathItem ] Holds the relative paths to the individual endpoints and their operations. The path is appended to the URL from the. Server Object in order to construct the full URL. The Paths MAY be empty, due to Access Control List (ACL) constraints . Patterned Fields /{path}: PathItem A relative path to an individual endpoint. The field name MUST begin with a forward slash ( / ). The path is appended (no relative URL resolution) to the expanded URL from the Server Object 's url field in order to construct the full URL. Path templating is allowed. When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts. Templated paths with the same hierarchy but different templated names MUST NOT exist as they are identical. In case of ambiguous matching, it's up to the tooling to decide which one to use.","title":"Paths"},{"location":"reference/pydantic_openapi_schema/v3_1_0/reference/","text":"Reference \u00b6 Bases: BaseModel A simple object to allow referencing other components in the OpenAPI document, internally and externally. The $ref string value contains a URI RFC3986 , which identifies the location of the value being referenced. See the rules for resolving Relative References . description class-attribute \u00b6 description : Optional [ str ] = None A description which by default SHOULD override that of the referenced component. CommonMark syntax MAY be used for rich text representation. If the referenced object-type does not allow a description field, then this field has no effect. ref class-attribute \u00b6 ref : str = Field ( alias = '$ref' ) REQUIRED . The reference identifier. This MUST be in the form of a URI. summary class-attribute \u00b6 summary : Optional [ str ] = None A short summary which by default SHOULD override that of the referenced component. If the referenced object-type does not allow a summary field, then this field has no effect.","title":"reference"},{"location":"reference/pydantic_openapi_schema/v3_1_0/reference/#pydantic_openapi_schema.v3_1_0.reference.Reference","text":"Bases: BaseModel A simple object to allow referencing other components in the OpenAPI document, internally and externally. The $ref string value contains a URI RFC3986 , which identifies the location of the value being referenced. See the rules for resolving Relative References .","title":"Reference"},{"location":"reference/pydantic_openapi_schema/v3_1_0/reference/#pydantic_openapi_schema.v3_1_0.reference.Reference.description","text":"description : Optional [ str ] = None A description which by default SHOULD override that of the referenced component. CommonMark syntax MAY be used for rich text representation. If the referenced object-type does not allow a description field, then this field has no effect.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/reference/#pydantic_openapi_schema.v3_1_0.reference.Reference.ref","text":"ref : str = Field ( alias = '$ref' ) REQUIRED . The reference identifier. This MUST be in the form of a URI.","title":"ref"},{"location":"reference/pydantic_openapi_schema/v3_1_0/reference/#pydantic_openapi_schema.v3_1_0.reference.Reference.summary","text":"summary : Optional [ str ] = None A short summary which by default SHOULD override that of the referenced component. If the referenced object-type does not allow a summary field, then this field has no effect.","title":"summary"},{"location":"reference/pydantic_openapi_schema/v3_1_0/request_body/","text":"RequestBody \u00b6 Bases: BaseModel Describes a single request body. content class-attribute \u00b6 content : Dict [ str , MediaType ] REQUIRED . The content of the request body. The key is a media type or media type range and the value describes it. For requests that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/* description class-attribute \u00b6 description : Optional [ str ] = None A brief description of the request body. This could contain examples of use. CommonMark syntax MAY be used for rich text representation. required class-attribute \u00b6 required : bool = False Determines if the request body is required in the request. Defaults to false .","title":"request_body"},{"location":"reference/pydantic_openapi_schema/v3_1_0/request_body/#pydantic_openapi_schema.v3_1_0.request_body.RequestBody","text":"Bases: BaseModel Describes a single request body.","title":"RequestBody"},{"location":"reference/pydantic_openapi_schema/v3_1_0/request_body/#pydantic_openapi_schema.v3_1_0.request_body.RequestBody.content","text":"content : Dict [ str , MediaType ] REQUIRED . The content of the request body. The key is a media type or media type range and the value describes it. For requests that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*","title":"content"},{"location":"reference/pydantic_openapi_schema/v3_1_0/request_body/#pydantic_openapi_schema.v3_1_0.request_body.RequestBody.description","text":"description : Optional [ str ] = None A brief description of the request body. This could contain examples of use. CommonMark syntax MAY be used for rich text representation.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/request_body/#pydantic_openapi_schema.v3_1_0.request_body.RequestBody.required","text":"required : bool = False Determines if the request body is required in the request. Defaults to false .","title":"required"},{"location":"reference/pydantic_openapi_schema/v3_1_0/response/","text":"Response \u00b6 Bases: BaseModel Describes a single response from an API Operation, including design- time, static links to operations based on the response. content class-attribute \u00b6 content : Optional [ Dict [ str , MediaType ]] = None A map containing descriptions of potential response payloads. The key is a media type or media type range and the value describes it. For responses that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/* description class-attribute \u00b6 description : str REQUIRED . A short description of the response. CommonMark syntax MAY be used for rich text representation. headers class-attribute \u00b6 headers : Optional [ Dict [ str , Union [ Header , Reference ]]] = None Maps a header name to its definition. RFC7230 states header names are case insensitive. If a response header is defined with the name \"Content-Type\" , it SHALL be ignored. links class-attribute \u00b6 links : Optional [ Dict [ str , Union [ Link , Reference ]]] = None A map of operations links that can be followed from the response. The key of the map is a short name for the link, following the naming constraints of the names for `Component Objects <https://spec.openapis.org/oas/v3.1.0#componentsObject).","title":"response"},{"location":"reference/pydantic_openapi_schema/v3_1_0/response/#pydantic_openapi_schema.v3_1_0.response.Response","text":"Bases: BaseModel Describes a single response from an API Operation, including design- time, static links to operations based on the response.","title":"Response"},{"location":"reference/pydantic_openapi_schema/v3_1_0/response/#pydantic_openapi_schema.v3_1_0.response.Response.content","text":"content : Optional [ Dict [ str , MediaType ]] = None A map containing descriptions of potential response payloads. The key is a media type or media type range and the value describes it. For responses that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*","title":"content"},{"location":"reference/pydantic_openapi_schema/v3_1_0/response/#pydantic_openapi_schema.v3_1_0.response.Response.description","text":"description : str REQUIRED . A short description of the response. CommonMark syntax MAY be used for rich text representation.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/response/#pydantic_openapi_schema.v3_1_0.response.Response.headers","text":"headers : Optional [ Dict [ str , Union [ Header , Reference ]]] = None Maps a header name to its definition. RFC7230 states header names are case insensitive. If a response header is defined with the name \"Content-Type\" , it SHALL be ignored.","title":"headers"},{"location":"reference/pydantic_openapi_schema/v3_1_0/response/#pydantic_openapi_schema.v3_1_0.response.Response.links","text":"links : Optional [ Dict [ str , Union [ Link , Reference ]]] = None A map of operations links that can be followed from the response. The key of the map is a short name for the link, following the naming constraints of the names for `Component Objects <https://spec.openapis.org/oas/v3.1.0#componentsObject).","title":"links"},{"location":"reference/pydantic_openapi_schema/v3_1_0/responses/","text":"Responses module-attribute \u00b6 Responses = Dict [ str , Union [ Response , Reference ]] A container for the expected responses of an operation. The container maps a HTTP response code to the expected response. The documentation is not necessarily expected to cover all possible HTTP response codes because they may not be known in advance. However, documentation is expected to cover a successful operation response and any known errors. The default MAY be used as a default response object for all HTTP codes that are not covered individually by the specification. The Responses Object MUST contain at least one response code, and it SHOULD be the response for a successful operation call. Fixed Fields default: Optional[Union[Response, Reference]] The documentation of responses other than the ones declared for specific HTTP response codes. Use this field to cover undeclared responses. A Reference Object can link to a response that the OpenAPI Object's components/responses section defines. Patterned Fields {httpStatusCode}: Optional[Union[Response, Reference]] Any HTTP status code can be used as the property name, but only one property per code, to describe the expected response for that HTTP status code. A Reference Object can link to a response that is defined in the OpenAPI Object's components/responses section. This field MUST be enclosed in quotation marks (for example, \"200\") for compatibility between JSON and YAML. To define a range of response codes, this field MAY contain the uppercase wildcard character X . For example, 2XX represents all response codes between [200-299] . Only the following range definitions are allowed: 1XX , 2XX , 3XX , 4XX , and 5XX . If a response is defined using an explicit code, the explicit code definition takes precedence over the range definition for that code.","title":"responses"},{"location":"reference/pydantic_openapi_schema/v3_1_0/responses/#pydantic_openapi_schema.v3_1_0.responses.Responses","text":"Responses = Dict [ str , Union [ Response , Reference ]] A container for the expected responses of an operation. The container maps a HTTP response code to the expected response. The documentation is not necessarily expected to cover all possible HTTP response codes because they may not be known in advance. However, documentation is expected to cover a successful operation response and any known errors. The default MAY be used as a default response object for all HTTP codes that are not covered individually by the specification. The Responses Object MUST contain at least one response code, and it SHOULD be the response for a successful operation call. Fixed Fields default: Optional[Union[Response, Reference]] The documentation of responses other than the ones declared for specific HTTP response codes. Use this field to cover undeclared responses. A Reference Object can link to a response that the OpenAPI Object's components/responses section defines. Patterned Fields {httpStatusCode}: Optional[Union[Response, Reference]] Any HTTP status code can be used as the property name, but only one property per code, to describe the expected response for that HTTP status code. A Reference Object can link to a response that is defined in the OpenAPI Object's components/responses section. This field MUST be enclosed in quotation marks (for example, \"200\") for compatibility between JSON and YAML. To define a range of response codes, this field MAY contain the uppercase wildcard character X . For example, 2XX represents all response codes between [200-299] . Only the following range definitions are allowed: 1XX , 2XX , 3XX , 4XX , and 5XX . If a response is defined using an explicit code, the explicit code definition takes precedence over the range definition for that code.","title":"Responses"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/","text":"Schema \u00b6 Bases: BaseModel The Schema Object allows the definition of input and output data types. These types can be objects, but also primitives and arrays. This object is a superset of the JSON Schema Specification Draft 2020-12 . For more information about the properties, see JSON Schema Core and JSON Schema Validation . Unless stated otherwise, the property definitions follow those of JSON Schema and do not add any additional semantics. Where JSON Schema indicates that behavior is defined by the application (e.g. for annotations), OAS also defers the definition of semantics to the application consuming the OpenAPI document. The following properties are taken directly from the JSON Schema Core and follow the same specifications: additionalProperties class-attribute \u00b6 additionalProperties : Optional [ Union [ Reference , Schema , bool ]] = None The value of \"additionalProperties\" MUST be a valid JSON Schema. The behavior of this keyword depends on the presence and annotation results of \"properties\" and \"patternProperties\" within the same schema object. Validation with \"additionalProperties\" applies only to the child values of instance names that do not appear in the annotation results of either \"properties\" or \"patternProperties\". For all such properties, validation succeeds if the child instance validates against the \"additionalProperties\" schema. The annotation result of this keyword is the set of instance property names validated by this keyword's subschema. Omitting this keyword has the same assertion behavior as an empty schema. Implementations MAY choose to implement or optimize this keyword in another way that produces the same effect, such as by directly checking the names in \"properties\" and the patterns in \"patternProperties\" against the instance property set. Implementations that do not support annotation collection MUST do so. allOf class-attribute \u00b6 allOf : Optional [ List [ Union [ Reference , Schema ]]] = None This keyword's value MUST be a non-empty array. Each item of the array MUST be a valid JSON Schema. An instance validates successfully against this keyword if it validates successfully against all schemas defined by this keyword's value. anyOf class-attribute \u00b6 anyOf : Optional [ List [ Union [ Reference , Schema ]]] = None This keyword's value MUST be a non-empty array. Each item of the array MUST be a valid JSON Schema. An instance validates successfully against this keyword if it validates successfully against at least one schema defined by this keyword's value. Note that when annotations are being collected, all subschemas MUST be examined so that annotations are collected from each subschema that validates successfully. const class-attribute \u00b6 const : Optional [ Any ] = None The value of this keyword MAY be of any type, including null. Use of this keyword is functionally equivalent to an \"enum\" (Section 6.1.2) with a single value. An instance validates successfully against this keyword if its value is equal to the value of the keyword. contains class-attribute \u00b6 contains : Optional [ Union [ Reference , Schema ]] = None The value of this keyword MUST be a valid JSON Schema. An array instance is valid against \"contains\" if at least one of its elements is valid against the given schema. The subschema MUST be applied to every array element even after the first match has been found, in order to collect annotations for use by other keywords. This is to ensure that all possible annotations are collected. Logically, the validation result of applying the value subschema to each item in the array MUST be ORed with \"false\", resulting in an overall validation result. This keyword produces an annotation value which is an array of the indexes to which this keyword validates successfully when applying its subschema, in ascending order. The value MAY be a boolean \"true\" if the subschema validates successfully when applied to every index of the instance. The annotation MUST be present if the instance array to which this keyword's schema applies is empty. contentEncoding class-attribute \u00b6 contentEncoding : Optional [ str ] = None If the instance value is a string, this property defines that the string SHOULD be interpreted as binary data and decoded using the encoding named by this property. Possible values indicating base 16, 32, and 64 encodings with several variations are listed in RFC 4648 [RFC4648]. Additionally, sections 6.7 and 6.8 of RFC 2045 [RFC2045] provide encodings used in MIME. As \"base64\" is defined in both RFCs, the definition from RFC 4648 SHOULD be assumed unless the string is specifically intended for use in a MIME context. Note that all of these encodings result in strings consisting only of 7-bit ASCII characters. Therefore, this keyword has no meaning for strings containing characters outside of that range. If this keyword is absent, but \"contentMediaType\" is present, this indicates that the encoding is the identity encoding, meaning that no transformation was needed in order to represent the content in a UTF-8 string. contentMediaType class-attribute \u00b6 contentMediaType : Optional [ str ] = None If the instance is a string, this property indicates the media type of the contents of the string. If \"contentEncoding\" is present, this property describes the decoded string. The value of this property MUST be a string, which MUST be a media type, as defined by RFC 2046 [RFC2046]. contentSchema class-attribute \u00b6 contentSchema : Optional [ Union [ Reference , Schema ]] = None If the instance is a string, and if \"contentMediaType\" is present, this property contains a schema which describes the structure of the string. This keyword MAY be used with any media type that can be mapped into JSON Schema's data model. The value of this property MUST be a valid JSON schema. It SHOULD be ignored if \"contentMediaType\" is not present. default class-attribute \u00b6 default : Optional [ Any ] = None There are no restrictions placed on the value of this keyword. When multiple occurrences of this keyword are applicable to a single sub- instance, implementations SHOULD remove duplicates. This keyword can be used to supply a default JSON value associated with a particular schema. It is RECOMMENDED that a default value be valid against the associated schema. dependentRequired class-attribute \u00b6 dependentRequired : Optional [ Dict [ str , List [ str ]]] = None The value of this keyword MUST be an object. Properties in this object, if any, MUST be arrays. Elements in each array, if any, MUST be strings, and MUST be unique. This keyword specifies properties that are required if a specific other property is present. Their requirement is dependent on the presence of the other property. Validation succeeds if, for each name that appears in both the instance and as a name within this keyword's value, every item in the corresponding array is also the name of a property in the instance. Omitting this keyword has the same behavior as an empty object. dependentSchemas class-attribute \u00b6 dependentSchemas : Optional [ Dict [ str , Union [ Reference , Schema ]]] = None This keyword specifies subschemas that are evaluated if the instance is an object and contains a certain property. This keyword's value MUST be an object. Each value in the object MUST be a valid JSON Schema. If the object key is a property in the instance, the entire instance must validate against the subschema. Its use is dependent on the presence of the property. Omitting this keyword has the same behavior as an empty object. deprecated class-attribute \u00b6 deprecated : Optional [ bool ] = None The value of this keyword MUST be a boolean. When multiple occurrences of this keyword are applicable to a single sub-instance, applications SHOULD consider the instance location to be deprecated if any occurrence specifies a true value. If \"deprecated\" has a value of boolean true, it indicates that applications SHOULD refrain from usage of the declared property. It MAY mean the property is going to be removed in the future. A root schema containing \"deprecated\" with a value of true indicates that the entire resource being described MAY be removed in the future. The \"deprecated\" keyword applies to each instance location to which the schema object containing the keyword successfully applies. This can result in scenarios where every array item or object property is deprecated even though the containing array or object is not. Omitting this keyword has the same behavior as a value of false. description class-attribute \u00b6 description : Optional [ str ] = None From OpenAPI: CommonMark syntax MAY be used for rich text representation. From JSON Schema: The value \"description\" MUST be a string. The description can be used to decorate a user interface with information about the data produced by this user interface. A description will provide explanation about the purpose of the instance described by this schema. discriminator class-attribute \u00b6 discriminator : Optional [ Discriminator ] = None Adds support for polymorphism. The discriminator is an object name that is used to differentiate between other schemas which may satisfy the payload description. See Composition and Inheritance for more details. enum class-attribute \u00b6 enum : Optional [ List [ Any ]] = Field ( default = None , min_items = 1 ) The value of this keyword MUST be an array. This array SHOULD have at least one element. Elements in the array SHOULD be unique. An instance validates successfully against this keyword if its value is equal to one of the elements in this keyword's array value. Elements in the array might be of any type, including null. example class-attribute \u00b6 example : Optional [ Any ] = None A free-form property to include an example of an instance for this schema. To represent examples that cannot be naturally represented in JSON or YAML, a string value can be used to contain the example with escaping where necessary. Deprecated: The example property has been deprecated in favor of the JSON Schema examples keyword. Use of example is discouraged, and later versions of this specification may remove it. examples class-attribute \u00b6 examples : Optional [ List [ Any ]] = None The value of this keyword MUST be an array. There are no restrictions placed on the values within the array. When multiple occurrences of this keyword are applicable to a single sub-instance, implementations MUST provide a flat array of all values rather than an array of arrays. This keyword can be used to provide sample JSON values associated with a particular schema, for the purpose of illustrating usage. It is RECOMMENDED that these values be valid against the associated schema. Implementations MAY use the value(s) of \"default\", if present, as an additional example. If \"examples\" is absent, \"default\" MAY still be used in this manner. The OpenAPI Specification's base vocabulary is comprised of the following keywords: exclusiveMaximum class-attribute \u00b6 exclusiveMaximum : Optional [ float ] = None The value of \"exclusiveMaximum\" MUST be a number, representing an exclusive upper limit for a numeric instance. If the instance is a number, then the instance is valid only if it has a value strictly less than (not equal to) \"exclusiveMaximum\". exclusiveMinimum class-attribute \u00b6 exclusiveMinimum : Optional [ float ] = None The value of \"exclusiveMinimum\" MUST be a number, representing an exclusive lower limit for a numeric instance. If the instance is a number, then the instance is valid only if it has a value strictly greater than (not equal to) \"exclusiveMinimum\". externalDocs class-attribute \u00b6 externalDocs : Optional [ ExternalDocumentation ] = None Additional external documentation for this schema. items class-attribute \u00b6 items : Optional [ Union [ Reference , Schema ]] = None The value of \"items\" MUST be a valid JSON Schema. This keyword applies its subschema to all instance elements at indexes greater than the length of the \"prefixItems\" array in the same schema object, as reported by the annotation result of that \"prefixItems\" keyword. If no such annotation result exists, \"items\" applies its subschema to all instance array elements. [[CREF11: Note that the behavior of \"items\" without \"prefixItems\" is identical to that of the schema form of \"items\" in prior drafts. When \"prefixItems\" is present, the behavior of \"items\" is identical to the former \"additionalItems\" keyword. ]] If the \"items\" subschema is applied to any positions within the instance array, it produces an annotation result of boolean true, indicating that all remaining array elements have been evaluated against this keyword's subschema. Omitting this keyword has the same assertion behavior as an empty schema. Implementations MAY choose to implement or optimize this keyword in another way that produces the same effect, such as by directly checking for the presence and size of a \"prefixItems\" array. Implementations that do not support annotation collection MUST do so. maxContains class-attribute \u00b6 maxContains : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. If \"contains\" is not present within the same schema object, then this keyword has no effect. An instance array is valid against \"maxContains\" in two ways, depending on the form of the annotation result of an adjacent \"contains\" [json-schema] keyword. The first way is if the annotation result is an array and the length of that array is less than or equal to the \"maxContains\" value. The second way is if the annotation result is a boolean \"true\" and the instance array length is less than or equal to the \"maxContains\" value. maxItems class-attribute \u00b6 maxItems : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. An array instance is valid against \"maxItems\" if its size is less than, or equal to, the value of this keyword. maxLength class-attribute \u00b6 maxLength : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. A string instance is valid against this keyword if its length is less than, or equal to, the value of this keyword. The length of a string instance is defined as the number of its characters as defined by RFC 8259 [RFC8259]. maxProperties class-attribute \u00b6 maxProperties : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. An object instance is valid against \"maxProperties\" if its number of properties is less than, or equal to, the value of this keyword. maximum class-attribute \u00b6 maximum : Optional [ float ] = None The value of \"maximum\" MUST be a number, representing an inclusive upper limit for a numeric instance. If the instance is a number, then this keyword validates only if the instance is less than or exactly equal to \"maximum\". minContains class-attribute \u00b6 minContains : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. If \"contains\" is not present within the same schema object, then this keyword has no effect. An instance array is valid against \"minContains\" in two ways, depending on the form of the annotation result of an adjacent \"contains\" [json-schema] keyword. The first way is if the annotation result is an array and the length of that array is greater than or equal to the \"minContains\" value. The second way is if the annotation result is a boolean \"true\" and the instance array length is greater than or equal to the \"minContains\" value. A value of 0 is allowed, but is only useful for setting a range of occurrences from 0 to the value of \"maxContains\". A value of 0 with no \"maxContains\" causes \"contains\" to always pass validation. Omitting this keyword has the same behavior as a value of 1. minItems class-attribute \u00b6 minItems : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. An array instance is valid against \"minItems\" if its size is greater than, or equal to, the value of this keyword. Omitting this keyword has the same behavior as a value of 0. minLength class-attribute \u00b6 minLength : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. A string instance is valid against this keyword if its length is greater than, or equal to, the value of this keyword. The length of a string instance is defined as the number of its characters as defined by RFC 8259 [RFC8259]. Omitting this keyword has the same behavior as a value of 0. minProperties class-attribute \u00b6 minProperties : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. An object instance is valid against \"minProperties\" if its number of properties is greater than, or equal to, the value of this keyword. Omitting this keyword has the same behavior as a value of 0. minimum class-attribute \u00b6 minimum : Optional [ float ] = None The value of \"minimum\" MUST be a number, representing an inclusive lower limit for a numeric instance. If the instance is a number, then this keyword validates only if the instance is greater than or exactly equal to \"minimum\". multipleOf class-attribute \u00b6 multipleOf : Optional [ float ] = Field ( default = None , gt = 0.0 ) The value of \"multipleOf\" MUST be a number, strictly greater than 0. A numeric instance is only valid if division by this keyword's value results in an integer. oneOf class-attribute \u00b6 oneOf : Optional [ List [ Union [ Reference , Schema ]]] = None This keyword's value MUST be a non-empty array. Each item of the array MUST be a valid JSON Schema. An instance validates successfully against this keyword if it validates successfully against exactly one schema defined by this keyword's value. pattern class-attribute \u00b6 pattern : Optional [ str ] = None The value of this keyword MUST be a string. This string SHOULD be a valid regular expression, according to the ECMA-262 regular expression dialect. A string instance is considered valid if the regular expression matches the instance successfully. Recall: regular expressions are not implicitly anchored. patternProperties class-attribute \u00b6 patternProperties : Optional [ Dict [ str , Union [ Reference , Schema ]]] = None The value of \"patternProperties\" MUST be an object. Each property name of this object SHOULD be a valid regular expression, according to the ECMA-262 regular expression dialect. Each property value of this object MUST be a valid JSON Schema. Validation succeeds if, for each instance name that matches any regular expressions that appear as a property name in this keyword's value, the child instance for that name successfully validates against each schema that corresponds to a matching regular expression. The annotation result of this keyword is the set of instance property names matched by this keyword. Omitting this keyword has the same assertion behavior as an empty object. prefixItems class-attribute \u00b6 prefixItems : Optional [ List [ Union [ Reference , Schema ]]] = None The value of \"prefixItems\" MUST be a non-empty array of valid JSON Schemas. Validation succeeds if each element of the instance validates against the schema at the same position, if any. This keyword does not constrain the length of the array. If the array is longer than this keyword's value, this keyword validates only the prefix of matching length. This keyword produces an annotation value which is the largest index to which this keyword applied a subschema. The value MAY be a boolean true if a subschema was applied to every index of the instance, such as is produced by the \"items\" keyword. This annotation affects the behavior of \"items\" and \"unevaluatedItems\". Omitting this keyword has the same assertion behavior as an empty array. properties class-attribute \u00b6 properties : Optional [ Dict [ str , Union [ Reference , Schema ]]] = None The value of \"properties\" MUST be an object. Each value of this object MUST be a valid JSON Schema. Validation succeeds if, for each name that appears in both the instance and as a name within this keyword's value, the child instance for that name successfully validates against the corresponding schema. The annotation result of this keyword is the set of instance property names matched by this keyword. Omitting this keyword has the same assertion behavior as an empty object. propertyNames class-attribute \u00b6 propertyNames : Optional [ Union [ Reference , Schema ]] = None The value of \"propertyNames\" MUST be a valid JSON Schema. If the instance is an object, this keyword validates if every property name in the instance validates against the provided schema. Note the property name that the schema is testing will always be a string. Omitting this keyword has the same behavior as an empty schema. readOnly class-attribute \u00b6 readOnly : Optional [ bool ] = None The value of \"readOnly\" MUST be a boolean. When multiple occurrences of this keyword are applicable to a single sub-instance, the resulting behavior SHOULD be as for a true value if any occurrence specifies a true value, and SHOULD be as for a false value otherwise. If \"readOnly\" has a value of boolean true, it indicates that the value of the instance is managed exclusively by the owning authority, and attempts by an application to modify the value of this property are expected to be ignored or rejected by that owning authority. An instance document that is marked as \"readOnly\" for the entire document MAY be ignored if sent to the owning authority, or MAY result in an error, at the authority's discretion. For example, \"readOnly\" would be used to mark a database-generated serial number as read-only, while \"writeOnly\" would be used to mark a password input field. This keyword can be used to assist in user interface instance generation. In particular, an application MAY choose to use a widget that hides input values as they are typed for write-only fields. Omitting these keywords has the same behavior as values of false. required class-attribute \u00b6 required : Optional [ List [ str ]] = None The value of this keyword MUST be an array. Elements of this array, if any, MUST be strings, and MUST be unique. An object instance is valid against this keyword if every item in the array is the name of a property in the instance. Omitting this keyword has the same behavior as an empty array. schema_else class-attribute \u00b6 schema_else : Optional [ Union [ Reference , Schema ]] = Field ( default = None , alias = 'else' ) This keyword's value MUST be a valid JSON Schema. When \"if\" is present, and the instance fails to validate against its subschema, then validation succeeds against this keyword if the instance successfully validates against this keyword's subschema. This keyword has no effect when \"if\" is absent, or when the instance successfully validates against its subschema. Implementations MUST NOT evaluate the instance against this keyword, for either validation or annotation collection purposes, in such cases. schema_format class-attribute \u00b6 schema_format : Optional [ str ] = Field ( default = None , alias = 'format' ) From OpenAPI: See [Data Type Formats<https://spec.openapis.org/oas/v3.1.0#dataTypeFormat) for further details. While relying on JSON Schema's defined formats, the OAS offers a few additional predefined formats. From JSON Schema: Structural validation alone may be insufficient to allow an application to correctly utilize certain values. The \"format\" annotation keyword is defined to allow schema authors to convey semantic information for a fixed subset of values which are accurately described by authoritative resources, be they RFCs or other external specifications. The value of this keyword is called a format attribute. It MUST be a string. A format attribute can generally only validate a given set of instance types. If the type of the instance to validate is not in this set, validation for this format attribute and instance SHOULD succeed. All format attributes defined in this section apply to strings, but a format attribute can be specified to apply to any instance types defined in the data model defined in the core JSON Schema. [json-schema] [[CREF1: Note that the \"type\" keyword in this specification defines an \"integer\" type which is not part of the data model. Therefore a format attribute can be limited to numbers, but not specifically to integers. However, a numeric format can be used alongside the \"type\" keyword with a value of \"integer\", or could be explicitly defined to always pass if the number is not an integer, which produces essentially the same behavior as only applying to integers. ]] schema_if class-attribute \u00b6 schema_if : Optional [ Union [ Reference , Schema ]] = Field ( default = None , alias = 'if' ) This keyword's value MUST be a valid JSON Schema. This validation outcome of this keyword's subschema has no direct effect on the overall validation result. Rather, it controls which of the \"then\" or \"else\" keywords are evaluated. Instances that successfully validate against this keyword's subschema MUST also be valid against the subschema value of the \"then\" keyword, if present. Instances that fail to validate against this keyword's subschema MUST also be valid against the subschema value of the \"else\" keyword, if present. If annotations (Section 7.7) are being collected, they are collected from this keyword's subschema in the usual way, including when the keyword is present without either \"then\" or \"else\". schema_not class-attribute \u00b6 schema_not : Optional [ Union [ Reference , Schema ]] = Field ( default = None , alias = 'not' ) This keyword's value MUST be a valid JSON Schema. An instance is valid against this keyword if it fails to validate successfully against the schema defined by this keyword. then class-attribute \u00b6 then : Optional [ Union [ Reference , Schema ]] = None This keyword's value MUST be a valid JSON Schema. When \"if\" is present, and the instance successfully validates against its subschema, then validation succeeds against this keyword if the instance also successfully validates against this keyword's subschema. This keyword has no effect when \"if\" is absent, or when the instance fails to validate against its subschema. Implementations MUST NOT evaluate the instance against this keyword, for either validation or annotation collection purposes, in such cases. title class-attribute \u00b6 title : Optional [ str ] = None The value of \"title\" MUST be a string. The title can be used to decorate a user interface with information about the data produced by this user interface. A title will preferably be short. type class-attribute \u00b6 type : Optional [ Union [ str , List [ str ]]] = None The value of this keyword MUST be either a string or an array. If it is an array, elements of the array MUST be strings and MUST be unique. String values MUST be one of the six primitive types (\"null\", \"boolean\", \"object\", \"array\", \"number\", or \"string\"), or \"integer\" which matches any number with a zero fractional part. An instance validates if and only if the instance is in any of the sets listed for this keyword. unevaluatedItems class-attribute \u00b6 unevaluatedItems : Optional [ Union [ Reference , Schema ]] = None The value of \"unevaluatedItems\" MUST be a valid JSON Schema. The behavior of this keyword depends on the annotation results of adjacent keywords that apply to the instance location being validated. Specifically, the annotations from \"prefixItems\", \"items\", and \"contains\", which can come from those keywords when they are adjacent to the \"unevaluatedItems\" keyword. Those three annotations, as well as \"unevaluatedItems\", can also result from any and all adjacent in-place applicator (Section 10.2) keywords. This includes but is not limited to the in-place applicators defined in this document. If no relevant annotations are present, the \"unevaluatedItems\" subschema MUST be applied to all locations in the array. If a boolean true value is present from any of the relevant annotations, \"unevaluatedItems\" MUST be ignored. Otherwise, the subschema MUST be applied to any index greater than the largest annotation value for \"prefixItems\", which does not appear in any annotation value for \"contains\". This means that \"prefixItems\", \"items\", \"contains\", and all in-place applicators MUST be evaluated before this keyword can be evaluated. Authors of extension keywords MUST NOT define an in-place applicator that would need to be evaluated after this keyword. If the \"unevaluatedItems\" subschema is applied to any positions within the instance array, it produces an annotation result of boolean true, analogous to the behavior of \"items\". Omitting this keyword has the same assertion behavior as an empty schema. unevaluatedProperties class-attribute \u00b6 unevaluatedProperties : Optional [ Union [ Reference , Schema ]] = None The value of \"unevaluatedProperties\" MUST be a valid JSON Schema. The behavior of this keyword depends on the annotation results of adjacent keywords that apply to the instance location being validated. Specifically, the annotations from \"properties\", \"patternProperties\", and \"additionalProperties\", which can come from those keywords when they are adjacent to the \"unevaluatedProperties\" keyword. Those three annotations, as well as \"unevaluatedProperties\", can also result from any and all adjacent in-place applicator (Section 10.2) keywords. This includes but is not limited to the in-place applicators defined in this document. Validation with \"unevaluatedProperties\" applies only to the child values of instance names that do not appear in the \"properties\", \"patternProperties\", \"additionalProperties\", or \"unevaluatedProperties\" annotation results that apply to the instance location being validated. For all such properties, validation succeeds if the child instance validates against the \"unevaluatedProperties\" schema. This means that \"properties\", \"patternProperties\", \"additionalProperties\", and all in-place applicators MUST be evaluated before this keyword can be evaluated. Authors of extension keywords MUST NOT define an in-place applicator that would need to be evaluated after this keyword. The annotation result of this keyword is the set of instance property names validated by this keyword's subschema. Omitting this keyword has the same assertion behavior as an empty schema. The following properties are taken directly from the JSON Schema Validation and follow the same specifications: uniqueItems class-attribute \u00b6 uniqueItems : Optional [ bool ] = None The value of this keyword MUST be a boolean. If this keyword has boolean value false, the instance validates successfully. If it has boolean value true, the instance validates successfully if all of its elements are unique. Omitting this keyword has the same behavior as a value of false. writeOnly class-attribute \u00b6 writeOnly : Optional [ bool ] = None The value of \"writeOnly\" MUST be a boolean. When multiple occurrences of this keyword are applicable to a single sub-instance, the resulting behavior SHOULD be as for a true value if any occurrence specifies a true value, and SHOULD be as for a false value otherwise. If \"writeOnly\" has a value of boolean true, it indicates that the value is never present when the instance is retrieved from the owning authority. It can be present when sent to the owning authority to update or create the document (or the resource it represents), but it will not be included in any updated or newly created version of the instance. An instance document that is marked as \"writeOnly\" for the entire document MAY be returned as a blank document of some sort, or MAY produce an error upon retrieval, or have the retrieval request ignored, at the authority's discretion. For example, \"readOnly\" would be used to mark a database-generated serial number as read-only, while \"writeOnly\" would be used to mark a password input field. This keyword can be used to assist in user interface instance generation. In particular, an application MAY choose to use a widget that hides input values as they are typed for write-only fields. Omitting these keywords has the same behavior as values of false. xml class-attribute \u00b6 xml : Optional [ XML ] = None This MAY be used only on properties schemas. It has no effect on root schemas. Adds additional metadata to describe the XML representation of this property.","title":"schema"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema","text":"Bases: BaseModel The Schema Object allows the definition of input and output data types. These types can be objects, but also primitives and arrays. This object is a superset of the JSON Schema Specification Draft 2020-12 . For more information about the properties, see JSON Schema Core and JSON Schema Validation . Unless stated otherwise, the property definitions follow those of JSON Schema and do not add any additional semantics. Where JSON Schema indicates that behavior is defined by the application (e.g. for annotations), OAS also defers the definition of semantics to the application consuming the OpenAPI document. The following properties are taken directly from the JSON Schema Core and follow the same specifications:","title":"Schema"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.additionalProperties","text":"additionalProperties : Optional [ Union [ Reference , Schema , bool ]] = None The value of \"additionalProperties\" MUST be a valid JSON Schema. The behavior of this keyword depends on the presence and annotation results of \"properties\" and \"patternProperties\" within the same schema object. Validation with \"additionalProperties\" applies only to the child values of instance names that do not appear in the annotation results of either \"properties\" or \"patternProperties\". For all such properties, validation succeeds if the child instance validates against the \"additionalProperties\" schema. The annotation result of this keyword is the set of instance property names validated by this keyword's subschema. Omitting this keyword has the same assertion behavior as an empty schema. Implementations MAY choose to implement or optimize this keyword in another way that produces the same effect, such as by directly checking the names in \"properties\" and the patterns in \"patternProperties\" against the instance property set. Implementations that do not support annotation collection MUST do so.","title":"additionalProperties"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.allOf","text":"allOf : Optional [ List [ Union [ Reference , Schema ]]] = None This keyword's value MUST be a non-empty array. Each item of the array MUST be a valid JSON Schema. An instance validates successfully against this keyword if it validates successfully against all schemas defined by this keyword's value.","title":"allOf"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.anyOf","text":"anyOf : Optional [ List [ Union [ Reference , Schema ]]] = None This keyword's value MUST be a non-empty array. Each item of the array MUST be a valid JSON Schema. An instance validates successfully against this keyword if it validates successfully against at least one schema defined by this keyword's value. Note that when annotations are being collected, all subschemas MUST be examined so that annotations are collected from each subschema that validates successfully.","title":"anyOf"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.const","text":"const : Optional [ Any ] = None The value of this keyword MAY be of any type, including null. Use of this keyword is functionally equivalent to an \"enum\" (Section 6.1.2) with a single value. An instance validates successfully against this keyword if its value is equal to the value of the keyword.","title":"const"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.contains","text":"contains : Optional [ Union [ Reference , Schema ]] = None The value of this keyword MUST be a valid JSON Schema. An array instance is valid against \"contains\" if at least one of its elements is valid against the given schema. The subschema MUST be applied to every array element even after the first match has been found, in order to collect annotations for use by other keywords. This is to ensure that all possible annotations are collected. Logically, the validation result of applying the value subschema to each item in the array MUST be ORed with \"false\", resulting in an overall validation result. This keyword produces an annotation value which is an array of the indexes to which this keyword validates successfully when applying its subschema, in ascending order. The value MAY be a boolean \"true\" if the subschema validates successfully when applied to every index of the instance. The annotation MUST be present if the instance array to which this keyword's schema applies is empty.","title":"contains"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.contentEncoding","text":"contentEncoding : Optional [ str ] = None If the instance value is a string, this property defines that the string SHOULD be interpreted as binary data and decoded using the encoding named by this property. Possible values indicating base 16, 32, and 64 encodings with several variations are listed in RFC 4648 [RFC4648]. Additionally, sections 6.7 and 6.8 of RFC 2045 [RFC2045] provide encodings used in MIME. As \"base64\" is defined in both RFCs, the definition from RFC 4648 SHOULD be assumed unless the string is specifically intended for use in a MIME context. Note that all of these encodings result in strings consisting only of 7-bit ASCII characters. Therefore, this keyword has no meaning for strings containing characters outside of that range. If this keyword is absent, but \"contentMediaType\" is present, this indicates that the encoding is the identity encoding, meaning that no transformation was needed in order to represent the content in a UTF-8 string.","title":"contentEncoding"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.contentMediaType","text":"contentMediaType : Optional [ str ] = None If the instance is a string, this property indicates the media type of the contents of the string. If \"contentEncoding\" is present, this property describes the decoded string. The value of this property MUST be a string, which MUST be a media type, as defined by RFC 2046 [RFC2046].","title":"contentMediaType"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.contentSchema","text":"contentSchema : Optional [ Union [ Reference , Schema ]] = None If the instance is a string, and if \"contentMediaType\" is present, this property contains a schema which describes the structure of the string. This keyword MAY be used with any media type that can be mapped into JSON Schema's data model. The value of this property MUST be a valid JSON schema. It SHOULD be ignored if \"contentMediaType\" is not present.","title":"contentSchema"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.default","text":"default : Optional [ Any ] = None There are no restrictions placed on the value of this keyword. When multiple occurrences of this keyword are applicable to a single sub- instance, implementations SHOULD remove duplicates. This keyword can be used to supply a default JSON value associated with a particular schema. It is RECOMMENDED that a default value be valid against the associated schema.","title":"default"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.dependentRequired","text":"dependentRequired : Optional [ Dict [ str , List [ str ]]] = None The value of this keyword MUST be an object. Properties in this object, if any, MUST be arrays. Elements in each array, if any, MUST be strings, and MUST be unique. This keyword specifies properties that are required if a specific other property is present. Their requirement is dependent on the presence of the other property. Validation succeeds if, for each name that appears in both the instance and as a name within this keyword's value, every item in the corresponding array is also the name of a property in the instance. Omitting this keyword has the same behavior as an empty object.","title":"dependentRequired"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.dependentSchemas","text":"dependentSchemas : Optional [ Dict [ str , Union [ Reference , Schema ]]] = None This keyword specifies subschemas that are evaluated if the instance is an object and contains a certain property. This keyword's value MUST be an object. Each value in the object MUST be a valid JSON Schema. If the object key is a property in the instance, the entire instance must validate against the subschema. Its use is dependent on the presence of the property. Omitting this keyword has the same behavior as an empty object.","title":"dependentSchemas"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.deprecated","text":"deprecated : Optional [ bool ] = None The value of this keyword MUST be a boolean. When multiple occurrences of this keyword are applicable to a single sub-instance, applications SHOULD consider the instance location to be deprecated if any occurrence specifies a true value. If \"deprecated\" has a value of boolean true, it indicates that applications SHOULD refrain from usage of the declared property. It MAY mean the property is going to be removed in the future. A root schema containing \"deprecated\" with a value of true indicates that the entire resource being described MAY be removed in the future. The \"deprecated\" keyword applies to each instance location to which the schema object containing the keyword successfully applies. This can result in scenarios where every array item or object property is deprecated even though the containing array or object is not. Omitting this keyword has the same behavior as a value of false.","title":"deprecated"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.description","text":"description : Optional [ str ] = None From OpenAPI: CommonMark syntax MAY be used for rich text representation. From JSON Schema: The value \"description\" MUST be a string. The description can be used to decorate a user interface with information about the data produced by this user interface. A description will provide explanation about the purpose of the instance described by this schema.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.discriminator","text":"discriminator : Optional [ Discriminator ] = None Adds support for polymorphism. The discriminator is an object name that is used to differentiate between other schemas which may satisfy the payload description. See Composition and Inheritance for more details.","title":"discriminator"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.enum","text":"enum : Optional [ List [ Any ]] = Field ( default = None , min_items = 1 ) The value of this keyword MUST be an array. This array SHOULD have at least one element. Elements in the array SHOULD be unique. An instance validates successfully against this keyword if its value is equal to one of the elements in this keyword's array value. Elements in the array might be of any type, including null.","title":"enum"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.example","text":"example : Optional [ Any ] = None A free-form property to include an example of an instance for this schema. To represent examples that cannot be naturally represented in JSON or YAML, a string value can be used to contain the example with escaping where necessary. Deprecated: The example property has been deprecated in favor of the JSON Schema examples keyword. Use of example is discouraged, and later versions of this specification may remove it.","title":"example"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.examples","text":"examples : Optional [ List [ Any ]] = None The value of this keyword MUST be an array. There are no restrictions placed on the values within the array. When multiple occurrences of this keyword are applicable to a single sub-instance, implementations MUST provide a flat array of all values rather than an array of arrays. This keyword can be used to provide sample JSON values associated with a particular schema, for the purpose of illustrating usage. It is RECOMMENDED that these values be valid against the associated schema. Implementations MAY use the value(s) of \"default\", if present, as an additional example. If \"examples\" is absent, \"default\" MAY still be used in this manner. The OpenAPI Specification's base vocabulary is comprised of the following keywords:","title":"examples"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.exclusiveMaximum","text":"exclusiveMaximum : Optional [ float ] = None The value of \"exclusiveMaximum\" MUST be a number, representing an exclusive upper limit for a numeric instance. If the instance is a number, then the instance is valid only if it has a value strictly less than (not equal to) \"exclusiveMaximum\".","title":"exclusiveMaximum"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.exclusiveMinimum","text":"exclusiveMinimum : Optional [ float ] = None The value of \"exclusiveMinimum\" MUST be a number, representing an exclusive lower limit for a numeric instance. If the instance is a number, then the instance is valid only if it has a value strictly greater than (not equal to) \"exclusiveMinimum\".","title":"exclusiveMinimum"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.externalDocs","text":"externalDocs : Optional [ ExternalDocumentation ] = None Additional external documentation for this schema.","title":"externalDocs"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.items","text":"items : Optional [ Union [ Reference , Schema ]] = None The value of \"items\" MUST be a valid JSON Schema. This keyword applies its subschema to all instance elements at indexes greater than the length of the \"prefixItems\" array in the same schema object, as reported by the annotation result of that \"prefixItems\" keyword. If no such annotation result exists, \"items\" applies its subschema to all instance array elements. [[CREF11: Note that the behavior of \"items\" without \"prefixItems\" is identical to that of the schema form of \"items\" in prior drafts. When \"prefixItems\" is present, the behavior of \"items\" is identical to the former \"additionalItems\" keyword. ]] If the \"items\" subschema is applied to any positions within the instance array, it produces an annotation result of boolean true, indicating that all remaining array elements have been evaluated against this keyword's subschema. Omitting this keyword has the same assertion behavior as an empty schema. Implementations MAY choose to implement or optimize this keyword in another way that produces the same effect, such as by directly checking for the presence and size of a \"prefixItems\" array. Implementations that do not support annotation collection MUST do so.","title":"items"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.maxContains","text":"maxContains : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. If \"contains\" is not present within the same schema object, then this keyword has no effect. An instance array is valid against \"maxContains\" in two ways, depending on the form of the annotation result of an adjacent \"contains\" [json-schema] keyword. The first way is if the annotation result is an array and the length of that array is less than or equal to the \"maxContains\" value. The second way is if the annotation result is a boolean \"true\" and the instance array length is less than or equal to the \"maxContains\" value.","title":"maxContains"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.maxItems","text":"maxItems : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. An array instance is valid against \"maxItems\" if its size is less than, or equal to, the value of this keyword.","title":"maxItems"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.maxLength","text":"maxLength : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. A string instance is valid against this keyword if its length is less than, or equal to, the value of this keyword. The length of a string instance is defined as the number of its characters as defined by RFC 8259 [RFC8259].","title":"maxLength"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.maxProperties","text":"maxProperties : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. An object instance is valid against \"maxProperties\" if its number of properties is less than, or equal to, the value of this keyword.","title":"maxProperties"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.maximum","text":"maximum : Optional [ float ] = None The value of \"maximum\" MUST be a number, representing an inclusive upper limit for a numeric instance. If the instance is a number, then this keyword validates only if the instance is less than or exactly equal to \"maximum\".","title":"maximum"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.minContains","text":"minContains : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. If \"contains\" is not present within the same schema object, then this keyword has no effect. An instance array is valid against \"minContains\" in two ways, depending on the form of the annotation result of an adjacent \"contains\" [json-schema] keyword. The first way is if the annotation result is an array and the length of that array is greater than or equal to the \"minContains\" value. The second way is if the annotation result is a boolean \"true\" and the instance array length is greater than or equal to the \"minContains\" value. A value of 0 is allowed, but is only useful for setting a range of occurrences from 0 to the value of \"maxContains\". A value of 0 with no \"maxContains\" causes \"contains\" to always pass validation. Omitting this keyword has the same behavior as a value of 1.","title":"minContains"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.minItems","text":"minItems : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. An array instance is valid against \"minItems\" if its size is greater than, or equal to, the value of this keyword. Omitting this keyword has the same behavior as a value of 0.","title":"minItems"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.minLength","text":"minLength : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. A string instance is valid against this keyword if its length is greater than, or equal to, the value of this keyword. The length of a string instance is defined as the number of its characters as defined by RFC 8259 [RFC8259]. Omitting this keyword has the same behavior as a value of 0.","title":"minLength"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.minProperties","text":"minProperties : Optional [ int ] = Field ( default = None , ge = 0 ) The value of this keyword MUST be a non-negative integer. An object instance is valid against \"minProperties\" if its number of properties is greater than, or equal to, the value of this keyword. Omitting this keyword has the same behavior as a value of 0.","title":"minProperties"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.minimum","text":"minimum : Optional [ float ] = None The value of \"minimum\" MUST be a number, representing an inclusive lower limit for a numeric instance. If the instance is a number, then this keyword validates only if the instance is greater than or exactly equal to \"minimum\".","title":"minimum"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.multipleOf","text":"multipleOf : Optional [ float ] = Field ( default = None , gt = 0.0 ) The value of \"multipleOf\" MUST be a number, strictly greater than 0. A numeric instance is only valid if division by this keyword's value results in an integer.","title":"multipleOf"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.oneOf","text":"oneOf : Optional [ List [ Union [ Reference , Schema ]]] = None This keyword's value MUST be a non-empty array. Each item of the array MUST be a valid JSON Schema. An instance validates successfully against this keyword if it validates successfully against exactly one schema defined by this keyword's value.","title":"oneOf"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.pattern","text":"pattern : Optional [ str ] = None The value of this keyword MUST be a string. This string SHOULD be a valid regular expression, according to the ECMA-262 regular expression dialect. A string instance is considered valid if the regular expression matches the instance successfully. Recall: regular expressions are not implicitly anchored.","title":"pattern"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.patternProperties","text":"patternProperties : Optional [ Dict [ str , Union [ Reference , Schema ]]] = None The value of \"patternProperties\" MUST be an object. Each property name of this object SHOULD be a valid regular expression, according to the ECMA-262 regular expression dialect. Each property value of this object MUST be a valid JSON Schema. Validation succeeds if, for each instance name that matches any regular expressions that appear as a property name in this keyword's value, the child instance for that name successfully validates against each schema that corresponds to a matching regular expression. The annotation result of this keyword is the set of instance property names matched by this keyword. Omitting this keyword has the same assertion behavior as an empty object.","title":"patternProperties"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.prefixItems","text":"prefixItems : Optional [ List [ Union [ Reference , Schema ]]] = None The value of \"prefixItems\" MUST be a non-empty array of valid JSON Schemas. Validation succeeds if each element of the instance validates against the schema at the same position, if any. This keyword does not constrain the length of the array. If the array is longer than this keyword's value, this keyword validates only the prefix of matching length. This keyword produces an annotation value which is the largest index to which this keyword applied a subschema. The value MAY be a boolean true if a subschema was applied to every index of the instance, such as is produced by the \"items\" keyword. This annotation affects the behavior of \"items\" and \"unevaluatedItems\". Omitting this keyword has the same assertion behavior as an empty array.","title":"prefixItems"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.properties","text":"properties : Optional [ Dict [ str , Union [ Reference , Schema ]]] = None The value of \"properties\" MUST be an object. Each value of this object MUST be a valid JSON Schema. Validation succeeds if, for each name that appears in both the instance and as a name within this keyword's value, the child instance for that name successfully validates against the corresponding schema. The annotation result of this keyword is the set of instance property names matched by this keyword. Omitting this keyword has the same assertion behavior as an empty object.","title":"properties"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.propertyNames","text":"propertyNames : Optional [ Union [ Reference , Schema ]] = None The value of \"propertyNames\" MUST be a valid JSON Schema. If the instance is an object, this keyword validates if every property name in the instance validates against the provided schema. Note the property name that the schema is testing will always be a string. Omitting this keyword has the same behavior as an empty schema.","title":"propertyNames"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.readOnly","text":"readOnly : Optional [ bool ] = None The value of \"readOnly\" MUST be a boolean. When multiple occurrences of this keyword are applicable to a single sub-instance, the resulting behavior SHOULD be as for a true value if any occurrence specifies a true value, and SHOULD be as for a false value otherwise. If \"readOnly\" has a value of boolean true, it indicates that the value of the instance is managed exclusively by the owning authority, and attempts by an application to modify the value of this property are expected to be ignored or rejected by that owning authority. An instance document that is marked as \"readOnly\" for the entire document MAY be ignored if sent to the owning authority, or MAY result in an error, at the authority's discretion. For example, \"readOnly\" would be used to mark a database-generated serial number as read-only, while \"writeOnly\" would be used to mark a password input field. This keyword can be used to assist in user interface instance generation. In particular, an application MAY choose to use a widget that hides input values as they are typed for write-only fields. Omitting these keywords has the same behavior as values of false.","title":"readOnly"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.required","text":"required : Optional [ List [ str ]] = None The value of this keyword MUST be an array. Elements of this array, if any, MUST be strings, and MUST be unique. An object instance is valid against this keyword if every item in the array is the name of a property in the instance. Omitting this keyword has the same behavior as an empty array.","title":"required"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.schema_else","text":"schema_else : Optional [ Union [ Reference , Schema ]] = Field ( default = None , alias = 'else' ) This keyword's value MUST be a valid JSON Schema. When \"if\" is present, and the instance fails to validate against its subschema, then validation succeeds against this keyword if the instance successfully validates against this keyword's subschema. This keyword has no effect when \"if\" is absent, or when the instance successfully validates against its subschema. Implementations MUST NOT evaluate the instance against this keyword, for either validation or annotation collection purposes, in such cases.","title":"schema_else"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.schema_format","text":"schema_format : Optional [ str ] = Field ( default = None , alias = 'format' ) From OpenAPI: See [Data Type Formats<https://spec.openapis.org/oas/v3.1.0#dataTypeFormat) for further details. While relying on JSON Schema's defined formats, the OAS offers a few additional predefined formats. From JSON Schema: Structural validation alone may be insufficient to allow an application to correctly utilize certain values. The \"format\" annotation keyword is defined to allow schema authors to convey semantic information for a fixed subset of values which are accurately described by authoritative resources, be they RFCs or other external specifications. The value of this keyword is called a format attribute. It MUST be a string. A format attribute can generally only validate a given set of instance types. If the type of the instance to validate is not in this set, validation for this format attribute and instance SHOULD succeed. All format attributes defined in this section apply to strings, but a format attribute can be specified to apply to any instance types defined in the data model defined in the core JSON Schema. [json-schema] [[CREF1: Note that the \"type\" keyword in this specification defines an \"integer\" type which is not part of the data model. Therefore a format attribute can be limited to numbers, but not specifically to integers. However, a numeric format can be used alongside the \"type\" keyword with a value of \"integer\", or could be explicitly defined to always pass if the number is not an integer, which produces essentially the same behavior as only applying to integers. ]]","title":"schema_format"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.schema_if","text":"schema_if : Optional [ Union [ Reference , Schema ]] = Field ( default = None , alias = 'if' ) This keyword's value MUST be a valid JSON Schema. This validation outcome of this keyword's subschema has no direct effect on the overall validation result. Rather, it controls which of the \"then\" or \"else\" keywords are evaluated. Instances that successfully validate against this keyword's subschema MUST also be valid against the subschema value of the \"then\" keyword, if present. Instances that fail to validate against this keyword's subschema MUST also be valid against the subschema value of the \"else\" keyword, if present. If annotations (Section 7.7) are being collected, they are collected from this keyword's subschema in the usual way, including when the keyword is present without either \"then\" or \"else\".","title":"schema_if"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.schema_not","text":"schema_not : Optional [ Union [ Reference , Schema ]] = Field ( default = None , alias = 'not' ) This keyword's value MUST be a valid JSON Schema. An instance is valid against this keyword if it fails to validate successfully against the schema defined by this keyword.","title":"schema_not"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.then","text":"then : Optional [ Union [ Reference , Schema ]] = None This keyword's value MUST be a valid JSON Schema. When \"if\" is present, and the instance successfully validates against its subschema, then validation succeeds against this keyword if the instance also successfully validates against this keyword's subschema. This keyword has no effect when \"if\" is absent, or when the instance fails to validate against its subschema. Implementations MUST NOT evaluate the instance against this keyword, for either validation or annotation collection purposes, in such cases.","title":"then"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.title","text":"title : Optional [ str ] = None The value of \"title\" MUST be a string. The title can be used to decorate a user interface with information about the data produced by this user interface. A title will preferably be short.","title":"title"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.type","text":"type : Optional [ Union [ str , List [ str ]]] = None The value of this keyword MUST be either a string or an array. If it is an array, elements of the array MUST be strings and MUST be unique. String values MUST be one of the six primitive types (\"null\", \"boolean\", \"object\", \"array\", \"number\", or \"string\"), or \"integer\" which matches any number with a zero fractional part. An instance validates if and only if the instance is in any of the sets listed for this keyword.","title":"type"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.unevaluatedItems","text":"unevaluatedItems : Optional [ Union [ Reference , Schema ]] = None The value of \"unevaluatedItems\" MUST be a valid JSON Schema. The behavior of this keyword depends on the annotation results of adjacent keywords that apply to the instance location being validated. Specifically, the annotations from \"prefixItems\", \"items\", and \"contains\", which can come from those keywords when they are adjacent to the \"unevaluatedItems\" keyword. Those three annotations, as well as \"unevaluatedItems\", can also result from any and all adjacent in-place applicator (Section 10.2) keywords. This includes but is not limited to the in-place applicators defined in this document. If no relevant annotations are present, the \"unevaluatedItems\" subschema MUST be applied to all locations in the array. If a boolean true value is present from any of the relevant annotations, \"unevaluatedItems\" MUST be ignored. Otherwise, the subschema MUST be applied to any index greater than the largest annotation value for \"prefixItems\", which does not appear in any annotation value for \"contains\". This means that \"prefixItems\", \"items\", \"contains\", and all in-place applicators MUST be evaluated before this keyword can be evaluated. Authors of extension keywords MUST NOT define an in-place applicator that would need to be evaluated after this keyword. If the \"unevaluatedItems\" subschema is applied to any positions within the instance array, it produces an annotation result of boolean true, analogous to the behavior of \"items\". Omitting this keyword has the same assertion behavior as an empty schema.","title":"unevaluatedItems"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.unevaluatedProperties","text":"unevaluatedProperties : Optional [ Union [ Reference , Schema ]] = None The value of \"unevaluatedProperties\" MUST be a valid JSON Schema. The behavior of this keyword depends on the annotation results of adjacent keywords that apply to the instance location being validated. Specifically, the annotations from \"properties\", \"patternProperties\", and \"additionalProperties\", which can come from those keywords when they are adjacent to the \"unevaluatedProperties\" keyword. Those three annotations, as well as \"unevaluatedProperties\", can also result from any and all adjacent in-place applicator (Section 10.2) keywords. This includes but is not limited to the in-place applicators defined in this document. Validation with \"unevaluatedProperties\" applies only to the child values of instance names that do not appear in the \"properties\", \"patternProperties\", \"additionalProperties\", or \"unevaluatedProperties\" annotation results that apply to the instance location being validated. For all such properties, validation succeeds if the child instance validates against the \"unevaluatedProperties\" schema. This means that \"properties\", \"patternProperties\", \"additionalProperties\", and all in-place applicators MUST be evaluated before this keyword can be evaluated. Authors of extension keywords MUST NOT define an in-place applicator that would need to be evaluated after this keyword. The annotation result of this keyword is the set of instance property names validated by this keyword's subschema. Omitting this keyword has the same assertion behavior as an empty schema. The following properties are taken directly from the JSON Schema Validation and follow the same specifications:","title":"unevaluatedProperties"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.uniqueItems","text":"uniqueItems : Optional [ bool ] = None The value of this keyword MUST be a boolean. If this keyword has boolean value false, the instance validates successfully. If it has boolean value true, the instance validates successfully if all of its elements are unique. Omitting this keyword has the same behavior as a value of false.","title":"uniqueItems"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.writeOnly","text":"writeOnly : Optional [ bool ] = None The value of \"writeOnly\" MUST be a boolean. When multiple occurrences of this keyword are applicable to a single sub-instance, the resulting behavior SHOULD be as for a true value if any occurrence specifies a true value, and SHOULD be as for a false value otherwise. If \"writeOnly\" has a value of boolean true, it indicates that the value is never present when the instance is retrieved from the owning authority. It can be present when sent to the owning authority to update or create the document (or the resource it represents), but it will not be included in any updated or newly created version of the instance. An instance document that is marked as \"writeOnly\" for the entire document MAY be returned as a blank document of some sort, or MAY produce an error upon retrieval, or have the retrieval request ignored, at the authority's discretion. For example, \"readOnly\" would be used to mark a database-generated serial number as read-only, while \"writeOnly\" would be used to mark a password input field. This keyword can be used to assist in user interface instance generation. In particular, an application MAY choose to use a widget that hides input values as they are typed for write-only fields. Omitting these keywords has the same behavior as values of false.","title":"writeOnly"},{"location":"reference/pydantic_openapi_schema/v3_1_0/schema/#pydantic_openapi_schema.v3_1_0.schema.Schema.xml","text":"xml : Optional [ XML ] = None This MAY be used only on properties schemas. It has no effect on root schemas. Adds additional metadata to describe the XML representation of this property.","title":"xml"},{"location":"reference/pydantic_openapi_schema/v3_1_0/security_requirement/","text":"SecurityRequirement module-attribute \u00b6 SecurityRequirement = Dict [ str , List [ str ]] Lists the required security schemes to execute this operation. The name used for each property MUST correspond to a security scheme declared in the. Security Schemes under the Components Object . Security Requirement Objects that contain multiple schemes require that all schemes MUST be satisfied for a request to be authorized. This enables support for scenarios where multiple query parameters or HTTP headers are required to convey security information. When a list of Security Requirement Objects is defined on the OpenAPI Object or Operation Object , only one of the Security Requirement Objects in the list needs to be satisfied to authorize the request. Patterned Fields {name}: List[str] Each name MUST correspond to a security scheme which is declared in the Security Schemes under the Components Object . If the security scheme is of type \"oauth2\" or \"openIdConnect\" , then the value is a list of scope names required for the execution, and the list MAY be empty if authorization does not require a specified scope. For other security scheme types, the array MAY contain a list of role names which are required for the execution, but are not otherwise defined or exchanged in-band.","title":"security_requirement"},{"location":"reference/pydantic_openapi_schema/v3_1_0/security_requirement/#pydantic_openapi_schema.v3_1_0.security_requirement.SecurityRequirement","text":"SecurityRequirement = Dict [ str , List [ str ]] Lists the required security schemes to execute this operation. The name used for each property MUST correspond to a security scheme declared in the. Security Schemes under the Components Object . Security Requirement Objects that contain multiple schemes require that all schemes MUST be satisfied for a request to be authorized. This enables support for scenarios where multiple query parameters or HTTP headers are required to convey security information. When a list of Security Requirement Objects is defined on the OpenAPI Object or Operation Object , only one of the Security Requirement Objects in the list needs to be satisfied to authorize the request. Patterned Fields {name}: List[str] Each name MUST correspond to a security scheme which is declared in the Security Schemes under the Components Object . If the security scheme is of type \"oauth2\" or \"openIdConnect\" , then the value is a list of scope names required for the execution, and the list MAY be empty if authorization does not require a specified scope. For other security scheme types, the array MAY contain a list of role names which are required for the execution, but are not otherwise defined or exchanged in-band.","title":"SecurityRequirement"},{"location":"reference/pydantic_openapi_schema/v3_1_0/security_scheme/","text":"SecurityScheme \u00b6 Bases: BaseModel Defines a security scheme that can be used by the operations. Supported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query parameter), mutual TLS (use of a client certificate), OAuth2's common flows (implicit, password, client credentials and authorization code) as defined in RFC6749 , and OpenID Connect Discovery . Please note that as of 2020, the implicit flow is about to be deprecated by OAuth 2.0 Security Best Current Practice . Recommended for most use case is Authorization Code Grant flow with PKCE. bearerFormat class-attribute \u00b6 bearerFormat : Optional [ str ] = None A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes. description class-attribute \u00b6 description : Optional [ str ] = None A description for security scheme. CommonMark syntax MAY be used for rich text representation. flows class-attribute \u00b6 flows : Optional [ OAuthFlows ] = None REQUIRED for oauth2 . An object containing configuration information for the flow types supported. name class-attribute \u00b6 name : Optional [ str ] = None REQUIRED for apiKey . The name of the header, query or cookie parameter to be used. openIdConnectUrl class-attribute \u00b6 openIdConnectUrl : Optional [ Union [ AnyUrl , str ]] = None REQUIRED for openIdConnect . OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL. The OpenID Connect standard requires the use of TLS. scheme class-attribute \u00b6 scheme : Optional [ str ] = None REQUIRED for http . The name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC7235 . The values used SHOULD be registered in the IANA Authentication Scheme registry . security_scheme_in class-attribute \u00b6 security_scheme_in : Optional [ Literal [ \"query\" , \"header\" , \"cookie\" ]] = Field ( alias = \"in\" , default = None ) REQUIRED for apiKey . The location of the API key. type class-attribute \u00b6 type : Literal [ 'apiKey' , 'http' , 'mutualTLS' , 'oauth2' , 'openIdConnect' ] REQUIRED . The type of the security scheme.","title":"security_scheme"},{"location":"reference/pydantic_openapi_schema/v3_1_0/security_scheme/#pydantic_openapi_schema.v3_1_0.security_scheme.SecurityScheme","text":"Bases: BaseModel Defines a security scheme that can be used by the operations. Supported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query parameter), mutual TLS (use of a client certificate), OAuth2's common flows (implicit, password, client credentials and authorization code) as defined in RFC6749 , and OpenID Connect Discovery . Please note that as of 2020, the implicit flow is about to be deprecated by OAuth 2.0 Security Best Current Practice . Recommended for most use case is Authorization Code Grant flow with PKCE.","title":"SecurityScheme"},{"location":"reference/pydantic_openapi_schema/v3_1_0/security_scheme/#pydantic_openapi_schema.v3_1_0.security_scheme.SecurityScheme.bearerFormat","text":"bearerFormat : Optional [ str ] = None A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.","title":"bearerFormat"},{"location":"reference/pydantic_openapi_schema/v3_1_0/security_scheme/#pydantic_openapi_schema.v3_1_0.security_scheme.SecurityScheme.description","text":"description : Optional [ str ] = None A description for security scheme. CommonMark syntax MAY be used for rich text representation.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/security_scheme/#pydantic_openapi_schema.v3_1_0.security_scheme.SecurityScheme.flows","text":"flows : Optional [ OAuthFlows ] = None REQUIRED for oauth2 . An object containing configuration information for the flow types supported.","title":"flows"},{"location":"reference/pydantic_openapi_schema/v3_1_0/security_scheme/#pydantic_openapi_schema.v3_1_0.security_scheme.SecurityScheme.name","text":"name : Optional [ str ] = None REQUIRED for apiKey . The name of the header, query or cookie parameter to be used.","title":"name"},{"location":"reference/pydantic_openapi_schema/v3_1_0/security_scheme/#pydantic_openapi_schema.v3_1_0.security_scheme.SecurityScheme.openIdConnectUrl","text":"openIdConnectUrl : Optional [ Union [ AnyUrl , str ]] = None REQUIRED for openIdConnect . OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL. The OpenID Connect standard requires the use of TLS.","title":"openIdConnectUrl"},{"location":"reference/pydantic_openapi_schema/v3_1_0/security_scheme/#pydantic_openapi_schema.v3_1_0.security_scheme.SecurityScheme.scheme","text":"scheme : Optional [ str ] = None REQUIRED for http . The name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC7235 . The values used SHOULD be registered in the IANA Authentication Scheme registry .","title":"scheme"},{"location":"reference/pydantic_openapi_schema/v3_1_0/security_scheme/#pydantic_openapi_schema.v3_1_0.security_scheme.SecurityScheme.security_scheme_in","text":"security_scheme_in : Optional [ Literal [ \"query\" , \"header\" , \"cookie\" ]] = Field ( alias = \"in\" , default = None ) REQUIRED for apiKey . The location of the API key.","title":"security_scheme_in"},{"location":"reference/pydantic_openapi_schema/v3_1_0/security_scheme/#pydantic_openapi_schema.v3_1_0.security_scheme.SecurityScheme.type","text":"type : Literal [ 'apiKey' , 'http' , 'mutualTLS' , 'oauth2' , 'openIdConnect' ] REQUIRED . The type of the security scheme.","title":"type"},{"location":"reference/pydantic_openapi_schema/v3_1_0/server/","text":"Server \u00b6 Bases: BaseModel An object representing a Server. description class-attribute \u00b6 description : Optional [ str ] = None An optional string describing the host designated by the URL. CommonMark syntax MAY be used for rich text representation. url class-attribute \u00b6 url : str REQUIRED . A URL to the target host. This URL supports Server Variables and MAY be relative, to indicate that the host location is relative to the location where the OpenAPI document is being served. Variable substitutions will be made when a variable is named in { brackets } . variables class-attribute \u00b6 variables : Optional [ Dict [ str , ServerVariable ]] = None A map between a variable name and its value. The value is used for substitution in the server's URL template.","title":"server"},{"location":"reference/pydantic_openapi_schema/v3_1_0/server/#pydantic_openapi_schema.v3_1_0.server.Server","text":"Bases: BaseModel An object representing a Server.","title":"Server"},{"location":"reference/pydantic_openapi_schema/v3_1_0/server/#pydantic_openapi_schema.v3_1_0.server.Server.description","text":"description : Optional [ str ] = None An optional string describing the host designated by the URL. CommonMark syntax MAY be used for rich text representation.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/server/#pydantic_openapi_schema.v3_1_0.server.Server.url","text":"url : str REQUIRED . A URL to the target host. This URL supports Server Variables and MAY be relative, to indicate that the host location is relative to the location where the OpenAPI document is being served. Variable substitutions will be made when a variable is named in { brackets } .","title":"url"},{"location":"reference/pydantic_openapi_schema/v3_1_0/server/#pydantic_openapi_schema.v3_1_0.server.Server.variables","text":"variables : Optional [ Dict [ str , ServerVariable ]] = None A map between a variable name and its value. The value is used for substitution in the server's URL template.","title":"variables"},{"location":"reference/pydantic_openapi_schema/v3_1_0/server_variable/","text":"ServerVariable \u00b6 Bases: BaseModel An object representing a Server Variable for server URL template substitution. default class-attribute \u00b6 default : str REQUIRED . The default value to use for substitution, which SHALL be sent if an alternate value is not supplied. Note this behavior is different than the Schema Object's treatment of default values, because in those cases parameter values are optional. If the enum is defined, the value MUST exist in the enum's values. description class-attribute \u00b6 description : Optional [ str ] = None An optional description for the server variable. CommonMark syntax MAY be used for rich text representation. enum class-attribute \u00b6 enum : Optional [ List [ str ]] = None An enumeration of string values to be used if the substitution options are from a limited set. The array SHOULD NOT be empty.","title":"server_variable"},{"location":"reference/pydantic_openapi_schema/v3_1_0/server_variable/#pydantic_openapi_schema.v3_1_0.server_variable.ServerVariable","text":"Bases: BaseModel An object representing a Server Variable for server URL template substitution.","title":"ServerVariable"},{"location":"reference/pydantic_openapi_schema/v3_1_0/server_variable/#pydantic_openapi_schema.v3_1_0.server_variable.ServerVariable.default","text":"default : str REQUIRED . The default value to use for substitution, which SHALL be sent if an alternate value is not supplied. Note this behavior is different than the Schema Object's treatment of default values, because in those cases parameter values are optional. If the enum is defined, the value MUST exist in the enum's values.","title":"default"},{"location":"reference/pydantic_openapi_schema/v3_1_0/server_variable/#pydantic_openapi_schema.v3_1_0.server_variable.ServerVariable.description","text":"description : Optional [ str ] = None An optional description for the server variable. CommonMark syntax MAY be used for rich text representation.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/server_variable/#pydantic_openapi_schema.v3_1_0.server_variable.ServerVariable.enum","text":"enum : Optional [ List [ str ]] = None An enumeration of string values to be used if the substitution options are from a limited set. The array SHOULD NOT be empty.","title":"enum"},{"location":"reference/pydantic_openapi_schema/v3_1_0/tag/","text":"Tag \u00b6 Bases: BaseModel Adds metadata to a single tag that is used by the Operation Object . It is not mandatory to have a Tag Object per tag defined in the Operation Object instances. description class-attribute \u00b6 description : Optional [ str ] = None A short description for the tag. CommonMark syntax MAY be used for rich text representation. externalDocs class-attribute \u00b6 externalDocs : Optional [ ExternalDocumentation ] = None Additional external documentation for this tag. name class-attribute \u00b6 name : str REQUIRED . The name of the tag.","title":"tag"},{"location":"reference/pydantic_openapi_schema/v3_1_0/tag/#pydantic_openapi_schema.v3_1_0.tag.Tag","text":"Bases: BaseModel Adds metadata to a single tag that is used by the Operation Object . It is not mandatory to have a Tag Object per tag defined in the Operation Object instances.","title":"Tag"},{"location":"reference/pydantic_openapi_schema/v3_1_0/tag/#pydantic_openapi_schema.v3_1_0.tag.Tag.description","text":"description : Optional [ str ] = None A short description for the tag. CommonMark syntax MAY be used for rich text representation.","title":"description"},{"location":"reference/pydantic_openapi_schema/v3_1_0/tag/#pydantic_openapi_schema.v3_1_0.tag.Tag.externalDocs","text":"externalDocs : Optional [ ExternalDocumentation ] = None Additional external documentation for this tag.","title":"externalDocs"},{"location":"reference/pydantic_openapi_schema/v3_1_0/tag/#pydantic_openapi_schema.v3_1_0.tag.Tag.name","text":"name : str REQUIRED . The name of the tag.","title":"name"},{"location":"reference/pydantic_openapi_schema/v3_1_0/xml/","text":"XML \u00b6 Bases: BaseModel A metadata object that allows for more fine-tuned XML model definitions. When using arrays, XML element names are not inferred (for singular/plural forms) and the name property SHOULD be used to add that information. See examples for expected behavior. attribute class-attribute \u00b6 attribute : bool = False Declares whether the property definition translates to an attribute instead of an element. Default value is false . name class-attribute \u00b6 name : Optional [ str ] = None Replaces the name of the element/attribute used for the described schema property. When defined within items , it will affect the name of the individual XML elements within the list. When defined alongside type being array (outside the items ), it will affect the wrapping element and only if wrapped is true . If wrapped is false , it will be ignored. namespace class-attribute \u00b6 namespace : Optional [ str ] = None The URI of the namespace definition. Value MUST be in the form of an absolute URI. prefix class-attribute \u00b6 prefix : Optional [ str ] = None The prefix to be used for the name . wrapped class-attribute \u00b6 wrapped : bool = False MAY be used only for an array definition. Signifies whether the array is wrapped (for example, <books><book/><book/></books> ) or unwrapped ( <book/><book/> ). Default value is false . The definition takes effect only when defined alongside type being array (outside the items ).","title":"xml"},{"location":"reference/pydantic_openapi_schema/v3_1_0/xml/#pydantic_openapi_schema.v3_1_0.xml.XML","text":"Bases: BaseModel A metadata object that allows for more fine-tuned XML model definitions. When using arrays, XML element names are not inferred (for singular/plural forms) and the name property SHOULD be used to add that information. See examples for expected behavior.","title":"XML"},{"location":"reference/pydantic_openapi_schema/v3_1_0/xml/#pydantic_openapi_schema.v3_1_0.xml.XML.attribute","text":"attribute : bool = False Declares whether the property definition translates to an attribute instead of an element. Default value is false .","title":"attribute"},{"location":"reference/pydantic_openapi_schema/v3_1_0/xml/#pydantic_openapi_schema.v3_1_0.xml.XML.name","text":"name : Optional [ str ] = None Replaces the name of the element/attribute used for the described schema property. When defined within items , it will affect the name of the individual XML elements within the list. When defined alongside type being array (outside the items ), it will affect the wrapping element and only if wrapped is true . If wrapped is false , it will be ignored.","title":"name"},{"location":"reference/pydantic_openapi_schema/v3_1_0/xml/#pydantic_openapi_schema.v3_1_0.xml.XML.namespace","text":"namespace : Optional [ str ] = None The URI of the namespace definition. Value MUST be in the form of an absolute URI.","title":"namespace"},{"location":"reference/pydantic_openapi_schema/v3_1_0/xml/#pydantic_openapi_schema.v3_1_0.xml.XML.prefix","text":"prefix : Optional [ str ] = None The prefix to be used for the name .","title":"prefix"},{"location":"reference/pydantic_openapi_schema/v3_1_0/xml/#pydantic_openapi_schema.v3_1_0.xml.XML.wrapped","text":"wrapped : bool = False MAY be used only for an array definition. Signifies whether the array is wrapped (for example, <books><book/><book/></books> ) or unwrapped ( <book/><book/> ). Default value is false . The definition takes effect only when defined alongside type being array (outside the items ).","title":"wrapped"}]}